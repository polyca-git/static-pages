<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.1" created="2014-08-17 13:50" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Tales from behind the browser</title>
	<link>http://mono.servicestack.net/mythz_blog</link>
	<description>adventures in code</description>
	<pubDate>Sun, 17 Aug 2014 13:50:38 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://mono.servicestack.net/mythz_blog</wp:base_site_url>
	<wp:base_blog_url>http://mono.servicestack.net/mythz_blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>demis.bellot@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>mythz</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[mythz]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>

	<generator>http://wordpress.org/?v=3.3.1</generator>

	<item>
		<title>Black256-703543</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=84</link>
		<pubDate>Mon, 22 Mar 2010 19:01:03 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/03/Black256-703543.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Download Mflow]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2010-03-22 22:01:03</wp:post_date>
		<wp:post_date_gmt>2010-03-22 19:01:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>black256-703543</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>83</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/03/Black256-703543.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/Black256-703543.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"256";s:6:"height";s:3:"256";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:27:"2010/03/Black256-703543.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"Black256-703543-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>itunes-logo</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=95</link>
		<pubDate>Tue, 23 Mar 2010 01:18:01 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/03/itunes-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[itunes logo]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2010-03-23 04:18:01</wp:post_date>
		<wp:post_date_gmt>2010-03-23 01:18:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>itunes-logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>83</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/03/itunes-logo.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/itunes-logo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"137";s:6:"height";s:3:"153";s:14:"hwstring_small";s:22:"height='96' width='85'";s:4:"file";s:23:"2010/03/itunes-logo.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"itunes-logo-137x150.png";s:5:"width";s:3:"137";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>spotify-logo</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=102</link>
		<pubDate>Tue, 23 Mar 2010 01:24:29 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/03/spotify-logo-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[spotify logo]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2010-03-23 04:24:29</wp:post_date>
		<wp:post_date_gmt>2010-03-23 01:24:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spotify-logo-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>83</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/03/spotify-logo-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/spotify-logo-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"225";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:26:"2010/03/spotify-logo-1.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"spotify-logo-1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nosql_thumb.gif</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=126</link>
		<pubDate>Mon, 29 Mar 2010 22:17:06 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2010-03-30 01:17:06</wp:post_date>
		<wp:post_date_gmt>2010-03-29 22:17:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql_thumb-gif</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/nosql_thumb.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"180";s:6:"height";s:3:"120";s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:23:"2010/03/nosql_thumb.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"nosql_thumb-150x120.gif";s:5:"width";s:3:"150";s:6:"height";s:3:"120";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nosql_thumb_thumb.gif</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=127</link>
		<pubDate>Mon, 29 Mar 2010 22:17:06 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb_thumb.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2010-03-30 01:17:06</wp:post_date>
		<wp:post_date_gmt>2010-03-29 22:17:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql_thumb_thumb-gif</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb_thumb.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/nosql_thumb_thumb.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"180";s:6:"height";s:3:"120";s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:29:"2010/03/nosql_thumb_thumb.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"nosql_thumb_thumb-150x120.gif";s:5:"width";s:3:"150";s:6:"height";s:3:"120";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>redis.png</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=128</link>
		<pubDate>Mon, 29 Mar 2010 22:17:06 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/03/redis.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2010-03-30 01:17:06</wp:post_date>
		<wp:post_date_gmt>2010-03-29 22:17:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>redis-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/03/redis.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/redis.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"112";s:6:"height";s:2:"86";s:14:"hwstring_small";s:23:"height='86' width='112'";s:4:"file";s:17:"2010/03/redis.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JsvFragment</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=187</link>
		<pubDate>Sat, 10 Apr 2010 01:27:32 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/04/JsvFragment.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date>2010-04-10 04:27:32</wp:post_date>
		<wp:post_date_gmt>2010-04-10 01:27:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsvfragment</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>176</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/04/JsvFragment.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/04/JsvFragment.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"592";s:6:"height";s:3:"694";s:14:"hwstring_small";s:22:"height='96' width='81'";s:4:"file";s:23:"2010/04/JsvFragment.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"JsvFragment-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"JsvFragment-255x300.png";s:5:"width";s:3:"255";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:23:"JsvFragment-592x288.png";s:5:"width";s:3:"592";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:23:"JsvFragment-592x288.png";s:5:"width";s:3:"592";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"JsvFragment-255x300.png";s:5:"width";s:3:"255";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XmlFragment</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=188</link>
		<pubDate>Sat, 10 Apr 2010 01:27:57 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/04/XmlFragment.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2010-04-10 04:27:57</wp:post_date>
		<wp:post_date_gmt>2010-04-10 01:27:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmlfragment</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>176</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/04/XmlFragment.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/04/XmlFragment.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"590";s:6:"height";s:3:"689";s:14:"hwstring_small";s:22:"height='96' width='82'";s:4:"file";s:23:"2010/04/XmlFragment.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"XmlFragment-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"XmlFragment-256x300.png";s:5:"width";s:3:"256";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:23:"XmlFragment-590x288.png";s:5:"width";s:3:"590";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:23:"XmlFragment-590x288.png";s:5:"width";s:3:"590";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"XmlFragment-256x300.png";s:5:"width";s:3:"256";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>new-mflow-homepage</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=236</link>
		<pubDate>Tue, 18 May 2010 19:39:47 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/05/new-mflow-homepage.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[New look mflow with tonnes new features!]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2010-05-18 22:39:47</wp:post_date>
		<wp:post_date_gmt>2010-05-18 19:39:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-mflow-homepage</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/05/new-mflow-homepage.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/05/new-mflow-homepage.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1229";s:6:"height";s:3:"958";s:14:"hwstring_small";s:23:"height='96' width='123'";s:4:"file";s:30:"2010/05/new-mflow-homepage.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"new-mflow-homepage-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"new-mflow-homepage-300x233.png";s:5:"width";s:3:"300";s:6:"height";s:3:"233";}s:5:"large";a:3:{s:4:"file";s:31:"new-mflow-homepage-1024x798.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"798";}s:14:"post-thumbnail";a:3:{s:4:"file";s:31:"new-mflow-homepage-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:31:"new-mflow-homepage-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:30:"new-mflow-homepage-384x300.png";s:5:"width";s:3:"384";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[new mflow homepage]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>new-mflow-homepage-thumb</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=238</link>
		<pubDate>Tue, 18 May 2010 19:41:56 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/05/new-mflow-homepage-thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2010-05-18 22:41:56</wp:post_date>
		<wp:post_date_gmt>2010-05-18 19:41:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-mflow-homepage-thumb</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/05/new-mflow-homepage-thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/05/new-mflow-homepage-thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"390";s:14:"hwstring_small";s:23:"height='96' width='123'";s:4:"file";s:36:"2010/05/new-mflow-homepage-thumb.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:36:"new-mflow-homepage-thumb-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:36:"new-mflow-homepage-thumb-300x234.png";s:5:"width";s:3:"300";s:6:"height";s:3:"234";}s:14:"post-thumbnail";a:3:{s:4:"file";s:36:"new-mflow-homepage-thumb-500x288.png";s:5:"width";s:3:"500";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:36:"new-mflow-homepage-thumb-500x288.png";s:5:"width";s:3:"500";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:36:"new-mflow-homepage-thumb-384x300.png";s:5:"width";s:3:"384";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[preview of new mflow homepage]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mvc2-empty-project</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=260</link>
		<pubDate>Thu, 24 Jun 2010 23:12:22 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/mvc2-empty-project.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2010-06-25 02:12:22</wp:post_date>
		<wp:post_date_gmt>2010-06-24 23:12:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mvc2-empty-project</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/mvc2-empty-project.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/mvc2-empty-project.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"251";s:6:"height";s:3:"443";s:14:"hwstring_small";s:22:"height='96' width='54'";s:4:"file";s:30:"2010/06/mvc2-empty-project.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"mvc2-empty-project-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"mvc2-empty-project-169x300.png";s:5:"width";s:3:"169";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:30:"mvc2-empty-project-251x288.png";s:5:"width";s:3:"251";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:30:"mvc2-empty-project-251x288.png";s:5:"width";s:3:"251";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:30:"mvc2-empty-project-169x300.png";s:5:"width";s:3:"169";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>home-controller</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=261</link>
		<pubDate>Thu, 24 Jun 2010 23:59:47 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/home-controller.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2010-06-25 02:59:47</wp:post_date>
		<wp:post_date_gmt>2010-06-24 23:59:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>home-controller</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/home-controller.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/home-controller.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"409";s:6:"height";s:3:"249";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:27:"2010/06/home-controller.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"home-controller-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"home-controller-300x182.png";s:5:"width";s:3:"300";s:6:"height";s:3:"182";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>asp.net_logo_small</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=266</link>
		<pubDate>Mon, 28 Jun 2010 21:38:00 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/asp.net_logo_small.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2010-06-29 00:38:00</wp:post_date>
		<wp:post_date_gmt>2010-06-28 21:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asp-net_logo_small</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/asp.net_logo_small.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/asp.net_logo_small.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"149";s:6:"height";s:2:"58";s:14:"hwstring_small";s:23:"height='49' width='128'";s:4:"file";s:30:"2010/06/asp.net_logo_small.gif";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>java-logo</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=267</link>
		<pubDate>Mon, 28 Jun 2010 21:38:01 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/java-logo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2010-06-29 00:38:01</wp:post_date>
		<wp:post_date_gmt>2010-06-28 21:38:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/java-logo.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/java-logo.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:2:"96";s:6:"height";s:2:"96";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:21:"2010/06/java-logo.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>logo_asp</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=268</link>
		<pubDate>Mon, 28 Jun 2010 21:38:01 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/logo_asp.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date>2010-06-29 00:38:01</wp:post_date>
		<wp:post_date_gmt>2010-06-28 21:38:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logo_asp</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/logo_asp.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/logo_asp.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"140";s:6:"height";s:2:"57";s:14:"hwstring_small";s:23:"height='52' width='128'";s:4:"file";s:20:"2010/06/logo_asp.gif";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>asp-net-mvc</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=269</link>
		<pubDate>Mon, 28 Jun 2010 21:40:44 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/asp-net-mvc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2010-06-29 00:40:44</wp:post_date>
		<wp:post_date_gmt>2010-06-28 21:40:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asp-net-mvc</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/asp-net-mvc.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/asp-net-mvc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"323";s:6:"height";s:3:"310";s:14:"hwstring_small";s:23:"height='96' width='100'";s:4:"file";s:23:"2010/06/asp-net-mvc.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"asp-net-mvc-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"asp-net-mvc-300x287.png";s:5:"width";s:3:"300";s:6:"height";s:3:"287";}s:14:"post-thumbnail";a:3:{s:4:"file";s:23:"asp-net-mvc-323x288.png";s:5:"width";s:3:"323";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:23:"asp-net-mvc-323x288.png";s:5:"width";s:3:"323";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"asp-net-mvc-312x300.png";s:5:"width";s:3:"312";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Net Logo with ASP.NET</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=270</link>
		<pubDate>Mon, 28 Jun 2010 21:45:45 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/06/Net-Logo-with-ASP.NET_7E879BE1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2010-06-29 00:45:45</wp:post_date>
		<wp:post_date_gmt>2010-06-28 21:45:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-logo-with-asp-net_7e879be1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/06/Net-Logo-with-ASP.NET_7E879BE1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/Net-Logo-with-ASP.NET_7E879BE1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"376";s:6:"height";s:2:"72";s:14:"hwstring_small";s:23:"height='24' width='128'";s:4:"file";s:42:"2010/06/Net-Logo-with-ASP.NET_7E879BE1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:41:"Net-Logo-with-ASP.NET_7E879BE1-150x72.jpg";s:5:"width";s:3:"150";s:6:"height";s:2:"72";}s:6:"medium";a:3:{s:4:"file";s:41:"Net-Logo-with-ASP.NET_7E879BE1-300x57.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"57";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Admin_Tab</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=399</link>
		<pubDate>Thu, 26 Aug 2010 10:27:36 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/08/Admin_Tab.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date>2010-08-26 13:27:36</wp:post_date>
		<wp:post_date_gmt>2010-08-26 10:27:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>admin_tab</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/08/Admin_Tab.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/Admin_Tab.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1005";s:6:"height";s:3:"841";s:14:"hwstring_small";s:23:"height='96' width='114'";s:4:"file";s:21:"2010/08/Admin_Tab.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"Admin_Tab-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:21:"Admin_Tab-300x251.png";s:5:"width";s:3:"300";s:6:"height";s:3:"251";}s:14:"post-thumbnail";a:3:{s:4:"file";s:22:"Admin_Tab-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:22:"Admin_Tab-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:21:"Admin_Tab-358x300.png";s:5:"width";s:3:"358";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>View Key Group</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=400</link>
		<pubDate>Thu, 26 Aug 2010 10:32:52 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/08/View_Key_Group.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2010-08-26 13:32:52</wp:post_date>
		<wp:post_date_gmt>2010-08-26 10:32:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view_key_group</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/08/View_Key_Group.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/View_Key_Group.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1005";s:6:"height";s:3:"841";s:14:"hwstring_small";s:23:"height='96' width='114'";s:4:"file";s:26:"2010/08/View_Key_Group.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"View_Key_Group-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"View_Key_Group-300x251.png";s:5:"width";s:3:"300";s:6:"height";s:3:"251";}s:14:"post-thumbnail";a:3:{s:4:"file";s:27:"View_Key_Group-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:27:"View_Key_Group-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:26:"View_Key_Group-358x300.png";s:5:"width";s:3:"358";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>View Complex Type</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=401</link>
		<pubDate>Thu, 26 Aug 2010 10:38:31 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/08/View_Complex_Type.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[View single complex type]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date>2010-08-26 13:38:31</wp:post_date>
		<wp:post_date_gmt>2010-08-26 10:38:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view_complex_type</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>381</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/08/View_Complex_Type.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/View_Complex_Type.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1005";s:6:"height";s:3:"841";s:14:"hwstring_small";s:23:"height='96' width='114'";s:4:"file";s:29:"2010/08/View_Complex_Type.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"View_Complex_Type-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"View_Complex_Type-300x251.png";s:5:"width";s:3:"300";s:6:"height";s:3:"251";}s:14:"post-thumbnail";a:3:{s:4:"file";s:30:"View_Complex_Type-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:30:"View_Complex_Type-1000x288.png";s:5:"width";s:4:"1000";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:29:"View_Complex_Type-358x300.png";s:5:"width";s:3:"358";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HttpJsonWebServices</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=418</link>
		<pubDate>Tue, 07 Sep 2010 19:12:02 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/HttpJsonWebServices.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date>2010-09-07 22:12:02</wp:post_date>
		<wp:post_date_gmt>2010-09-07 19:12:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>httpjsonwebservices</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/HttpJsonWebServices.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/HttpJsonWebServices.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"477";s:6:"height";s:3:"467";s:14:"hwstring_small";s:22:"height='96' width='98'";s:4:"file";s:31:"2010/09/HttpJsonWebServices.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"HttpJsonWebServices-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"HttpJsonWebServices-300x293.png";s:5:"width";s:3:"300";s:6:"height";s:3:"293";}s:14:"post-thumbnail";a:3:{s:4:"file";s:31:"HttpJsonWebServices-477x288.png";s:5:"width";s:3:"477";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:31:"HttpJsonWebServices-477x288.png";s:5:"width";s:3:"477";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:31:"HttpJsonWebServices-306x300.png";s:5:"width";s:3:"306";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ContactsService</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=419</link>
		<pubDate>Tue, 07 Sep 2010 19:38:53 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/ContactsService.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2010-09-07 22:38:53</wp:post_date>
		<wp:post_date_gmt>2010-09-07 19:38:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contactsservice</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/ContactsService.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/ContactsService.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"483";s:6:"height";s:3:"403";s:14:"hwstring_small";s:23:"height='96' width='115'";s:4:"file";s:27:"2010/09/ContactsService.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"ContactsService-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"ContactsService-300x250.png";s:5:"width";s:3:"300";s:6:"height";s:3:"250";}s:14:"post-thumbnail";a:3:{s:4:"file";s:27:"ContactsService-483x288.png";s:5:"width";s:3:"483";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:27:"ContactsService-483x288.png";s:5:"width";s:3:"483";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:27:"ContactsService-359x300.png";s:5:"width";s:3:"359";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JsonXmlResults</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=420</link>
		<pubDate>Tue, 07 Sep 2010 19:41:45 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/JsonXmlResults.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date>2010-09-07 22:41:45</wp:post_date>
		<wp:post_date_gmt>2010-09-07 19:41:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsonxmlresults</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/JsonXmlResults.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/JsonXmlResults.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"747";s:6:"height";s:3:"600";s:14:"hwstring_small";s:23:"height='96' width='119'";s:4:"file";s:26:"2010/09/JsonXmlResults.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"JsonXmlResults-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"JsonXmlResults-300x240.png";s:5:"width";s:3:"300";s:6:"height";s:3:"240";}s:14:"post-thumbnail";a:3:{s:4:"file";s:26:"JsonXmlResults-747x288.png";s:5:"width";s:3:"747";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:26:"JsonXmlResults-747x288.png";s:5:"width";s:3:"747";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:26:"JsonXmlResults-373x300.png";s:5:"width";s:3:"373";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AjaxResultsOutput</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=421</link>
		<pubDate>Tue, 07 Sep 2010 19:52:17 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/AjaxResultsOutput.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2010-09-07 22:52:17</wp:post_date>
		<wp:post_date_gmt>2010-09-07 19:52:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ajaxresultsoutput</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/AjaxResultsOutput.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/AjaxResultsOutput.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"790";s:6:"height";s:3:"285";s:14:"hwstring_small";s:23:"height='46' width='128'";s:4:"file";s:29:"2010/09/AjaxResultsOutput.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"AjaxResultsOutput-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"AjaxResultsOutput-300x108.png";s:5:"width";s:3:"300";s:6:"height";s:3:"108";}s:13:"small-feature";a:3:{s:4:"file";s:29:"AjaxResultsOutput-500x180.png";s:5:"width";s:3:"500";s:6:"height";s:3:"180";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BuildActionContent</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=429</link>
		<pubDate>Tue, 07 Sep 2010 21:09:21 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/BuildActionContent.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date>2010-09-08 00:09:21</wp:post_date>
		<wp:post_date_gmt>2010-09-07 21:09:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>buildactioncontent</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/BuildActionContent.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/BuildActionContent.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"454";s:6:"height";s:3:"402";s:14:"hwstring_small";s:23:"height='96' width='108'";s:4:"file";s:30:"2010/09/BuildActionContent.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"BuildActionContent-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"BuildActionContent-300x265.png";s:5:"width";s:3:"300";s:6:"height";s:3:"265";}s:14:"post-thumbnail";a:3:{s:4:"file";s:30:"BuildActionContent-454x288.png";s:5:"width";s:3:"454";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:30:"BuildActionContent-454x288.png";s:5:"width";s:3:"454";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:30:"BuildActionContent-338x300.png";s:5:"width";s:3:"338";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MonoTouch-Solution</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=438</link>
		<pubDate>Tue, 07 Sep 2010 21:24:13 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/MonoTouch-Solution.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date>2010-09-08 00:24:13</wp:post_date>
		<wp:post_date_gmt>2010-09-07 21:24:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monotouch-solution</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/MonoTouch-Solution.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/MonoTouch-Solution.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"285";s:6:"height";s:3:"291";s:14:"hwstring_small";s:22:"height='96' width='94'";s:4:"file";s:30:"2010/09/MonoTouch-Solution.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"MonoTouch-Solution-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:14:"post-thumbnail";a:3:{s:4:"file";s:30:"MonoTouch-Solution-285x288.png";s:5:"width";s:3:"285";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:30:"MonoTouch-Solution-285x288.png";s:5:"width";s:3:"285";s:6:"height";s:3:"288";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EmbeddedWebPage-large</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=459</link>
		<pubDate>Tue, 07 Sep 2010 22:03:09 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/EmbeddedWebPage-large.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date>2010-09-08 01:03:09</wp:post_date>
		<wp:post_date_gmt>2010-09-07 22:03:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>embeddedwebpage-large</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>417</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/EmbeddedWebPage-large.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/EmbeddedWebPage-large.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"796";s:6:"height";s:3:"772";s:14:"hwstring_small";s:22:"height='96' width='98'";s:4:"file";s:33:"2010/09/EmbeddedWebPage-large.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"EmbeddedWebPage-large-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"EmbeddedWebPage-large-300x290.png";s:5:"width";s:3:"300";s:6:"height";s:3:"290";}s:14:"post-thumbnail";a:3:{s:4:"file";s:33:"EmbeddedWebPage-large-796x288.png";s:5:"width";s:3:"796";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:33:"EmbeddedWebPage-large-796x288.png";s:5:"width";s:3:"796";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:33:"EmbeddedWebPage-large-309x300.png";s:5:"width";s:3:"309";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>benchmarks</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=478</link>
		<pubDate>Wed, 08 Sep 2010 20:15:45 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date>2010-09-08 23:15:45</wp:post_date>
		<wp:post_date_gmt>2010-09-08 20:15:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>benchmarks</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>474</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/benchmarks.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"668";s:6:"height";s:3:"332";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:22:"2010/09/benchmarks.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:22:"benchmarks-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:22:"benchmarks-300x149.png";s:5:"width";s:3:"300";s:6:"height";s:3:"149";}s:14:"post-thumbnail";a:3:{s:4:"file";s:22:"benchmarks-668x288.png";s:5:"width";s:3:"668";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:22:"benchmarks-668x288.png";s:5:"width";s:3:"668";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:22:"benchmarks-500x248.png";s:5:"width";s:3:"500";s:6:"height";s:3:"248";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>benchmarks-appendfsync</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=536</link>
		<pubDate>Thu, 09 Sep 2010 21:29:12 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-appendfsync.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date>2010-09-10 00:29:12</wp:post_date>
		<wp:post_date_gmt>2010-09-09 21:29:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>benchmarks-appendfsync</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>474</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-appendfsync.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/benchmarks-appendfsync.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"668";s:6:"height";s:3:"331";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:34:"2010/09/benchmarks-appendfsync.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:34:"benchmarks-appendfsync-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:34:"benchmarks-appendfsync-300x148.png";s:5:"width";s:3:"300";s:6:"height";s:3:"148";}s:14:"post-thumbnail";a:3:{s:4:"file";s:34:"benchmarks-appendfsync-668x288.png";s:5:"width";s:3:"668";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:34:"benchmarks-appendfsync-668x288.png";s:5:"width";s:3:"668";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:34:"benchmarks-appendfsync-500x247.png";s:5:"width";s:3:"500";s:6:"height";s:3:"247";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>benchmarks-no-append</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=537</link>
		<pubDate>Thu, 09 Sep 2010 21:29:19 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-no-append.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>537</wp:post_id>
		<wp:post_date>2010-09-10 00:29:19</wp:post_date>
		<wp:post_date_gmt>2010-09-09 21:29:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>benchmarks-no-append</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>474</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-no-append.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/benchmarks-no-append.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"668";s:6:"height";s:3:"331";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:32:"2010/09/benchmarks-no-append.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"benchmarks-no-append-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"benchmarks-no-append-300x148.png";s:5:"width";s:3:"300";s:6:"height";s:3:"148";}s:14:"post-thumbnail";a:3:{s:4:"file";s:32:"benchmarks-no-append-668x288.png";s:5:"width";s:3:"668";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:32:"benchmarks-no-append-668x288.png";s:5:"width";s:3:"668";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:32:"benchmarks-no-append-500x247.png";s:5:"width";s:3:"500";s:6:"height";s:3:"247";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Word Mate icon</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=578</link>
		<pubDate>Tue, 14 Sep 2010 22:54:23 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/WordMate_175x175-75.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>578</wp:post_id>
		<wp:post_date>2010-09-15 01:54:23</wp:post_date>
		<wp:post_date_gmt>2010-09-14 22:54:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordmate_175x175-75</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/WordMate_175x175-75.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/WordMate_175x175-75.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"175";s:6:"height";s:3:"175";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:32:"2010/09/WordMate_175x175-75.jpeg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"WordMate_175x175-75-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gold_rush</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=579</link>
		<pubDate>Tue, 14 Sep 2010 22:56:55 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/gold_rush.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date>2010-09-15 01:56:55</wp:post_date>
		<wp:post_date_gmt>2010-09-14 22:56:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gold_rush</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/gold_rush.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/gold_rush.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"100";s:6:"height";s:3:"164";s:14:"hwstring_small";s:22:"height='96' width='58'";s:4:"file";s:22:"2010/09/gold_rush.jpeg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"gold_rush-100x150.jpg";s:5:"width";s:3:"100";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:10:"HP psc1300";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DotComCrash</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=580</link>
		<pubDate>Tue, 14 Sep 2010 22:58:58 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/DotComCrash.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>580</wp:post_id>
		<wp:post_date>2010-09-15 01:58:58</wp:post_date>
		<wp:post_date_gmt>2010-09-14 22:58:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dotcomcrash</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/DotComCrash.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/DotComCrash.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"193";s:6:"height";s:3:"195";s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:23:"2010/09/DotComCrash.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"DotComCrash-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ipod1letsrock8</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=581</link>
		<pubDate>Tue, 14 Sep 2010 23:05:30 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2010/09/ipod1letsrock8.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>581</wp:post_id>
		<wp:post_date>2010-09-15 02:05:30</wp:post_date>
		<wp:post_date_gmt>2010-09-14 23:05:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipod1letsrock8</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2010/09/ipod1letsrock8.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/09/ipod1letsrock8.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"309";s:6:"height";s:3:"136";s:14:"hwstring_small";s:23:"height='56' width='128'";s:4:"file";s:27:"2010/09/ipod1letsrock8.jpeg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"ipod1letsrock8-150x136.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"136";}s:6:"medium";a:3:{s:4:"file";s:26:"ipod1letsrock8-300x132.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"132";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>darkpastel-screenshot</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=730</link>
		<pubDate>Thu, 26 May 2011 13:57:08 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>730</wp:post_id>
		<wp:post_date>2011-05-26 16:57:08</wp:post_date>
		<wp:post_date_gmt>2011-05-26 13:57:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>darkpastel-screenshot</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>729</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/darkpastel-screenshot.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"765";s:6:"height";s:3:"805";s:14:"hwstring_small";s:22:"height='96' width='91'";s:4:"file";s:33:"2011/05/darkpastel-screenshot.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"darkpastel-screenshot-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"darkpastel-screenshot-285x300.png";s:5:"width";s:3:"285";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:33:"darkpastel-screenshot-765x288.png";s:5:"width";s:3:"765";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:33:"darkpastel-screenshot-765x288.png";s:5:"width";s:3:"765";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:33:"darkpastel-screenshot-285x300.png";s:5:"width";s:3:"285";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Dark Pastel Visual Studio theme]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>darkpastel-screenshot</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=733</link>
		<pubDate>Thu, 26 May 2011 14:10:17 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date>2011-05-26 17:10:17</wp:post_date>
		<wp:post_date_gmt>2011-05-26 14:10:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>darkpastel-screenshot-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>729</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/darkpastel-screenshot1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"690";s:6:"height";s:3:"805";s:14:"hwstring_small";s:22:"height='96' width='82'";s:4:"file";s:34:"2011/05/darkpastel-screenshot1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:34:"darkpastel-screenshot1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:34:"darkpastel-screenshot1-257x300.png";s:5:"width";s:3:"257";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:34:"darkpastel-screenshot1-690x288.png";s:5:"width";s:3:"690";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:34:"darkpastel-screenshot1-690x288.png";s:5:"width";s:3:"690";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:34:"darkpastel-screenshot1-257x300.png";s:5:"width";s:3:"257";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Dark Pastel Visual Studio theme]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>darkpastel-screenshot-02</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=741</link>
		<pubDate>Thu, 26 May 2011 14:36:01 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-02.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>741</wp:post_id>
		<wp:post_date>2011-05-26 17:36:01</wp:post_date>
		<wp:post_date_gmt>2011-05-26 14:36:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>darkpastel-screenshot-02</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>729</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-02.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/darkpastel-screenshot-02.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"650";s:6:"height";s:3:"784";s:14:"hwstring_small";s:22:"height='96' width='79'";s:4:"file";s:36:"2011/05/darkpastel-screenshot-02.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:36:"darkpastel-screenshot-02-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:36:"darkpastel-screenshot-02-248x300.png";s:5:"width";s:3:"248";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:36:"darkpastel-screenshot-02-650x288.png";s:5:"width";s:3:"650";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:36:"darkpastel-screenshot-02-650x288.png";s:5:"width";s:3:"650";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:36:"darkpastel-screenshot-02-248x300.png";s:5:"width";s:3:"248";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Web.config screenshot]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>darkpastel-screenshot-03</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=742</link>
		<pubDate>Thu, 26 May 2011 14:39:20 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-03.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>742</wp:post_id>
		<wp:post_date>2011-05-26 17:39:20</wp:post_date>
		<wp:post_date_gmt>2011-05-26 14:39:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>darkpastel-screenshot-03</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>729</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-03.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/darkpastel-screenshot-03.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"650";s:6:"height";s:3:"736";s:14:"hwstring_small";s:22:"height='96' width='84'";s:4:"file";s:36:"2011/05/darkpastel-screenshot-03.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:36:"darkpastel-screenshot-03-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:36:"darkpastel-screenshot-03-264x300.png";s:5:"width";s:3:"264";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:36:"darkpastel-screenshot-03-650x288.png";s:5:"width";s:3:"650";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:36:"darkpastel-screenshot-03-650x288.png";s:5:"width";s:3:"650";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:36:"darkpastel-screenshot-03-264x300.png";s:5:"width";s:3:"264";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[HTML screenshot]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>darkpastel-screenshot</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=744</link>
		<pubDate>Thu, 26 May 2011 14:41:52 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>744</wp:post_id>
		<wp:post_date>2011-05-26 17:41:52</wp:post_date>
		<wp:post_date_gmt>2011-05-26 14:41:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>darkpastel-screenshot-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>729</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/darkpastel-screenshot2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"650";s:6:"height";s:3:"738";s:14:"hwstring_small";s:22:"height='96' width='84'";s:4:"file";s:34:"2011/05/darkpastel-screenshot2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:34:"darkpastel-screenshot2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:34:"darkpastel-screenshot2-264x300.png";s:5:"width";s:3:"264";s:6:"height";s:3:"300";}s:14:"post-thumbnail";a:3:{s:4:"file";s:34:"darkpastel-screenshot2-650x288.png";s:5:"width";s:3:"650";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:34:"darkpastel-screenshot2-650x288.png";s:5:"width";s:3:"650";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:34:"darkpastel-screenshot2-264x300.png";s:5:"width";s:3:"264";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[C# code screenshot]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>view-digiterre</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=750</link>
		<pubDate>Fri, 26 Aug 2011 03:05:51 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/08/view-digiterre.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>750</wp:post_id>
		<wp:post_date>2011-08-26 06:05:51</wp:post_date>
		<wp:post_date_gmt>2011-08-26 03:05:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view-digiterre</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>755</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/08/view-digiterre.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/view-digiterre.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"720";s:6:"height";s:3:"540";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:26:"2011/08/view-digiterre.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"view-digiterre-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"view-digiterre-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:14:"post-thumbnail";a:3:{s:4:"file";s:26:"view-digiterre-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:26:"view-digiterre-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:26:"view-digiterre-400x300.jpg";s:5:"width";s:3:"400";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sample Page</title>
		<link>http://mono.servicestack.net/mythz_blog/?page_id=2</link>
		<pubDate>Sun, 05 Aug 2012 17:59:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net:81/wordpress/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickies to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href="http://ww2.servicestack.net:81/wordpress/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2012-08-05 17:59:18</wp:post_date>
		<wp:post_date_gmt>2012-08-05 17:59:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sample-page</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing ServiceStack</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=42</link>
		<pubDate>Wed, 12 Aug 2009 04:05:13 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[It's about time I write a post introducing the open-source project I've been working for a while now:
<ul>
	<li><a href="http://www.servicestack.net/">Service Stack</a></li>
	<li><a href="http://code.google.com/p/servicestack">google code project</a></li>
</ul>

In a one-line summary it is a framework for rapidly developing re-usable SOA-style web services.  It encompasses a number of best-practices and techniques I've learned over the years in creating web services, namely:
<ul>
	<li><strong>Low Coupling</strong> - Adding a new service only requires adding three classes: The request and response <acronym title="Data Transfer Objects">DTO's</acronym> and the Service Handler that handles the request.</li>
	<li><strong>Convention over Configuration</strong> - You really only need to write service-specific logic, there is no extra plumbing and boiler-plate code required and you do not need to modify any existing classes to make your service available.</li>
	<li><strong>C# classes first</strong> - There is an argument for writing your webservices XSD interface first and then using that to generate your DTO's, In reality though C# <acronym title="Plain Old CSharp Objects">POCO</acronym> DataContract's with their customizable attributes, auto properties and nullable types etc, make for a pretty good DSL to create your service interface. Doing this eliminates the need for any generated code and your WSDL and XSD are always uptodate as they are generated from the DTO's themselves</li>
	<li><strong>Re-Usable Services</strong> - By only needing to write DataContract's for your webservices definition, we're able to expose your service on a number of different endpoints. As of this time ServiceStack supports calling your webservice over SOAP 1.1, SOAP 1.2, REST + POX, REST + JSON out of the box. This allows the same service you create for your windows application to also be used by your AJAX application without any additional effort</li>
	<li><strong>Encourages SOA-style services</strong> - Unfortunately by using a method signature to define your service, WCF encourages RPC-Style services. Although conceptually easier for a new developer, this is generally bad practice for web services as whenever you cross a process-boundary you want to reduce the chatter as much as possible for better performance and scalability. It also encourages application-specific web services, i.e. the services you create are only useful for the client application that it was built for</li>
</ul>

<p>
Effectively all the features boil down to having to write the minimum amount of code necessary to implement your webservice while at the same time having your service available to the most common endpoints in-use today.
</p>

<h4>Service Stack Web Service Example</h4>
<p>
As no introduction is complete without an example, I've taken a simple example from the <a href="http://www.servicestack.net/ServiceStack.Examples.Clients/Default.htm">Service Stack Demo website</a> to show how easy it is to create a web service with ServiceStack:
</p>

<p>
Uses POCO DataContract's to create the web service interface:
</p>

[csharp]
[DataContract] 
public class GetFactorial 
{ 
    [DataMember] public long ForNumber { get; set; } 
} 

[DataContract] 
public class GetFactorialResponse 
{ 
    [DataMember] public long Result { get; set; } 
}
[/csharp]

<p>
The service handler:
</p>
[csharp]
public class GetFactorialHandler : IService&lt;GetFactorial&gt;
{ 
    public object Execute(GetFactorial request) 
    { 
        return new GetFactorialResponse { 
            Result = GetFactorial(request.ForNumber) 
        }; 
    } 

    static long GetFactorial(long n) 
    { 
        return n &gt; 1 ? n * GetFactorial(n - 1) : 1; 
    } 
} 
[/csharp]

<p>
    Well that should be the proof in the pudding! With only the above code, this service is now callable via:
</p>
<ul>
    <li><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/Public/Xml/SyncReply/GetFactorial?ForNumber=3">REST + XML</a></li>
    <li><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/Public/Json/SyncReply/GetFactorial?ForNumber=3">REST + JSON</a></li>
    <li><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/Public/Soap11/Metadata?op=GetFactorial">SOAP 1.1</a></li>
    <li><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/Public/Soap12/Metadata?op=GetFactorial">SOAP 1.2</a></li>
</ul>
<p>
Example client AJAX code:
</p>

[javascript]
var serviceClient = new JsonServiceClient(
&quot;http://www.servicestack.net/ServiceStack.Examples.Host.Web/&quot;);

var request = { ForNumber: $(&quot;#txtGetFactorial&quot;).val() }; 
serviceClient.getFromJsonService(&quot;GetFactorial&quot;, request, 
    function(e) { 
        $(&quot;#serviceGetFactorial .result&quot;).html(e.result.Result); 
    }); 
[/javascript]

<p>
Example client C# code:
</p>
[csharp]
var serviceClient = new XmlServiceClient(
&quot;http://www.servicestack.net/ServiceStack.Examples.Host.Web/&quot;);

var request = new GetFactorial { ForNumber = 3 }; 
var response = serviceClient.Send&amp;lt;GetFactorialResponse&amp;gt;(request); 
Console.WriteLine(&quot;Result: &quot; + response.Result.ToString());

[/csharp]

<p>
For more info, I invite you to checkout the <a href="http://code.google.com/p/servicestack">google code project</a>.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2009-08-12 07:05:13</wp:post_date>
		<wp:post_date_gmt>2009-08-12 04:05:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-servicestack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ASP.NET MVC - not perfect</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=264</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[Anyway rather than go through all its features and advantages over  traditional ASP.NET I'm just going to go through my initial impressions and list any list any criticisms I have. Note some criticisms I have are just personal annoyances and personal style preferences rather than major flaws.
<h3>Getting started with MVC</h3>
One of the best things about using technology from Microsoft is that it usually comes with great tooling and VS.NET IDE support. MVC2 is no exception as <strong>File-&gt;New Project-&gt;ASP.NET MVC2 Web Application</strong> is all you need to get started with a blank MVC2 solution.

<a href="http://ww2.servicestack.net/wp-uploads/2010/06/mvc2-empty-project.png"><img class="alignright size-full wp-image-260" title="mvc2-empty-project" src="http://ww2.servicestack.net/wp-uploads/2010/06/mvc2-empty-project.png" alt="" width="251" height="443" /></a>

What you get is the default project layout with the top-level folders <strong>Content/</strong> <strong>Controllers/</strong> <strong>Models/</strong> <strong>Scripts/</strong> and <strong>Views/</strong>. Now I understand the need for top-level Models, Views and Controllers folders (this is of course MVC), what I don't get why a .css file is made to live in a generic <strong>Content/</strong> folder while .js files live in their own special <strong>Scripts/</strong>directory? (my personal preference btw which I've used for every website I've developed in the last 10 years to have the conventional <strong>css/</strong> <strong>js/</strong> <strong>img/</strong> folders)

Not that its a big deal but this separation and the fact that the <strong>Scripts/</strong> folder is littered with *-vsdoc.js files leads me to believe that <strong>Scripts/</strong> is a special-named folder that may be important for intelli-sense or something. So my first action was include 'jquery-1.4.1.js' in my Site.Master template and test to see if JavaScript intelli-sense works, it didn't. Now what irks me about this is not that I don't have JavaScript intelli-sense but the fact that the project layout is structured in a way that gives JavaScript special prominence with a special top-level Scripts/ folder and an accompanying *-vsdoc.js file for every .js supplied and yet intelli-sense doesn't work out of the box with the default project template?! - this is meant to be version 2 of a stable product!

With that out of the way it's time to check out what else is provided. Basically what you get is a simple application with a Home, About and Registration/Login screen managed by the <strong>HomeController </strong>and <strong>AccountController</strong>. Now the best way to find out how to use a framework is to see how existing pages are made and copy the approach. This is why it is of utmost importance that the sample included with the default template is a best-practices, high-quality offering.

<a href="http://ww2.servicestack.net/wp-uploads/2010/06/home-controller.png"><img class="alignleft size-full wp-image-261" style="margin-left: 10px; margin-right: 10px;" title="home-controller" src="http://ww2.servicestack.net/wp-uploads/2010/06/home-controller.png" alt="" width="409" height="249" /></a>The class you get in the <strong>HomeController</strong> is displayed on the left. As controllers go, the class itself is pretty straightforward with a fairly light-weight class with well chosen naming conventions and typical controller pattern. A couple of issues I have is that the base <strong>Controller</strong> class is not an interface (which would give your controller class more re-usability outside of an MVC framework) and the lone <strong>[HandleError]</strong> attribute, which I quite honestly have no idea of the purpose - even after reading the documentation:
<blockquote>Represents an attribute that is used to handle an exception that is thrown by an action method.</blockquote>
Now the problem I have with returning a View() (as is the case with most Controller actions) is that if the return value of Index() Action was changed to <strong>return About();</strong> instead, the code would indicate that the <strong>About</strong> view would be used while the behaviour would remain unchanged - variations like this between the intent of code and behaviour is a likely source of bugs. A simple fix to avoid this issue is to rename the parameterless View() method to ActionView() or DefaultView(), so the behaviour becomes more apparent.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2010-06-28 23:18:43</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Code-first REST support in Service Stack</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=415</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=415</guid>
		<description></description>
		<content:encoded><![CDATA[Now that REST-style architectures have achieved dogma status and have become the hottest thing to have undergone a re-birth in popularity since Ruby, It was about time to I wrote a post detailing REST support in Service Stack.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2010-08-30 12:58:18</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Silverlight&#039;s Demise is a blessing in Disguise.</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=746</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=746</guid>
		<description></description>
		<content:encoded><![CDATA[With just a short <a href="http://www.youtube.com/watch?v=p92QfWOw88I">5min demo</a> of the new Windows 8 Shell it looks like the Silverlight developer web ecosystem has finally fallen.

Looking back Silverlight was born at a time where Microsoft had ambitions to own the web with a rich-plugin lock-in strategy in pursuit of greater success then Adobe's own Flash player.
Instead of  just focusing on bringing C# into all browsers, they had greater ambitions of commanding an integral part of our viewing experience with a proprietary blob

The technology ultimately failed them where slow load times and breaking of the web-page model, locking and crashing of host browsers and overall end user experience

Time has proven this was the wrong strategy and their all-or-nothing approach has left them with nothing, just a niche of websites remaining who have yet to rewrite their investments serving Silverlight content.

It is possible that <a href="http://forums.silverlight.net/forums/p/230502/562113.aspx#562513">September</a> will bring]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>746</wp:post_id>
		<wp:post_date>2011-06-04 05:13:16</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=747</link>
		<pubDate>Wed, 29 Jul 2009 14:04:05 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[I know this is wordpress first post, but as its appropriate for a programmers blog I'm going to leave it :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>747</wp:post_id>
		<wp:post_date>2009-07-29 16:04:05</wp:post_date>
		<wp:post_date_gmt>2009-07-29 14:04:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Mr WordPress]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-07-29 16:04:05</wp:comment_date>
			<wp:comment_date_gmt>2009-07-29 14:04:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this is a comment.<br />To delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>About</title>
		<link>http://mono.servicestack.net/mythz_blog/?page_id=748</link>
		<pubDate>Wed, 29 Jul 2009 14:04:05 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[Full name Demis Bellot, I'm a seasoned developer who spends much time on the Internet and developing software, most of which lies behind the browser. Always striving for languages and tools in helping achieve the 'perfect code', In my mind that is flexible code with good design that is both quick to develop and can perform and scale well.

Current weapons of choice: C# / Visual Studio.NET / Re-Sharper.

Also currently active in:
- Ajax, Flash and Silverlight
- Python / Google App Engine
- Objective-C and the iPhone SDK

You can see some of my work as the lead developer of the following open source projects:

<strong> Service Stack -</strong> <a href="http://code.google.com/p/servicestack">http://code.google.com/p/servicestack</a>
A .NET framework for rapidly developing SOA like web services without any configuration or any RPC-style WCF service or operation contracts.  Each service is immediately discoverable and callable via SOAP 1.1, SOAP 1.2, XML, JSON and REST style web services.

<strong> Ajax Stack -</strong> <a href="http://code.google.com/p/ajaxstack">http://code.google.com/p/ajaxstack</a>
An AJAX framework for developing pure AJAX applications like gmail or google maps. Development of your application is kept in logical order, i.e. HTML for page content, CSS for your website style and JavaScript for  website's functionality. The framework handles compiling your entire website into a single static JavaScript file that can be easily versioned and served from any web server.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>748</wp:post_id>
		<wp:post_date>2009-07-29 16:04:05</wp:post_date>
		<wp:post_date_gmt>2009-07-29 14:04:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Michael J. Ryan]]></wp:comment_author>
			<wp:comment_author_email>tracker1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://frugalcoder.us/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-01-07 18:18:26</wp:comment_date>
			<wp:comment_date_gmt>2010-01-07 15:18:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[using Class.js, right now the license on your AjaxStack library is GPL...  I'd like to be able to utilize Class.js along with other js based code I have that is MIT licensed, and was wondering if you'd consider making the license for Class.js MIT.  Also, if you consider it ok to use Class.js as a base for other classes that aren't GPL, I'll be fine with that, but would really feel more comfortable with a more liberal license for class.js]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-02-07 16:39:51</wp:comment_date>
			<wp:comment_date_gmt>2010-02-07 13:39:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Michael,

Sorry its taking me long to reply to you, amongst the spam comments I've only just read it.
I've just changed AjaxStack to use the more liberal 'New BSD licence' (to match the licence of my other google code projects). 
It should now be compatible with your MIT source base.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Alexei Ch]]></wp:comment_author>
			<wp:comment_author_email>archer@meta-comm.com</wp:comment_author_email>
			<wp:comment_author_url>http://meta-comm.com/engineering</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-01 01:30:00</wp:comment_date>
			<wp:comment_date_gmt>2010-09-30 22:30:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Demis,

Sorry to post it here but it seems that address demis@servicestack.net rejected my mail (actually recipient domain with error 550 550 #5.1.0).

So ...

I'm looking for a library/framework which is lighter than WCF.
servicestack.net looks promising and really attractive to me.
But I have couple of questions and do not know where to ask them. Is
there any public official group for discussing design/bug/questions?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-01 09:06:24</wp:comment_date>
			<wp:comment_date_gmt>2010-10-01 06:06:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Alexi,

There's not a mail group at the moment, however if you have any questions feel free to add it to the issue list (http://code.google.com/p/servicestack/issues/list) or drop me a line on my email: demis.bellot@gmail.com]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Erikson]]></wp:comment_author>
			<wp:comment_author_email>hzy104@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-11 08:17:40</wp:comment_date>
			<wp:comment_date_gmt>2011-01-11 05:17:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OrmLite:"DataTime" Field is not work well in Sqlite]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-11 08:32:13</wp:comment_date>
			<wp:comment_date_gmt>2011-01-11 05:32:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, in what way? can you file an issue at: https://github.com/mythz/ServiceStack.OrmLite/issues]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>7</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[stig]]></wp:comment_author>
			<wp:comment_author_email>stigbn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-18 19:53:36</wp:comment_date>
			<wp:comment_date_gmt>2011-04-18 16:53:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi
I am trying to use the json deserializer in service stack. It seems to break when json contains quotes. This string cannot be parsed:
     var s2 = "{"name":my name}";
doing this:
var x4 = TypeSerializer.DeserializeFromString(s2);

where X is:

        private class X {
            public string name { get; set; }
        }

If I remove the quotes:

var s = "{name:my name}";

it works fine.

Am I doing something wrong?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-19 07:47:38</wp:comment_date>
			<wp:comment_date_gmt>2011-04-19 04:47:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi can you please post issues on the group https://groups.google.com/d/forum/servicestack or GitHub project issues list.

Yes you're problem is that you're using TypeSerializer which uses the JSV (JSON+CSV) format, when what you want to be using is JsonSerializer.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>9</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[stealth]]></wp:comment_author>
			<wp:comment_author_email>kjs714@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-10-04 07:47:50</wp:comment_date>
			<wp:comment_date_gmt>2011-10-04 04:47:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is there a history describing when Service Stack was first made available, and when specific features were added?

Thanks,
stealth]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-11-23 20:12:05</wp:comment_date>
			<wp:comment_date_gmt>2011-11-23 17:12:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi stealth,

The history can be tracked via the commits to the original project at:
http://code.google.com/p/servicestack/

And more recently while on GitHub:
http://github.com/ServiceStack/

There's too many features to name individually, if you want specifics email me or post to the group:
https://groups.google.com/forum/#!forum/servicestack]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>11</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Class.js - Javascript Inheritance</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=749</link>
		<pubDate>Wed, 29 Jul 2009 14:23:02 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[The Javascript's language expressive nature is both its blessing and curse. It's dynamic and functional roots allows it to do a lot with very little code. Its biggest short-comming is the lack of Object Orientated Programming built into the language.

Having spent years developing software I believe OOP is the best way to create re-usable and maintainable software. Not all the time (and you should favour composition over inheritance) but if your writing code that is going to be re-used (I term this 'library code' as opposed to 'end user code') it's probably best done with OOP.

Javascripts flexible prototypal strengths really show itself when it allows you to build Object Orientated concepts right on top of the language. It's actually too flexible in fact, as there are too many solutions each with their own strengths and weaknesses.

As defining and using objects is something I intend to do a lot, I wanted something that is both intuitive and terse. My cardinal rule of 'good code' is one that lets you express your intent intuitively with the least amount of noise as possible. As this is not something I found in the previous OOP solutions, I'm introducing Yet another Javascript Object Orientated Framework <a href="http://code.google.com/p/ajaxstack/source/browse/trunk/release/latest/Class.js">Class.js</a>:
[javascript]
function Class() { }
Class.typeMap = {};
Class.$type = &quot;AjaxStack.Class&quot;;
Class.getType = function() { return this.$type; }
Class.getTypeClassName = function()
{
    var parts = this.$type.split('.');
    return parts[parts.length - 1];
}
Class.prototype.getType = function()
{
    return this.constructor.$type;
}
Class.prototype.getTypeClassName = function()
{
    return this.constructor.getTypeClassName();
}
Class.mapAdd = function(array, key)
{
    array.push(key);
    array[key] = true;
    return array;
}
Class.registerType = function(type, ctor)
{
    if (!type) return;
    Class.typeMap[type] = ctor;
    var nsTypes = type.split('.'), ns = window, nsType;
    for (var i = 0; i &lt; nsTypes.length; i++)
    {
        var nsType = nsTypes[i];
        if (!ns[nsType]) ns[nsType] = i &lt; nsTypes.length - 1 ? {} : ctor;
        ns = ns[nsType];
    }
}
Class.prototype.getBaseTypes = function(types)
{
    var base = this, types = types || [];
    do {
        base = base.constructor.$base;
        if (base) Class.mapAdd(types, base.getType());
    } while (base);
    return types;
}
Class.prototype.getBaseTypesAndSelf = function()
{
    return this.getBaseTypes(Class.mapAdd([], this.getType()));
}
Class.prototype.isTypeOf = function(typeName)
{
    return this.getBaseTypesAndSelf()[typeName] ? true : false;
}
Class.getConstructor = function(typeName)
{
    return Class.typeMap[typeName];
}
Class.create = function(typeName, ctorArgs)
{
    var ctor = Class.typeMap[typeName];
    function F() {
        ctor.apply(this, ctorArgs);
    }
    F.prototype = ctor.prototype;
    return new F();
}
Class.inherit = function(subClass, baseClass)
{
    function F() { }
    F.prototype = baseClass.prototype;
    subClass.$base = baseClass.prototype;
    subClass.$baseConstructor = baseClass;
    subClass.prototype = new F();
    subClass.prototype.constructor = subClass;
}
Function.prototype.extend = function(a, options, members)
{
    Class.inherit(this, a);
    options = options || {};
    Class.registerType(options.type, this);
    this.$type = options.type || Class.$type;
    this.getType = Class.getType;

    if (members)
    {
        if (typeof (members) === 'function')
            members(this.prototype);
        else
            for (var a in members) this.prototype[a] = members[a];
    }
    return this.prototype;
};
[/javascript]

Thats It! Its inspired by <a href="http://www.kevlindev.com/tutorials/javascript/inheritance/index.htm">KevLinDev</a>'s previous efforts which like all good Javascript code is itself based on Douglas Crockfords <a href="http://javascript.crockford.com/prototypal.html">prototypal inheritance</a>.
Let's see some examples:

[javascript]
//Define your classes with a normal function definition
function Animal(firstName, lastName)
{
    //call the 'Class' contructor
    Animal.$baseConstructor.call(this);

    //Add any instance variables or other contructor logic here.
    this.firstName = firstName;
    this.lastName = lastName;
}
//Define what class you want to extend. Register the type name of this class
Animal.extend(Class, { type: 'Animal' },
    function(prototype)
    {
        prototype.hello = function(text)
        {
            return &quot;hellooo: &quot; + text;
        }
        prototype.getFullName = function()
        {
            return this.firstName + &quot; &quot; + this.lastName;
        }
    }
);

//Define the 'Cat' class
function Cat(catType, firstName, lastName)
{
    //Call the 'Animal' constructor.
    Cat.$baseConstructor.call(this, firstName, lastName);

    this.catType = catType;
}
//Extend Animal, and Register the 'Cat' type.
Cat.extend(Animal, { type: 'Cat' }, {
    //Another way to define your object's methods.
    hello: function(text)
    {
        return &quot;meaoow: &quot; + text;
    },
    getFullName: function()
    {
        //Call the base 'Animal' getFullName method.
        return this.catType + &quot;: &quot; + Cat.$base.getFullName.call(this);
    }
});

//create some animals and start playing with JS Inheritance!
var animal = new Animal(&quot;Mr&quot;, &quot;Animale&quot;);
var cat = new Cat(&quot;ginger&quot;, &quot;kitty&quot;, &quot;kat&quot;);

[/javascript]

<div>
<table border="0">
<caption><strong>And the all important results:</strong></caption>
<tbody>
<tr>
<th> animal.hello(1)</th>
<td>hellooo: 1</td>
</tr>
<tr>
<th> animal.hello(2)</th>
<td>hellooo: 2</td>
</tr>
<tr>
<th> cat.hello(3)</th>
<td>meaoow: 3</td>
</tr>
<tr>
<th> animal.getFullName()</th>
<td>Mr Animale</td>
</tr>
<tr>
<th>cat.getFullName()</th>
<td>ginger: kitty kat</td>
</tr>
<tr>
<th>Animal.getType()</th>
<td>Animal</td>
</tr>
<tr>
<th>Cat.getType()</th>
<td> Cat </td>
</tr>
<tr>
<th>animal.getType()</th>
<td>Animal</td>
</tr>
<tr>
<th>cat.getType()</th>
<td>Cat</td>
</tr>
<tr>
<th>animal.getBaseTypes()</th>
<td>Class</td>
</tr>
<tr>
<th>cat.getBaseTypes()</th>
<td>Animal,Class</td>
</tr>
<tr>
<th>animal.getBaseTypesAndSelf()</th>
<td>Animal,Class</td>
</tr>
<tr>
<th>cat.getBaseTypesAndSelf()</th>
<td>Cat,Animal,Class</td>
</tr>
<tr>
<th>Class.createNew("Cat", ["tab","fat","cat"]).getFullName()</th>
<td>tab: fat cat</td>
</tr>
<tr>
<th>animal.isTypeOf(Cat.getType())</th>
<td>false</td>
</tr>
<tr>
<th>animal.isTypeOf(Animal.getType())</th>
<td>true</td>
</tr>
<tr>
<th>cat.isTypeOf(Animal.getType())</th>
<td>true</td>
</tr>
</tbody></table>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>749</wp:post_id>
		<wp:post_date>2009-07-29 16:23:02</wp:post_date>
		<wp:post_date_gmt>2009-07-29 14:23:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-take-on-javascript-inheritance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>view-digiterre</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=751</link>
		<pubDate>Fri, 26 Aug 2011 03:07:32 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/08/view-digiterre1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>751</wp:post_id>
		<wp:post_date>2011-08-26 06:07:32</wp:post_date>
		<wp:post_date_gmt>2011-08-26 03:07:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view-digiterre-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>755</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/08/view-digiterre1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/view-digiterre1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"720";s:6:"height";s:3:"540";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:27:"2011/08/view-digiterre1.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"view-digiterre1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"view-digiterre1-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:14:"post-thumbnail";a:3:{s:4:"file";s:27:"view-digiterre1-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:27:"view-digiterre1-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:27:"view-digiterre1-400x300.jpg";s:5:"width";s:3:"400";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>view-ny-sunny</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=752</link>
		<pubDate>Fri, 26 Aug 2011 03:08:31 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-sunny.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>752</wp:post_id>
		<wp:post_date>2011-08-26 06:08:31</wp:post_date>
		<wp:post_date_gmt>2011-08-26 03:08:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view-ny-sunny</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>755</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-sunny.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/view-ny-sunny.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"720";s:6:"height";s:3:"540";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:25:"2011/08/view-ny-sunny.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"view-ny-sunny-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"view-ny-sunny-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:14:"post-thumbnail";a:3:{s:4:"file";s:25:"view-ny-sunny-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:25:"view-ny-sunny-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:25:"view-ny-sunny-400x300.jpg";s:5:"width";s:3:"400";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>view-ny-sunny</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=753</link>
		<pubDate>Fri, 26 Aug 2011 03:09:11 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-sunny1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>753</wp:post_id>
		<wp:post_date>2011-08-26 06:09:11</wp:post_date>
		<wp:post_date_gmt>2011-08-26 03:09:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view-ny-sunny-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>755</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-sunny1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/view-ny-sunny1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"720";s:6:"height";s:3:"540";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:26:"2011/08/view-ny-sunny1.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"view-ny-sunny1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"view-ny-sunny1-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:14:"post-thumbnail";a:3:{s:4:"file";s:26:"view-ny-sunny1-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:26:"view-ny-sunny1-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:26:"view-ny-sunny1-400x300.jpg";s:5:"width";s:3:"400";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>view-ny-rainy</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=754</link>
		<pubDate>Fri, 26 Aug 2011 03:09:23 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-rainy.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>754</wp:post_id>
		<wp:post_date>2011-08-26 06:09:23</wp:post_date>
		<wp:post_date_gmt>2011-08-26 03:09:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>view-ny-rainy</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>755</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-rainy.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/view-ny-rainy.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"720";s:6:"height";s:3:"540";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:25:"2011/08/view-ny-rainy.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"view-ny-rainy-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"view-ny-rainy-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:14:"post-thumbnail";a:3:{s:4:"file";s:25:"view-ny-rainy-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:25:"view-ny-rainy-720x288.jpg";s:5:"width";s:3:"720";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:25:"view-ny-rainy-400x300.jpg";s:5:"width";s:3:"400";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fstack-html</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=826</link>
		<pubDate>Mon, 03 Oct 2011 12:29:18 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/10/fstack-html.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>826</wp:post_id>
		<wp:post_date>2011-10-03 15:29:18</wp:post_date>
		<wp:post_date_gmt>2011-10-03 12:29:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fstack-html</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>811</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/10/fstack-html.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/fstack-html.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"906";s:6:"height";s:3:"602";s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:23:"2011/10/fstack-html.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"fstack-html-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"fstack-html-300x199.png";s:5:"width";s:3:"300";s:6:"height";s:3:"199";}s:14:"post-thumbnail";a:3:{s:4:"file";s:23:"fstack-html-906x288.png";s:5:"width";s:3:"906";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:23:"fstack-html-906x288.png";s:5:"width";s:3:"906";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"fstack-html-451x300.png";s:5:"width";s:3:"451";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fstack-csv</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=827</link>
		<pubDate>Mon, 03 Oct 2011 12:29:36 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/10/fstack-csv.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>827</wp:post_id>
		<wp:post_date>2011-10-03 15:29:36</wp:post_date>
		<wp:post_date_gmt>2011-10-03 12:29:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fstack-csv</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>811</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/10/fstack-csv.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/fstack-csv.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"788";s:6:"height";s:3:"567";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:22:"2011/10/fstack-csv.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:22:"fstack-csv-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:22:"fstack-csv-300x215.png";s:5:"width";s:3:"300";s:6:"height";s:3:"215";}s:14:"post-thumbnail";a:3:{s:4:"file";s:22:"fstack-csv-788x288.png";s:5:"width";s:3:"788";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:22:"fstack-csv-788x288.png";s:5:"width";s:3:"788";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:22:"fstack-csv-416x300.png";s:5:"width";s:3:"416";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fstack-json</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=828</link>
		<pubDate>Mon, 03 Oct 2011 12:29:51 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2011/10/fstack-json.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>828</wp:post_id>
		<wp:post_date>2011-10-03 15:29:51</wp:post_date>
		<wp:post_date_gmt>2011-10-03 12:29:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fstack-json</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>811</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2011/10/fstack-json.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/fstack-json.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"678";s:6:"height";s:3:"602";s:14:"hwstring_small";s:23:"height='96' width='108'";s:4:"file";s:23:"2011/10/fstack-json.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:3:{s:4:"file";s:23:"fstack-json-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:23:"fstack-json-300x266.png";s:5:"width";s:3:"300";s:6:"height";s:3:"266";}s:14:"post-thumbnail";a:3:{s:4:"file";s:23:"fstack-json-678x288.png";s:5:"width";s:3:"678";s:6:"height";s:3:"288";}s:13:"large-feature";a:3:{s:4:"file";s:23:"fstack-json-678x288.png";s:5:"width";s:3:"678";s:6:"height";s:3:"288";}s:13:"small-feature";a:3:{s:4:"file";s:23:"fstack-json-337x300.png";s:5:"width";s:3:"337";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>100k feedback from twitter</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=831</link>
		<pubDate>Wed, 08 Aug 2012 05:18:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2012/08/100k-feedback-twitter.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>831</wp:post_id>
		<wp:post_date>2012-08-08 05:18:18</wp:post_date>
		<wp:post_date_gmt>2012-08-08 05:18:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>100k-feedback-twitter</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2012/08/100k-feedback-twitter.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/08/100k-feedback-twitter.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"525";s:6:"height";s:3:"541";s:14:"hwstring_small";s:22:"height='96' width='93'";s:4:"file";s:33:"2012/08/100k-feedback-twitter.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"100k-feedback-twitter-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"100k-feedback-twitter-291x300.png";s:5:"width";s:3:"291";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[100k feedback from twitter]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Old Server Redis Stats</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=840</link>
		<pubDate>Thu, 30 Aug 2012 05:14:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2012/08/Screen-Shot-2012-06-13-at-02.12.09.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>840</wp:post_id>
		<wp:post_date>2012-08-30 05:14:00</wp:post_date>
		<wp:post_date_gmt>2012-08-30 05:14:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen-shot-2012-06-13-at-02-12-09</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2012/08/Screen-Shot-2012-06-13-at-02.12.09.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/08/Screen-Shot-2012-06-13-at-02.12.09.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:2:"85";s:6:"height";s:2:"81";s:14:"hwstring_small";s:22:"height='81' width='85'";s:4:"file";s:46:"2012/08/Screen-Shot-2012-06-13-at-02.12.09.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Old Server Redis Stats</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=841</link>
		<pubDate>Thu, 30 Aug 2012 05:14:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2012/08/OldServerRedisStats.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date>2012-08-30 05:14:35</wp:post_date>
		<wp:post_date_gmt>2012-08-30 05:14:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oldserverredisstats</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>838</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2012/08/OldServerRedisStats.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/08/OldServerRedisStats.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"713";s:6:"height";s:3:"741";s:14:"hwstring_small";s:22:"height='96' width='92'";s:4:"file";s:31:"2012/08/OldServerRedisStats.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"OldServerRedisStats-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"OldServerRedisStats-288x300.png";s:5:"width";s:3:"288";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>servicestack-vs-jquip</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=885</link>
		<pubDate>Sun, 24 Feb 2013 17:38:39 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2013/02/servicestack-vs-jquip.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>885</wp:post_id>
		<wp:post_date>2013-02-24 17:38:39</wp:post_date>
		<wp:post_date_gmt>2013-02-24 17:38:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>servicestack-vs-jquip</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>884</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2013/02/servicestack-vs-jquip.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/servicestack-vs-jquip.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"689";s:6:"height";s:3:"240";s:14:"hwstring_small";s:23:"height='44' width='128'";s:4:"file";s:33:"2013/02/servicestack-vs-jquip.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"servicestack-vs-jquip-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"servicestack-vs-jquip-300x104.png";s:5:"width";s:3:"300";s:6:"height";s:3:"104";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>servicestack-vs-jquip</title>
		<link>http://mono.servicestack.net/mythz_blog/?attachment_id=907</link>
		<pubDate>Mon, 25 Feb 2013 03:43:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://ww2.servicestack.net/wp-uploads/2013/02/servicestack-vs-jquip1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>907</wp:post_id>
		<wp:post_date>2013-02-25 03:43:18</wp:post_date>
		<wp:post_date_gmt>2013-02-25 03:43:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>servicestack-vs-jquip-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>884</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ww2.servicestack.net/wp-uploads/2013/02/servicestack-vs-jquip1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/servicestack-vs-jquip1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"684";s:6:"height";s:3:"239";s:14:"hwstring_small";s:23:"height='44' width='128'";s:4:"file";s:34:"2013/02/servicestack-vs-jquip1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:34:"servicestack-vs-jquip1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:34:"servicestack-vs-jquip1-300x104.png";s:5:"width";s:3:"300";s:6:"height";s:3:"104";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MonoTouch XML REST Web Services with ServiceStack</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=61</link>
		<pubDate>Mon, 19 Oct 2009 21:10:50 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[I have published a tutorial in what appears to be one of the first examples of calling XML REST Web Services from a MonoTouch application which (including full source code) is available here:

<a href="http://www.servicestack.net/monotouch/remote-info/">http://www.servicestack.net/monotouch/remote-info/</a>

The tutorial also serves as a pretty good resource for setting up your own <a href="http://www.servicestack.net">ServiceStack</a> Web Services Server.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2009-10-20 00:10:50</wp:post_date>
		<wp:post_date_gmt>2009-10-19 21:10:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monotouch-xml-rest-web-services-with-servicestack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Entering documentation mode</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=66</link>
		<pubDate>Fri, 29 Jan 2010 09:46:25 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[With <a href="http://www.servicestack.net">Service Stack</a> reaching a maturity where its pretty stable and feature complete, I'm turning my hand to documentation with an effort of making it easier for new users to get started.

Being a coder at heart I've never really enjoyed writing documentation but at the same time in order for your software to be useful you need to provide documentation for it. 
So with that in mind I've started writing up some wiki pages here (with more to follow soon):
<ul>
	<li><a href="http://code.google.com/p/servicestack/wiki/TypeSerializer">ServiceStack.TypeSerializer</a> - The fastest and most compact text-based serializer for .NET</li>
	<li><a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">ServiceStack.Redis</a> - A fast, feature-rich .NET/C# Client for Redis</li>
	<li><a href="http://code.google.com/p/servicestack/wiki/OrmLite">ServiceStack.OrmLite</a> -  a non-invasive, lightweight ORM that persists standard POCO classes.</li>
</ul>

As always all Service Stack software is open source under the liberal <a href="http://www.opensource.org/licenses/bsd-license.php">new bsd licence</a>

If you have a preference for other documentation you would like to see first just let me know.


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2010-01-29 12:46:25</wp:post_date>
		<wp:post_date_gmt>2010-01-29 09:46:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entering-documentation-mode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Behind the scenes look at mflow – a developers story! </title>
		<link>http://mono.servicestack.net/mythz_blog/?p=83</link>
		<pubDate>Tue, 23 Mar 2010 01:12:12 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[After nearly 18 months of hard work our company is on the verge of releasing our flagship application <a href="http://www.mflow.com">mflow</a>. 
It's been a long ride but I think we're on the verge of releasing a new way to discover music.

When we started we had some ambitious goals with a fairly loose mandate on building a social music app that music fans would love to use. 
Right from the start we set out to sell the highest quality DRM-free mp3s we could encode and went to work on building a superior discovery tool that let you <strong>discover music you like through people with similar tastes</strong>.

Back then the music landscape was very different, iTunes was still selling DRM'd tracks and <a href="http://www.spotify.com">spotify</a> hadn't been released yet.

<a href="http://www.apple.com/itunes/"><img src="http://ww2.servicestack.net/wp-uploads/2010/03/itunes-logo.png" alt="itunes logo" title="itunes-logo" align="left" width="137" height="153" class="size-full wp-image-95" /></a> At the time the main competing music players that sold music were iTunes and Napster. We found the user experience of iTunes to be a little sluggish and impersonal, although it looks like they'll never have a major competitor until they open their monopoly on iPods, allowing other services to synchronize seamlessly with a users' iPod. 

The new Napster on the other hand is just a terrible piece of software - it's just bad. On first use it was slow, bulky and broken. It probably serves as a good model on how not to build an application and is most likely a direct result of outsourcing its core development. If Napster was our competitor for the #2 spot, we we're in good shape. Although 2 major events happened that quickly changed the music applications landscape:
<ol>
	<li>iTunes started selling DRM free music</li>
	<li>and Spotify was released</li>
</ol>

When iTunes started selling DRM free music we lost one of our main competitive advantages, it basically meant we had to focus on getting everything else right and delivering an awesome product.

When we first got our hands on the pre-release version of spotify we we're blown away by its speed, responsiveness and overall experience. As music lovers, we loved it, it was light years ahead of every other media player at the time and really raised the bar for how fast and responsive a music player could be. It was really a strange experience you could search, skip and seek any song faster than you can with iTunes looking at your own local library. 

<a href="http://www.spotify.com/uk/"><img src="http://ww2.servicestack.net/wp-uploads/2010/03/spotify-logo-1.png" alt="spotify logo" title="spotify-logo" align="right" width="300" height="225" class="size-full wp-image-102" /></a> Like any good devs, given new technology we examined it trying to find out how they made it tick. We we're actually quite surprised that we couldn't find any evidence of an established UI toolkit or even an established web services framework. It looked as though they had built their own custom UI renderer and optimized tcp protocol which was mostly used to send back XML. Their traffic looked like it was initially seeded from their own servers (for the best latency) and then overtime we would see some P2P traffic on the wire, most likely used to save on bandwidth costs.

This info didn't help us much, for the best reach and re-usability of our web services we still opted for a standards-based approach by utilizing <a href="http://www.servicestack.net">XML+HTTP web services</a>. Unfortunately Spotify's choice of using a custom UI renderer (probably built from scratch) didn't really suit us either as although optimized for runtime performance, it was not an ideal choice from a developers efficiency point of view. We needed to run on Windows and OSX right from the get-go, and after careful consideration opted for QT which was the best cross-platform UI toolkit we found - after we made a misstep with our initial development choice of using Adobe AIR. 

So after a rocky start, technology-wise we're in a really good place. We have a lean talented team of developers and an automated continuously-integrated software pipeline. 
The moment a new back-end web service is checked-in to our repo, our build agents get to work, running in the background generating the required C++ proxy classes needed to access the service from the mflow client. The automated builds extend all the way until the final Windows and OSX installers are created which is only 1-click away from the new client being deployed.

This leads us to where we are today, with over 1 million tracks ingested and another million on the way. Although we're still in beta, I believe we have a compelling product which is the best at what we do - <strong>discovering music through people</strong>. 

If you’re in the UK and haven’t tried it yet I invite you to check it out. I have kindly been issued <a href="http://www.mflow.com/download/index/mythz007">100 pre-release invitations to give away</a>. Valid until our public launch on the 15th of April, each invite lets you download any free track on mflow:

<div style="text-align:center">
<a href="http://www.mflow.com/download/index/mythz007">
<img src="http://ww2.servicestack.net/wp-uploads/2010/03/Black256-703543.png" alt="download mflow" />
<h3>Download now - and get a free track on mflow! <br/> UK only.</h3>
</a>
</div>

<p>&nbsp;</p>

<span style="font-size:smaller">Disclaimer: The content of this site contains my own personal opinions and does not represent my employer's view in anyway.</span>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2010-03-23 04:12:12</wp:post_date>
		<wp:post_date_gmt>2010-03-23 01:12:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-behind-the-scenes-look-at-mflow-a-developers-story</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>NoSQL and RDBMS – Choose your weapon.</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=129</link>
		<pubDate>Mon, 29 Mar 2010 22:17:07 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb.gif"><img style="border-bottom: 0px; border-left: 0px; margin: 0px 0px 0px 15px; display: inline; border-top: 0px; border-right: 0px" title="nosql_thumb" border="0" alt="nosql_thumb" align="right" src="http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb_thumb.gif" width="180" height="120" /></a> Sensationalist headline right? Unfortunately I think the aggressive tone of the term ‘NoSQL’ is one of the reasons that a lot of people have an instant resentment to the technology. It encourages flame ignited posts like <a href="http://teddziuba.com/2010/03/i-cant-wait-for-nosql-to-die.html">http://teddziuba.com/2010/03/i-cant-wait-for-nosql-to-die.html</a> which when posted to Slashdot will get every developer who has ever touched an RDBMS to weigh-in and pass judgement on technology that they’ve never used before in a combined post also declaring their eternal love for their preferred RDBMS of choice.</p>  <p>The negative posts generally share the same tone:</p>  <blockquote>   <p>I have developed with RDBMS for 10 years and I’ve never needed to use a NoSQL database. RDBMS can scale just as good as NoSQL.</p> </blockquote>  <p>Unfortunately statements like the above instantly illustrate the developer has a biased attachment to a technology they’ve used all their life whilst at the same time declare they have absolutely no knowledge (or desire to gain any knowledge) on the subject for which they are passing judgement. It’s most likely these developers have also made message queues fit in databases and marvelled at their configuration-mapping ability to have an eagerly-loaded chain of nested objects auto-magically bind to their pristine domain model. Yes this is quite a feat to be proud of, unfortunately it also happens to be a one-liner in a lot of non-relational databases. This characteristic of being able to serialize your domain model without requiring it to be mapped to a database using an ORM is not a feature limited to NoSQL databases, other data persistence solutions like <a href="http://www.db4o.com/">db4o</a> (an object orientated database) achieve this equally as well.</p>  <h3>Picking the best tool for the job?</h3>  <p>All this says is that RDBMS’s are really good at doing what they do, which is storing flat, relational, tabular data. Now believe it or not they still remain the best solution for storing relational data. Using a NoSQL data store isn’t an all-or-nothing technology. It is actually serves as a good complementary technology to have along-side an RDBMS. Yes that’s right even though they have overlapping feature-set they can still be great together. <strong>Awesome - we can all still be friends!</strong>&#160;</p>  <p>It’s still all about picking the right tool and using the right technology for the task at hand. Which leads me to what NoSQL databases are naturally good at:</p>  <ul>   <li><strong>Performance</strong> – As everything is retrieved by key, effectively all your queries hits an index. <a href="http://code.google.com/p/redis/">Redis</a> an in-memory data-store (with optional async persistence) can achieve <a href="http://code.google.com/p/redis/wiki/Benchmarks">110000 SETs/second, 81000 GETs/second in an entry level Linux box,</a> and no this is not possible with any RDBMS.</li>    <li><strong>Replication</strong> – A feature common in most NoSQL data stores is effortless replication. In Redis this is achieved by <a href="http://code.google.com/p/redis/wiki/ReplicationHowto">un-commenting one line: ‘slaveof ipaddress port’</a> in redis.conf</li>    <li><strong>Schema-less persistence</strong> – As there is no formal data structure to bind to and most values are stored as binary or strings the serialization format is left up to you. Effectively this can be seen as a feature as it leaves you free to serialize your object directly – which lets you do those one-liner saves that everyone is talking about. A lot of client libraries opt for a simplistic language-neutral format like JSON. </li>    <li><strong>Scalability</strong> – This seems to be a heated topic (where everyone believes they can scale their technology of choice equally as well given the right setup) so I won’t delve in to this too deeply only to say that key-value data-stores by their nature have good characteristics to scale. When everything is accessed by key, clients can easily predict the source of data given a pool of available data-stores. Most clients also come in-built with <a href="http://en.wikipedia.org/wiki/Consistent_hashing">consistent hashing</a> where the addition or removal of a data store does not significantly impact this predictability.</li>    <li><strong>Efficiency and Cost</strong> – As there are a plethora of options available most NoSQL data stores are both free and open source. They also perform better and provide <a href="http://stu.mp/2010/03/nosql-vs-rdbms-let-the-flames-begin.html">better utilization of server resources than comparative RDBMS solutions</a>.</li>    <li><strong>Advanced data constructs</strong> – NoSQL variants like Redis, in addition to a key-value data store also provide rich data constructs and atomic operations on server-side lists, sets, sorted sets and hashes which make things like message-queuing, notification systems, load-balancing work tasks trivial to implement.</li> </ul>  <h3>Try NoSQL today</h3>  <p><a href="http://code.google.com/p/redis/"><img style="border-bottom: 0px; border-left: 0px; margin: 5px 10px 0px 0px; display: inline; border-top: 0px; border-right: 0px" title="redis" border="0" alt="redis" align="left" src="http://ww2.servicestack.net/wp-uploads/2010/03/redis.png" width="112" height="86" /></a> Fortunately NoSQL solutions are not black magic and are actually fairly easy to get started with. My personal favourite is <a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">Redis</a> for which I also happen to be the maintainer of a <a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">rich open source C# client</a> <em>(can also run on Linux with Mono)</em>. If .NET is not your thing, than you’re in luck as Redis is so popular that there is a language binding in almost every programming language in active use today which you can find listed on its <a href="http://code.google.com/p/redis/wiki/SupportedLanguages">supported languages page</a>.</p>  <p>Getting started is as easy as downloading the <a href="http://code.google.com/p/redis/downloads/list">latest source from the project website</a>. If you're on a windows platform you can download <a href="http://code.google.com/p/servicestack/wiki/RedisWindowsDownload">pre-compiled binaries using cygwin here</a>. A simple <strong>make</strong> command from the tarball directory creates the required <strong>redis-server</strong> which is all you need to run to get a server instance up and running.</p>  <p>After that you can access the comprehensive Redis feature-set exposed by the C# <a href="http://code.google.com/p/servicestack/wiki/IRedisClient">IRedisClient API</a>.     <br />To give you a taste of it’s simplicity, here is an example demonstrating how to persist and access a simple POCO type using the Redis client:</p>  

[csharp]
public class IntAndString
{
        public int Id { get; set; }
        public string Letter { get; set; }
}


using (var redisClient = new RedisClient())
{
        //Create a typed Redis client that treats all values as IntAndString:
        var typedRedis = redisClient.GetTypedClient&lt;IntAndString&gt;();

	var pocoValue = new IntAndString { Id = 1, Letter = &quot;A&quot; };
        typedRedis.Set(&quot;pocoKey&quot;, pocoValue);
        IntAndString toPocoValue = typedRedis.Get(&quot;pocoKey&quot;);

        Assert.That(toPocoValue.Id, Is.EqualTo(pocoValue.Id));
        Assert.That(toPocoValue.Letter, Is.EqualTo(pocoValue.Letter));


        var pocoListValues = new List&lt;IntAndString&gt; { 
                new IntAndString {Id = 2, Letter = &quot;B&quot;},
                new IntAndString {Id = 3, Letter = &quot;C&quot;},
                new IntAndString {Id = 4, Letter = &quot;D&quot;},
                new IntAndString {Id = 5, Letter = &quot;E&quot;},
        };


        IRedisList&lt;IntAndString&gt; pocoList = typedRedis.Lists[&quot;pocoListKey&quot;];

        //Adding all IntAndString objects into the redis list 'pocoListKey'
        pocoListValues.ForEach(x =&gt; pocoList.Add(x));

        List&lt;IntAndString&gt; toPocoListValues = pocoList.ToList();

        for (var i=0; i &lt; pocoListValues.Count; i++)
        {
                pocoValue = pocoListValues[i];
                toPocoValue = toPocoListValues[i];
                Assert.That(toPocoValue.Id, Is.EqualTo(pocoValue.Id));
                Assert.That(toPocoValue.Letter, Is.EqualTo(pocoValue.Letter));
        }
}
[/csharp]

<p>Other note-worthy features of Redis include its support for <a href="http://code.google.com/p/servicestack/wiki/RedisTransactions">custom atomic transactions examples of which are here</a>.</p>

<p>More examples are available at the <a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">ServiceStack’s Open source C# Client’s home page</a>.</p>

<h3>Useful External Links</h3>
<ul>
  <li><a href="http://blog.couch.io/post/511008668/nosql-is-about">What NoSQL is About...</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2010-03-30 01:17:07</wp:post_date>
		<wp:post_date_gmt>2010-03-29 22:17:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql-and-rdbms-choose-your-weapon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1080</wp:comment_id>
			<wp:comment_author><![CDATA[Mikhail Opletayev]]></wp:comment_author>
			<wp:comment_author_email>mikhail@opletayev.com</wp:comment_author_email>
			<wp:comment_author_url>http://opletayev.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-06 22:05:06</wp:comment_date>
			<wp:comment_date_gmt>2010-10-06 19:05:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; Redis an in-memory data-store (with optional async 
&gt;persistence) can achieve 110000 SETs/second, 81000 
&gt; GETs/second in an entry level Linux box, and no this is 
&gt; not possible with any RDBMS.

Comparing an in-memory cache app to a full featured RDBMS is like comparing apples to elephants. They are not even remotely comparable. 

Having said that, the statement is wrong. It's not too hard to achieve similar numbers out of RDBMS. We were running 80,000 selects by a key per second from a single dual-core box and Oracle. That was back in 2003, the hardware matured significantly.

Inserts/updates are always limited by IO as RDBMS guarantees writes. However, even with that a 20,000 inserts/sec is completely possible on a budget hardware. 

Not too many applications need more than that.

You listed a lot of pros but what about the cons? BigTable is only available through Google AppEngine. Casandra, Hadoop, etc. only work great for certain applications and take a lot of effort to put in production. Three main DocDB contenders (MongoDB, CouchDB, and RavenDB) are not remotely ready for serious production usage as storage systems. 

Sophisticated in-memory caches have their applications but I wouldn't say NoSQL threatens RDBMS in any way, shape, or form.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1081</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-06 22:37:50</wp:comment_date>
			<wp:comment_date_gmt>2010-10-06 19:37:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mikhail, interesting do you have any links to these benchmarks you mention?

I've never heard of any RDBMS reaching anywhere near those numbers on commodity hardware.

Sure BigTable is available in Google App Engine, it's also free to start developing and hosting with, and provides superior productivity and much less friction for developing general purpose apps. If you want greater control Amazon has SimpleDB, and like you mention you can maintain your own with Hadoop, etc.

I don't expect RDBMS's to be supplanted anytime soon, however if you are not using the relational querying abilities of an RDBMS and just using an RDBMS for basic persistence than I contend that this is much easier to do with a schemaless NoSQL or object db (e.g. db4o) etc.

I wouldn't say that MongoDB, CouchDB is not ready for serious production as there is currently a comprehensive list of well known companies using it in production right now: 
http://www.mongodb.org/display/DOCS/Production+Deployments
http://wiki.apache.org/couchdb/CouchDB_in_the_wild

So for small / mid-size projects there is definitely an option to choose either an RDBMS or NoSQL solution or even a combination of both (which is what we did at mflow.com). I would agree that an RDBMS is a known quantity and the safer choice as long as you remain within the perf/scalability capabilities.

When your requirements exceed normal capacity and you need to shard (like we did) which is awkward to do with an RDBMS then you lose a lot of the advantages of an RDBMS and are heading towards the situation where NoSQL db's would be a better fit, here is a comparison of using NoSQL vs RDBMS at digg:
http://stu.mp/2010/03/nosql-vs-rdbms-let-the-flames-begin.html

It's not an accident that most big companies i.e. Google, Facebook, Yahoo, Twitter, Amazon, Linked-in, etc. Have all come to the same conclusion that it is easier to develop their own NoSQL solutions rather trying to get their existing RDBMS's to scale. 

RDBMS's aren't going away however NoSQL is also here to stay. This is a good thing, we get to pick the best tool for the job and most NoSQL solutions are free - what's not to like? :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1082</wp:comment_id>
			<wp:comment_author><![CDATA[Mikhail Opletayev]]></wp:comment_author>
			<wp:comment_author_email>mikhail@opletayev.com</wp:comment_author_email>
			<wp:comment_author_url>http://opletayev.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-07 16:03:19</wp:comment_date>
			<wp:comment_date_gmt>2010-10-07 13:03:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It was internal R&amp;D. The problem with a single box RDBMS performance has been the same for years: round trip overhead is overwhelmingly higher than actual execution time. 

RDBMS has all kind of tools to boost performance. For instance, take a look at this paper (first in google by "array interface performance"):
http://antognini.ch/papers/ArrayInterface_20000129.pdf

27x times performance increase, network traffic is 7 times lower using AI. That's year 2000 and Oracle 8. 

This is why I can load 3 million claims in under 3 minutes on a commodity server without breaking a sweat. That averages out to about 25k records a second with all the records that need to be created. You know what was the biggest challenge? It was a .NET application and ADO.NET doesn't support array interface. ODBC92 has it but the most recent DB stack from Microsoft doesn't. You know how long it takes to run the same process using standard non-AI ADO.NET connector? Around 4 hours. 

Think about it this way: you want to buy some eggs and you make a run to the supermarket for each single egg. Is supermarket to blame that it takes you half a day to make an omelet?

This is just one angle to it. There are other things you can do that give similar results: avoiding blobs, avoiding extra log segments, using piped deletes, etc.

Most of the perceived RDBMS slowness comes from usage patterns. I bet you any storage can be "slow" if you use a mismatching pattern to access it. 

Any application that aspires to accept high loads can easily use most of these methods using queues. It's a pretty standard practice and pretty much anything that scales right now makes a use of it. 

As far as production-ready goes, I specifically mentioned storage. CouchDB features a data recovery tool for it's release version as the first item on download page:

http://couchdb.apache.org/notice/1.0.1.html

I'll pass on putting it into production. I have not had a data recovery problem with RDBMS in the last 6 years or so.

MongoDB uses memory mapped files and update-in-pace. It's a toy, basically. You could replicate, of course, but it's not suitable for any kinda of OLTP. MongoDB client page that you linked pretty much confirms it, if you read use cases.

While it's not an accident that big players develop NoSQL custom solutions, it's also important to understand that its out of necessity and it's not a silver bullet. Most of the companies you listed started with RDBMS and switched once they had a specific need. 

The DIGG/MySQL article you linked states that DIGG had a terrible data schema which prevented them from scaling. This is actually a very good example of what happens: bad data structures and lack of understanding how RDBMS can be used in ultra-high performance environments leads to conclusions that RDBMS are bad. It's simply not the case. 

Having typed all that, if Cassandra, MongoDB, or any other NoSQL solution works great for you and helps you being more productive -- great. My point is, that most of applications don't derive NoSQL benefits until they get very large and it's completely viable to use RDBMS to get to there. Just like Facebook, Twitter, Yahoo, Amazon, and a lot of other companies did.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1083</wp:comment_id>
			<wp:comment_author><![CDATA[NoSQL Daily &#8211; Mon Nov 8 &rsaquo; PHP App Engine]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://php-app-engine.com/2010/nosql/nosql-daily-mon-nov-8/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-11-08 01:40:52</wp:comment_date>
			<wp:comment_date_gmt>2010-11-07 22:40:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] NoSQL and RDBMS &ndash; Choose your weapon. &raquo; Tales from behind the browser [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>History of REST, SOAP, POX and JSON Web Services</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=154</link>
		<pubDate>Tue, 06 Apr 2010 23:23:57 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>The W3C defines a "web service" as "a software system designed to support interoperable machine-to-machine interaction over a network.</blockquote>
The key parts of this definition are that it should be <strong>interoperable</strong> and that it facilitates communication over a <strong>network</strong>. Unfortunately over the years different companies have had different ideas on what the most ideal interoperable protocol should be, leaving a debt-load of legacy binary and proprietary protocols in its wake.
<h3>HTTP the defacto web services transport protocol</h3>
<a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a> the Internet's protocol is the undisputed champ and will be for the foreseeable future. It's universally accepted, can be proxied and is pretty much the only protocol allowed through most firewalls which is the reason why <a href="http://www.servicestack.net/">Service Stack</a> (and most other Web Service frameworks) support it. <em>Note: the future roadmap will also support the more optimized HTML5 </em><a href="http://www.websockets.org/"><em>'Web Sockets'</em></a><em> standard.</em>
<h3>XML the winning serialization format?</h3>
Out of the ashes another winning format looking to follow in HTTP’s success, is the <a href="http://en.wikipedia.org/wiki/XML">XML</a> text serialization format. Some of the many reasons why it has reigned supreme include:
<ul>
	<li>Simple, Open, self-describing text-based format</li>
	<li>Human and Computer readable and writeable</li>
	<li>Verifiable</li>
	<li>Provides a rich set of common data types</li>
	<li>Can define higher-level custom types</li>
</ul>
<a href="http://en.wikipedia.org/wiki/XML">XML</a> doesn't come without its disadvantages which currently are centred around it being verbose and being slow to parse resulting wasted CPU cycles.
<h3>REST vs SOAP</h3>
Despite the win, all is not well in XML camp. It seems that two teams are at odds looking to branch the way XML is used in web services. On one side, I'll label the REST camp (despite <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</a> being more than just XML) approach to developing web services is centred around resources and prefers to err on simplicity and convention choosing to re-use the other existing HTTP metaphors where they’re semantically correct. E.g. calling <strong>GET</strong> on the URL <strong>http://host/customers</strong> will most likely return a list of customers, whilst <strong>POST</strong>'ing a 'Customer' against the same url will, if supported append the 'Customer' to the existing list of customers.

The URL’s used in REST-ful web services also form a core part of the API, it is normally logically formed and clearly describes the type of data that is expected, e.g. viewing a particular customers order would look something like:
<ul>
	<li>GET <strong>http://location/customers/mythz/orders/1001</strong> - would return details about order '1001' which was placed by the customer 'mythz'.</li>
</ul>
The benefit of using a logical URL scheme is that other parts of your web services API can be inferred, e.g.
<ul>
	<li>GET <strong>http://location/customers/mythz/orders</strong> - would return all of 'mythz' orders</li>
	<li>GET <strong>http://location/customers/mythz</strong> - would return details about the customer 'mythz'</li>
	<li>GET <strong>http://location/customers</strong> - would return a list of all customers</li>
</ul>
If supported, you may have access to different operations on the same resources via the other HTTP methods: POST, PUT and DELETE. One of the limitations of having a REST-ful web services API is that although the API may be conventional and inferable by humans, it isn't friendly to computers and likely requires another unstructured document accompanying the web services API identifying the list, schema and capabilities of each service. This makes it a hard API to provide rich tooling support for or to be able to generate a programmatic API against.

<em>NOTE: If you’re interested in learning more about REST one of the articles I highly recommend is </em><a href="http://tomayko.com/writings/rest-to-my-wife"><em>http://tomayko.com/writings/rest-to-my-wife</em></a>
<h3>Enter SOAP</h3>
<a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> school discards this HTTP/URL nonsense and teaches that there is only one true METHOD - the HTTP 'POST' and there is only one url / end point you need to worry about - which depending on the technology chosen would look something like <strong>http://location/CustomerService.svc</strong>. Importantly nothing is left to the human imagination, everything is structured and explicitly defined by the web services <a href="http://www.w3.org/TR/wsdl">WSDL</a> which could be also obtained via a url e.g. <strong>http://location/CustomerService.svc?wsdl</strong>. Now the <a href="http://www.w3.org/TR/wsdl">WSDL</a> is an intimately detailed beast listing everything you would ever want to know about the definition of your web services. Unfortunately it's detailed to the point of being unnecessarily complex where you have layers of artificial constructs named messages, bindings, ports, parts, input and output operations, etc. most of which remains un-utilized which a lot of REST folk would say is too much info that can be achieved with a simple GET request :)

What it does give you however, is a structured list of all the operations available, including the schema of all the custom types each operation accepts. From this document tools can generate a client proxy into your preferred programming language providing a nice strongly-typed API to code against. SOAP is generally favoured by a lot of enterprises for internal web services as in a lot of cases if the code compiles then there's a good chance it will just work.

Ultimately on the wire, SOAP services are simply HTTP <strong>POST</strong>s to the same endpoint where each payload (usually of the same as the SOAP-Action) is wrapped inside the body of a 'SOAP' envelope. This layer stops a lot of people from accessing the XML payload directly and have to resort to using a SOAP client library just to access the core data.

This complexity is not stopping the Microsoft's and IBM's behind the SOAP specification any-time soon. Nope they're hard at work finishing their latest creations that are adding additional layers on top of SOAP (i.e. <a href="http://en.wikipedia.org/wiki/WS-Security">WS-Security</a>, <a href="http://en.wikipedia.org/wiki/WS-Reliability">WS-Reliability</a>, <a href="WS-Transaction">WS-Transaction</a>, <a href="http://en.wikipedia.org/wiki/WS-Addressing">WS-Addressing</a>) which is commonly referred to as the WS-* standards. Interestingly the WS-* stack happens to be complex enough that they happen to be the only companies able to supply the complying software and tooling to support it, which funnily enough works seamlessly with their expensive servers.

It does seem that Microsoft, being the fashionable technology company they are don't have all their eggs in the WS-* bucket. Realizing the current criticisms on their current technology stack, they have explored a range of other web service technologies namely <a href="http://msdn.microsoft.com/en-us/data/bb931106.aspx">WCF Data Services</a>, <a href="http://www.silverlight.net/getstarted/riaservices/">WCF RIA Services</a> and now their current favourite <a href="http://www.odata.org/">OData</a>. The last of which I expect to see all their previous resource efforts in WS-* to be transferred into promoting this new Moniker. On the surface <a href="http://www.odata.org/">OData</a> seems to be a very good ‘enabling technology’ that is doing a good job incorporating every good technology BUZZ-word it can (i.e. <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</a>, <a href="http://en.wikipedia.org/wiki/Atom_%28standard%29">ATOM</a>, <a href="http://www.json.org/">JSON</a>). It is also being promoted as <strong>'clickbox driven development'</strong> technology (which I'll be eagerly awaiting to see the sticker for :).

Catering for <strong>drag n’ drop developers </strong>and being able to create web services with a checkbox is a double-edged sword which I believe encourages web service development anti-patterns that run contra to SOA-style (which I will cover in a separate post). <em>Just so everyone knows the latest push behind OData technology is to give you more reasons to use <a href="http://www.microsoft.com/windowsazure/">Azure</a> (Microsoft’s cloud computing effort).</em>
<h3>POX to the rescue?</h3>
For the pragmatic programmer it's becoming a hard task to follow the <a href="http://en.wikipedia.org/wiki/List_of_Web_service_specifications">WS-*</a> stack and still be able to get any work done. For what appears to be a growing trend, a lot of developers have taken the best bits from SOAP and WSDL and combined them in what is commonly referred to as <a href="http://en.wikipedia.org/wiki/Plain_Old_XML">POX</a> or REST+POX. Basically this is Plain Old Xml over HTTP and REST-like urls. In this case a lot of the cruft inside a WSDL can be reduced to a simple <a href="http://en.wikipedia.org/wiki/XML_schema">XSD</a> and a url. The interesting part about POX is that although there seems to be no formal spec published, a lot of accomplished web service developers have ultimately ended up at the same solution. The advantages this has over SOAP are numerous many of which are the same reasons that have made HTTP+XML ubiquitous. It is a lot simpler, smaller and faster at both development and runtime performance - while at the same time retaining a strongly-typed <a href="http://en.wikipedia.org/wiki/Application_programming_interface">API</a> (which is one of the major benefits of SOAP). Even though it's lacking a formal API, it can be argued that POX is still more interoperable than SOAP as clients no longer require a SOAP client to consume the web service and can access it simply with a standard Web Client and XML parser present in most programming environments, even most browsers.
<h3>And then there was JSON</h3>
One of the major complaints of XML is that it's too verbose, which given a large enough dataset consumes a lot of bandwidth. It is also a lot stricter than a lot of people would like and given the potential for an XML document to be composed from many different namespaces and for a type to have both elements and attributes - it is not an ideal fit for most programming models. As a result of this, parsing XML can be quite cumbersome especially inside of a browser. A popular format which is seeking to overcome both of these problems and is now the preferred serialization format for AJAX applications is JSON. It is very simple to parse and maps perfectly to a JavaScript object, it is also safe format which is the reason why it's chosen over pure JavaScript. It's also a more 'dynamic' and resilient format than XML meaning that adding new or renaming existing elements or their types will not break the de-serialization routine as there is no formal spec to adhere to which is both and advantage and disadvantage. Unfortunately even though it's a smaller, more simple format it is actually deceptively slower to de/serialize than XML using the available .NET libraries based on the available benchmarks. This performance gap is more likely due to the amount of effort Microsoft has put into their XML DataContractSerializer than a deficiency of the format itself as my effort of developing a <a href="http://code.google.com/p/servicestack/wiki/TypeSerializer">JSON-like serialization format</a> is both <a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html">smaller than JSON and faster than XML</a> - the best of both worlds.
<h3>Service Stack’s new JSV Format</h3>
The latest endpoint to be added to Service Stack, is <strong>JSV</strong> the serialization format of <a href="http://code.google.com/p/servicestack/wiki/TypeSerializer">Service Stack's POCO TypeSerializer</a>. It’s a JSON inspired format that uses <a href="http://en.wikipedia.org/wiki/Comma-separated_values">CSV</a>-style escaping for the least overhead and optimal performance.

With the interest of creating high-performance web services and not satisfied with the performance or size of existing <a href="http://en.wikipedia.org/wiki/XML">XML</a> and <a href="http://www.json.org/">JSON</a> serialization formats, <a href="http://code.google.com/p/servicestack/wiki/TypeSerializer">TypeSerializer</a> was created with a core goal to create the most compact and fastest text-serializer for .NET. In this mission, it has succeeded as it is now both <a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html">5.3x quicker than the leading .NET JSON serializer whilst being 2.6x smaller than the equivalent XML format</a>.

TypeSerializer was developed from experience taking the best features of serialization formats it looks to replace.  It has many other features that sets it apart from existing formats which makes it the best choice for serializing any <a href="http://en.wikipedia.org/wiki/Plain_Old_CLR_Object">.NET POCO object</a>.
<ul>
	<li>Fastest and most compact text-serializer for .NET</li>
	<li>Human readable and writeable, self-describing text format</li>
	<li>Non-invasive and configuration-free</li>
	<li>Resilient to schema changes (focused on deserializing as much as possible without error)</li>
	<li>Serializes / De-serializes any .NET data type (by convention)
<ul>
	<li>Supports custom, compact serialization of structs by overriding <tt>ToString()</tt> and <tt>static T Parse(string)</tt> methods</li>
	<li>Can serialize inherited, interface or 'late-bound objects' data types</li>
	<li>Respects opt-in DataMember custom serialization for DataContract DTO types.</li>
</ul>
</li>
</ul>
For these reasons it is the preferred choice to transparently store complex POCO types for <a href="http://code.google.com/p/servicestack/wiki/OrmLite">OrmLite</a> (in text blobs), POCO objects with <a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">ServiceStacks’ C# Redis Client</a> or the optimal serialization format in .NET to .NET web services.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2010-04-07 02:23:57</wp:post_date>
		<wp:post_date_gmt>2010-04-06 23:23:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>history-of-rest-soap-pox-and-json-web-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1094</wp:comment_id>
			<wp:comment_author><![CDATA[Bash/Perl tutorial « Code and Culture | Perl WebDev Insider]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://perl.webdevinsider.com/bashperl-tutorial-%c2%ab-code-and-culture/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-04-07 06:20:42</wp:comment_date>
			<wp:comment_date_gmt>2010-04-07 03:20:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] History of REST, SOAP, POX and JSON Web Services » Tales from &#8230; [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1095</wp:comment_id>
			<wp:comment_author><![CDATA[lwpro2]]></wp:comment_author>
			<wp:comment_author_email>lwpro2@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 05:16:11</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 02:16:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is no conflict btw RESTful and JSON.
SOAP can only accept POST requet?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1096</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 07:48:09</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 04:48:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not suggesting there's a conflict between JSON and REST, rather JSON and XML. Both have their advantages and disadvantages and ideal usage scenarios.

Yeah every SOAP request is wrapped in a 'SOAP Envelope' and POSTed to the same endpoint. Here's what a simple HTTP GET request looks like:
http://www.servicestack.net/ServiceStack.Examples.Host.Web/Public/Soap12/Metadata?op=GetAllUsers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1097</wp:comment_id>
			<wp:comment_author><![CDATA[sushi Massachusetts]]></wp:comment_author>
			<wp:comment_author_email>Leiper@getreal.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.akdfkhjadifasd.com</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-05-26 04:40:20</wp:comment_date>
			<wp:comment_date_gmt>2011-05-26 01:40:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Brilliant post keep up the good work enjoy reading your posts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>.NET’s new fast, compact Web Service endpoint: The JSV Format</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=176</link>
		<pubDate>Sat, 10 Apr 2010 01:05:20 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[New! <a href="http://www.servicestack.net/benchmarks/">Benchmarks graphs are now available</a> to better visualize the performance of ServiceStack's JSON and JSV text serializers.

<a href="https://github.com/ServiceStack/ServiceStack">Service Stack’s</a> Git repo is still hot from the fresh check-in that has just added <a href="https://github.com/ServiceStack/ServiceStack.Text">TypeSerializer’s</a> text-serialization format as a first class Web Service endpoint.

<strong>JSV Format</strong> (i.e. <strong>J</strong>SON-like <strong>S</strong>eparated <strong>V</strong>alues) is a JSON inspired format that uses <strong>CSV</strong>-style escaping for the least overhead and optimal performance.

Service Stack’s emphasis has always been on creating high-performance, cross-platform web services with the least amount of effort. In order to maximize performance, our web services are effectively raw text/byte streams over light-weight IHttpHandler’s (Note: SOAP endpoints still use WCF bindings). This approach coupled with extensive use of cached-delegates (eliminating any runtime reflection) has proven to provide superior performance in itself.
<h3>So why the new format?</h3>
Well up until now the de/serialization for all web service endpoints were done using the DataContract serializers in the <a href="http://en.wikipedia.org/wiki/Base_Class_Library">.NET BCL</a>. The XML DataContractSerializer looks to be a well written library providing good performance for serialization of XML. Unfortunately for reasons articulated in my previous post on the <a href="https://github.com/ServiceStack/ServiceStack/wiki/Service-Stack-Web-Services">history of web services</a>, XML although great for interoperability, does not make a good ‘programmatic fit’ for integrating with many programming language models – e.g. for AJAX applications JSON is a much more suitable format. The verbosity and strict-extensibility of XML also does not make it the ideal format in performance-critical, or bandwidth constrained environments.

The problem with JSON in .NET is that although being <strong>2x more compact</strong> than XML it is <strong>1.5x slower</strong> (<a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html">based on Northwind model benchmarks</a>). Unfortunately that is the fastest JSON implementation in the BCL there are others like <a href="http://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer.aspx">JavaScriptSerializer</a> which are over <strong>40x</strong> slower still. The other blocker I encountered was that although the JSON implementation in .NET was slow, the equivalent one in <a href="http://www.mono-project.com/Main_Page">MONO</a> just doesn’t work for anything but the most simple models. Effectively Mono users had no choice but to use the XML endpoints, which is clearly not a good story for bandwidth-constrained environments as found in <a href="http://monotouch.net/">iPhone/MonoTouch</a> apps.

Quite simply if I want a fast, compact, cross-platform serialization format that’s ideal to use in bandwidth-constrained, performance-critical environments as found in iPhone networked applications I had to code it myself. Drawing on years of experience in handling different serialization formats I had a fair idea on what I thought the ideal text-format should be. Ultimately the core goals of being fast and compact is the major influence in the choice of syntax. It is based on the familiar JSON format but as it is <strong>white-space significant</strong>, does not require quotes for normal values, which made it the most compact text-format that was still lexically parseable.

Other key goals was that it should be non-invasive to work with any POCO-type. Due to the success of schema-less designs in supporting versioning by being resilient to schema-changes, it is a greedy format that tries to de-serialize as much as possible without error. Other features that sets it apart from existing formats makes it the best choice for serializing any <a href="http://en.wikipedia.org/wiki/Plain_Old_CLR_Object">.NET POCO object</a>.
<ul>
	<li>Fastest and most compact text-serializer for .NET (<a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html">5.3x quicker than JSON, 2.6x smaller than XML</a>)</li>
	<li>Human readable and writeable, self-describing text format</li>
	<li>Non-invasive and configuration-free</li>
	<li>Resilient to schema changes (focused on deserializing as much as possible without error)</li>
	<li>Serializes / De-serializes any .NET data type (by convention)
<ul>
	<li>Supports custom, compact serialization of structs by overriding <tt>ToString()</tt> and <tt>static T Parse(string)</tt> methods</li>
	<li>Can serialize inherited, interface or ‘late-bound objects’ data types</li>
	<li>Respects opt-in DataMember custom serialization for DataContract DTO types.</li>
</ul>
</li>
</ul>
For these reasons it is the preferred choice to transparently store complex POCO types for <a href="http://code.google.com/p/servicestack/wiki/OrmLite">OrmLite</a> (in RDBMS text blobs), POCO objects with <a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">ServiceStacks’ C# Redis Client</a> or the optimal serialization format in .NET to .NET web services.
<h3>Simple API</h3>
Like most of the interfaces in Service Stack, the API is simple and descriptive. In most cases these are the only methods that you would commonly use:

[csharp]

string TypeSerializer.SerializeToString&lt;T&gt;(T value);
void TypeSerializer.SerializeToWriter&lt;T&gt;(T value, TextWriter writer);

T TypeSerializer.DeserializeFromString&lt;T&gt;(string value);
T TypeSerializer.DeserializeFromReader&lt;T&gt;(TextReader reader);

[/csharp]

Where <strong>T</strong> can be any .NET POCO type. That’s all there is - the API was intentionally left simple :)

By convention only public properties are serialized, unless the POCO is a DataContract in which case only DataMember properties will be serialized. Structs can provide custom (e.g. more compact) serialization value by overloading the <em>ToString()</em> instance method and providing a <em>static TStruct.Parse(string)</em>.
<h3>The JSV Web Service Endpoint</h3>
The home page for <a href="https://github.com/ServiceStack/ServiceStack.Text">TypeSerializer</a> on code.google.com goes into more detail on the actual text-format. You can get a visual flavour of it with the screen shots below

<a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetNorthwindCustomerOrders?debug"><img class="alignnone size-full wp-image-187" title="JsvFragment" src="http://ww2.servicestack.net/wp-uploads/2010/04/JsvFragment.png" alt="" width="592" height="694" /></a>

<em>Note: the results have been ‘pretty-formatted’ for readability, the actual format is white-space significant.</em>

In comparison here is the equivalent data formatted in XML (under a nice syntax highlighter):

<a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetNorthwindCustomerOrders"><img class="alignnone size-full wp-image-188" title="XmlFragment" src="http://ww2.servicestack.net/wp-uploads/2010/04/XmlFragment.png" alt="" width="590" height="689" /></a>
<h3>View JSV live Web Services</h3>
One of the major features of Service Stack is that because JSV is a supported out of the box endpoint, it doesn’t require any code for all your web services to take advantage of it. You can access all your web services with the JSV endpoint by simply changing the base URL. Below are live web service examples from the <a href="http://servicestack.googlecode.com/files/ServiceStack.Examples.zip">Service Stack’s Examples project</a>:
<table border="0" cellspacing="0" cellpadding="2" width="696">
<tbody>
<tr>
<th width="303" valign="top">GetNorthwindCustomerOrders</th>
<td width="133" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetNorthwindCustomerOrders">XML</a></td>
<td width="133" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Json/SyncReply/GetNorthwindCustomerOrders">JSON</a></td>
<td width="133" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetNorthwindCustomerOrders">JSV</a> | <a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetNorthwindCustomerOrders?debug">debug</a></td>
</tr>
<tr>
<th width="301" valign="top">GetFactorial?ForNumber=3</th>
<td width="131" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetFactorial?ForNumber=3">XML</a></td>
<td width="131" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Json/SyncReply/GetFactorial?ForNumber=3">JSON</a></td>
<td width="131" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetFactorial?ForNumber=3">JSV</a> | <a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetFactorial?ForNumber=3&amp;debug">debug</a></td>
</tr>
<tr>
<th width="302" valign="top">GetFibonacciNumbers?Skip=5&amp;Take=10</th>
<td width="132" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetFibonacciNumbers?Skip=5&amp;Take=10">XML</a></td>
<td width="132" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Json/SyncReply/GetFibonacciNumbers?Skip=5&amp;Take=10">JSON</a></td>
<td width="132" valign="top"><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetFibonacciNumbers?Skip=5&amp;Take=10">JSV</a> | <a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetFibonacciNumbers?Skip=5&amp;Take=10&amp;debug">debug</a></td>
</tr>
</tbody>
</table>
<em>*Live webservices hosted on CentOS / Nginx / Mono FastCGI</em>

You can view all web services available by going to Service Stack’s web service Metadata page:

<a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Metadata">http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Metadata</a>
<h2>Download TypeSerializer for your own projects</h2>
The JSV-Format is provided by the TypeSerializer class in the ServiceStack.Text namespace. It is perfect for anywhere you want to serialize a .NET type, ideal for storing complex types as text blobs in a RDBMS. Like the rest of <a href="http://www.servicestack.net">Service Stack</a> it is Open Source, released under the <a href="http://www.opensource.org/licenses/bsd-license.php">New BSD Licence</a>:
<ul>
	<li>Included as part of the Service Stack binaries -  <a href="https://github.com/ServiceStack/ServiceStack/downloads">ServiceStack/downloads</a></li>
	<li>As a standalone dll - <a href="https://github.com/ServiceStack/ServiceStack.Text/downloads">ServiceStack.Text/downloads</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2010-04-10 04:05:20</wp:post_date>
		<wp:post_date_gmt>2010-04-10 01:05:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nets-new-fast-compact-web-service-endpoint-the-jsv-format</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1125</wp:comment_id>
			<wp:comment_author><![CDATA[Useful C#/.NET Extension method: T.Dump(); &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=202</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-04-12 00:53:20</wp:comment_date>
			<wp:comment_date_gmt>2010-04-11 21:53:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] If you want to know more about the Dump’s serialization format and how you can use it to store text blobs in databases check out the introductory post. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1126</wp:comment_id>
			<wp:comment_author><![CDATA[chadbr]]></wp:comment_author>
			<wp:comment_author_email>chadbr@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-06-21 20:26:32</wp:comment_date>
			<wp:comment_date_gmt>2010-06-21 17:26:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is a darn good idea. Have you tested it in Silverlight?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1127</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-06-21 21:48:54</wp:comment_date>
			<wp:comment_date_gmt>2010-06-21 18:48:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well as its just pure managed C# (i.e. no native or unsafe code) with no dependencies outside of the BCL there should be no reason why it wouldn't work. But definitely if you find any issues note them here: http://code.google.com/p/servicestack/issues/list and I'll fix them promptly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1126</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1128</wp:comment_id>
			<wp:comment_author><![CDATA[chadbr]]></wp:comment_author>
			<wp:comment_author_email>chadbr@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-06-22 22:23:34</wp:comment_date>
			<wp:comment_date_gmt>2010-06-22 19:23:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks - I'll give it a go]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1129</wp:comment_id>
			<wp:comment_author><![CDATA[A'braham Barakhyahu]]></wp:comment_author>
			<wp:comment_author_email>barakhyahu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://heavenlyhavenproductions.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-06-30 17:04:16</wp:comment_date>
			<wp:comment_date_gmt>2010-06-30 14:04:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Would sending a json object to a servicestack service cause two serializations then?  One from JSON to POCO, then from POCO to JSV?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1130</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-06-30 17:20:38</wp:comment_date>
			<wp:comment_date_gmt>2010-06-30 14:20:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Nope the Json/Jsv/Xml/etc are completely different endpoints for the same service. So if you call via the JSON webservice endpoint it will be just JSON => C# DTO. Calling the JSV endpoint will be just JSV => C# DTO, so no double de-serialization. 

Although calling the GET REST urls for any of these service endpoints by passes any serialization (since its just the url and no JSON/JSV to serialize) and just populates the C# DTO using the query string.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1131</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>nichols.mike.s@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mikenichols.devlicio.us</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 06:54:27</wp:comment_date>
			<wp:comment_date_gmt>2010-07-04 03:54:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The TypeSerializer is great. One question though: Is there a setting for branding the POCO type in the actual content? For example, Json.NET has a $type prefix on the serialized string so you can deserialize without knowing the POCO type beforehand. This would be very useful on consuming services who may not know what they are deserializing for consumption.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1132</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 16:27:35</wp:comment_date>
			<wp:comment_date_gmt>2010-07-04 13:27:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mike,

Glad you like it. I'm leaving out serializing type information as a design decision to keep the payload as 'data only' and largely schema-free. Although having said this, there is nothing to stop you from doing it when its required. 

Since this topic has come up a few times in a few emails I thought it was about time to write a post highlighting what's possible here:
http://www.servicestack.net/mythz_blog/?p=314]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1133</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>nichols.mike.s@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mikenichols.devlicio.us</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 17:58:14</wp:comment_date>
			<wp:comment_date_gmt>2010-07-04 14:58:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I figured that.
My workaround was just to prepend the type onto the serialized string before writing to the stream.
Thanks for the post and your work on the project.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1134</wp:comment_id>
			<wp:comment_author><![CDATA[Fastest JSON Serializer for .NET released :) &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=344</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-08-17 18:56:03</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 15:56:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my previous efforts of inventing a fast, new compact text serializer with TypeSerializer and its JSV Format. Essentially I just refactored the current JSV code-base to support multiple serializers and [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1135</wp:comment_id>
			<wp:comment_author><![CDATA[Fastest JSON Serializer for .NET released | All in one for social - Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aio4s.com/blog/2010/11/06/uncategorized/fastest-json-serializer-net-released.html</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-11-06 09:09:50</wp:comment_date>
			<wp:comment_date_gmt>2010-11-06 06:09:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my previous efforts of inventing a fast, new compact text serializer with TypeSerializer and its JSV Format. Essentially I just refactored the current JSV code-base to support multiple serializers and [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1136</wp:comment_id>
			<wp:comment_author><![CDATA[Nick]]></wp:comment_author>
			<wp:comment_author_email>nheath@auctiva.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-20 21:13:56</wp:comment_date>
			<wp:comment_date_gmt>2011-01-20 18:13:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So is there a objective-c library for iPhone applications to deserialize and consume JSV services, to take advantage of the benefits you highlight? As you mention, mobile apps would be a great fit for a format like this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1137</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-20 22:35:31</wp:comment_date>
			<wp:comment_date_gmt>2011-01-20 19:35:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[At the moment the only way to consume it on an iPhone is with MonoTouch. 
The unmanaged and static nature of Objective-C and its lack of reflection capabilities makes it a poor candidate for web services.
You either need to provide a loosely typed collection of NSMutableArray / NSDictionary (which isn't ideal) or a code-generated static proxy (which takes effort). 
Unfortunately I haven't done either. It's on the TODO list however I don't envisage a lot of free time in the future - in the meantime I'm happy to accept pull-requests :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1136</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1138</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>desaro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-03-08 22:08:32</wp:comment_date>
			<wp:comment_date_gmt>2011-03-08 19:08:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[quote: "The unmanaged and static nature of Objective-C and its lack of reflection capabilities makes it a poor candidate for web services."

I think you may have some incorrect information about Obj-C.  It is actually dynamically typed and has at it's core the ability to introspect objects and their properties in a much, much more efficient way than System.Reflection.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1139</wp:comment_id>
			<wp:comment_author><![CDATA[Josh]]></wp:comment_author>
			<wp:comment_author_email>josh@globalherald.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-01 14:25:39</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 11:25:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you take a look at Google Protocol Buffers and Facebook Thrift, before writing this?  These formats are not self-descriptive, but they are tens of times faster in serialization/deserialization than XML in most of the supported platforms (Java/C++/Python on Linux and C# on .NET).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1140</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-17 12:11:26</wp:comment_date>
			<wp:comment_date_gmt>2011-04-17 09:11:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm aware of its dynamic message dispatches but don't see any reflective capabilities any more than that.  I'm guessing there's going to be no Eval, Emit or expression support?
Do you have a link showing its reflective capabilities?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1138</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1141</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-17 12:17:06</wp:comment_date>
			<wp:comment_date_gmt>2011-04-17 09:17:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah so in the benchmarks I've included Marc Gravell's extremely fast protobuf-net implementation which is around 2x quicker than my JSV / JSON formats:
http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html

Of course there are trade-offs with each serializer, I have a preference for self-describing text formats some of the benefits you can see here:
https://github.com/ServiceStack/ServiceStack.Redis/wiki/MigrationsUsingSchemalessNoSql

But yeah for point-to-point communication you can't beat Google's Protocol Buffers, but I wouldn't be storing it in any blobs.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1139</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1142</wp:comment_id>
			<wp:comment_author><![CDATA[aytharn]]></wp:comment_author>
			<wp:comment_author_email>aytharn@gawab.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-09-28 11:41:05</wp:comment_date>
			<wp:comment_date_gmt>2011-09-28 08:41:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@mytz: 
For the Reflective capabilities: please take a look at objc/runtime.h
Anyway: Objective-C is simply NOT CAPABLE of creating static objects at all]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Useful C# .NET Extension method: T.Dump();</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=202</link>
		<pubDate>Sun, 11 Apr 2010 21:30:49 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of the things I missed in the switch from a dynamic language like PHP to a typed language like C# is the ability to easily traverse any object without much care for types. This meant you could implement things like PHP’s incredibly useful <strong>print_r()</strong> function without too much effort. </p>  <p>I’m now happy to announce that following the release of <a href="https://github.com/ServiceStack/ServiceStack.Text">TypeSerializer</a> we now have that functionality in C#/.NET! </p>  <p>In the <strong>ServiceStack.Text.JsvFormatter</strong> class are two extension methods which recursively dumps all the public properties of any type into a human readable ‘pretty formatted’ string.</p>  <pre>string Dump&lt;T&gt;(this T instance);
string SerializeAndFormat&lt;T&gt;(this T instance);</pre>

<p>Both methods achieve the same result. I just wanted to include the logically named but lengthier <em>‘SerializeAndFormat’</em> for completion as it describes exactly what it does. Most of the time we don’t care and are happy to use the shortened <em>‘Dump’</em> to mean the same thing.</p>

<h3>Example Usage</h3>

<p>After importing the <strong>ServiceStack.Text</strong> namespace you can view the value of all fields as seen in <a href="http://code.google.com/p/servicestack/source/browse/trunk/Common/ServiceStack.Text/ServiceStack.Text.Tests/JsvFormatterTests.cs">the following example</a>:</p>

[csharp]
var model = new TestModel(); 
Console.WriteLine(model.Dump()); 
[/csharp]

<h4>Example Output</h4>

<pre>
{
    Int: 1,
    String: One,
    DateTime: 2010-04-11,
    Guid: c050437f6fcd46be9b2d0806a0860b3e,
    EmptyIntList: [],
    IntList: 
    [
        1,
        2,
        3
    ],
    StringList: 
    [
        one,
        two,
        three
    ],
    StringIntMap: 
    {
        a: 1,
        b: 2,
        c: 3
    }
}
</pre>

<h3>Inbuilt into Service Stack JSV web service endpoint</h3>

<p>I’ve found this feature to be so useful that I’ve included it as part of the JSV endpoint by simply appending <strong>&debug</strong> anywhere in the request’s query string. So even if you don’t use the new JSV endpoint you can still benefit from it by instantly being able to read the data provided by your web service. Here are some live examples showing the same web services called from the XML and JSV endpoint that shows the difference in readability:</p>

<p><strong>GetNorthwindCustomerOrders&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </strong><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetNorthwindCustomerOrders">XML</a>&#160;&#160; |&#160;&#160; <a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetNorthwindCustomerOrders?debug">JSV + Debug</a></p>

<p><strong>GetFibonacciNumbers?Skip=5&amp;Take=10&#160;&#160;&#160;&#160;&#160; </strong><a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Xml/SyncReply/GetFibonacciNumbers?Skip=5&amp;Take=10">XML</a>&#160;&#160; |&#160;&#160; <a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/ServiceStack/Jsv/SyncReply/GetFibonacciNumbers?Skip=5&amp;Take=10&amp;debug">JSV + Debug</a></p>

<p>&#160;</p>

<h2>Download</h2>

<p>All software is released under the liberal <a href="http://www.opensource.org/licenses/bsd-license.php">New BSD Licence</a> so you are free to start using it in your own projects. You can download it any <strong>ONE</strong> of the following ways:</p>

<ul>
	<li>Included as part of the Service Stack binaries -  <a href="https://github.com/ServiceStack/ServiceStack/downloads">ServiceStack/downloads</a></li>
	<li>Available as a standalone dll - <a href="https://github.com/ServiceStack/ServiceStack.Text/downloads">ServiceStack.Text/downloads</a></li>
</ul>

<p>&#160;</p>

<h4>Find out more…</h4>

<p>If you want to know more about the Dump’s serialization format and how you can use it to store text blobs in databases check out <a href="http://www.servicestack.net/mythz_blog/?p=176">the introductory post</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2010-04-12 00:30:49</wp:post_date>
		<wp:post_date_gmt>2010-04-11 21:30:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>useful-c-net-extension-method-string-t-dump</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1171</wp:comment_id>
			<wp:comment_author><![CDATA[Useful C#/.NET Extension method: T.Dump(); » Tales from behind the &#8230; | Source code bank]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sourcecodebank.com/2010/04/11/useful-c-net-extension-method-t-dump-%c2%bb-tales-from-behind-the-2-c/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-04-12 02:19:15</wp:comment_date>
			<wp:comment_date_gmt>2010-04-11 23:19:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] reading here: Useful C#/.NET Extension method: T.Dump(); » Tales from behind the &#8230;   If you enjoyed this article please consider sharing [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1172</wp:comment_id>
			<wp:comment_author><![CDATA[Jan Limpens]]></wp:comment_author>
			<wp:comment_author_email>jan.limpens@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-04-26 17:25:01</wp:comment_date>
			<wp:comment_date_gmt>2010-04-26 14:25:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not a real comment, but your silverlight example on servicestack isn't working. might want to fix that...

cheers,
j]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1173</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-04-27 01:23:59</wp:comment_date>
			<wp:comment_date_gmt>2010-04-26 22:23:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi thanks for the update.

Unfortunately this was a result of trying set a default namespace with the [assembly: ContractNamespace] attribute as seen here:
http://www.u2u.info/Blogs/Peter/Lists/Posts/Post.aspx?ID=295
but alas no worky in Mono. 

Anyway back to manually declaring namespaces so all is good now. 
Thanks for reporting!

- Demis]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1172</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1174</wp:comment_id>
			<wp:comment_author><![CDATA[uday]]></wp:comment_author>
			<wp:comment_author_email>sivakotiuday@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://developing</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-10-20 10:35:35</wp:comment_date>
			<wp:comment_date_gmt>2011-10-20 07:35:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi sir,

i am new to the Grails and Redis .

i have to build a project by using above technologies.

i feel comfort with Grails but i coming to Redis i know basic command now to run it thats it i dont know more than that.

can u help me out .

give me the basic stuff which need to practice and i am using STS tool.give me the sample project which build on both Grails and Redis .

and pls explain me how to configure Redis in config.groovy.

i am waiting for ur help and suggestions .

if possible please mail me to ” sivakotiuday@gmail.com” .

thank you.

Your Uday.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>History of Microsoft and the Web - From ASP, ASP.NET to MVC</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=251</link>
		<pubDate>Mon, 28 Jun 2010 23:40:18 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[I was asked to provide some initial feedback of my impressions of ASP.NET MVC and since its been a while since my last post I thought it was as good as subject as any to start off my summer rants.
<h3>My background and personal recommendations</h3>
I would like to add that the contents contained here-in is from a web developers perspective (i.e. my own) having spent several years in the earlier part of my career building web solutions (which are still in production use today) with ASP, PHP and Java web frameworks and having felt the pain points and advantages of each first hand.  <em>Basically, I talk-of where I've walked.</em>

I am currently an active developer of websites developed with both ASP.NET and ASP.NET MVC web frameworks which I continue to advocate for under different circumstances that yield the most benefits of each. Outside of work I also develop some websites with the Python Django web framework thanks largely to the free hosting that provided for by <a href="http://code.google.com/appengine/">Google App Engine</a>. If you are primarily a *NIX developer and performance is not your primary concern then the increasingly popular and productive <a href="http://rubyonrails.org/">Ruby on Rails</a> web framework may be your best choice.

My personal love for the performance, productivity and elegance of the C# programming language has kept me tied to the .NET web frameworks. Although it really depends on your situation because I also think Google has 'got it right' where the best performance and User Experience may possibly be achieved by using no server-side web framework at all - instead relying on static html/css/js to run the entire web application inside the browser, calling on JSON/JavaScript data services for its interactive content. If you are curious with Google's approach I recommend taking a look at the <a href="http://code.google.com/closure/library/">Google Closure Library</a> which is designed for exactly this scenario.

ASP.NET MVC is Microsoft's latest web application framework designed to provide an alternate, modern and cleaner web framework that is more aligned with the 'spirit of the web'.
This should not to be confused with Microsoft's previous attempt at a web application framework which goes under the shorter and slightly confusing name of just 'ASP.NET'.
<h2>First there was Classic ASP</h2>
Prior to Microsoft introducing its original ASP.NET the landscape for web frameworks was vastly different. At that time (well more accurately from authors view of that time :) many small websites were scripted with PHP and Perl languages which when used without a solid web-framework behind them (as most of them were) resulted in 'spaghetti-code' - a term used to describe the resulting complex code resulting from maintaining multiple callback execution paths and application and presentation logic kept within a single page. The main established competing frameworks in the enterprise space we're from Java Servlets and Cold Fusion - which because of its commercial nature did not last very long in the 'Open Web'.

All Microsoft had prior to this was classic ASP which in my opinion looked like the result of a C-grad student on a summer internship who was tasked with <em>'just make something that works that outputs HTML so we can ship-it and silence vocal developers!'</em>. The result of which was the very lacking 'Classic ASP' which was conceptually very similar to PHP but used VBScript or JScript as its core programming language and when called on to enable richer functionality answered by enabling developers to invoke ActiveX COM objects - needlessly to say did not perform or scale very well. Maybe I'm being too harsh here but the technology fell way below my expectations of a multi-national corporation who prides themselves in developing first-class software development platforms, tools and frameworks.

<a href="http://ww2.servicestack.net/wp-uploads/2010/06/java-logo.jpg"><img class="alignleft size-full wp-image-267" title="java-logo" src="http://ww2.servicestack.net/wp-uploads/2010/06/java-logo.jpg" alt="" width="96" height="96" /></a>Microsoft was very late to the HTML game where most of their developers were still tackling the complexity of building windows applications with C++ or VB6. Luckily for them, the Servlet solutions provided by the competing Java frameworks seemed to be maintaining an unhealthy fixation having just discovered  XML nirvana and thought that if they over-used it enough to configure absolutely everything that it would somehow land its authors in XML heaven. So productivity-wise the solutions ended being pretty much the same but the Java frameworks were quite rightly seen as the superior and more stable solution and as a result saw its usage increasing in the enterprise. Clearly Microsoft saw the impeding danger of the managed Java platform and knew that it needed to change course swiftly and offer a competing solution to fend off the Java attack if it was to keep developer mind share. So from the school of <em>'Good artists copy great artists steal'</em> Microsoft initiated a company-wide effort to build a competing platform to Java and shortly after .NET was born. Although .NET being a very capable platform, the problem they still faced was they had a large market-share of developers who predominantly only knew how to develop Windows GUI Applications. What to do?....
<h2>and then came ASP.NET</h2>
<a href="http://ww2.servicestack.net/wp-uploads/2010/06/asp.net_logo_small.gif"><img class="size-full wp-image-266 alignright" title="asp.net_logo_small" src="http://ww2.servicestack.net/wp-uploads/2010/06/asp.net_logo_small.gif" alt="" width="149" height="58" /></a>Simple, provide a 'Windows Forms-like' abstraction to allow developers familiar with developing windows applications a state-full, event-based development environment similar to what they were used to when they were cutting their teeth on Windows GUI applications. This unique approach of developing websites comes with its share of advantages and disadvantages. The advantage of which were a shorter learning curve, a very capable GUI designer and a state-full event-based programming model which for the most part would let you get a lot of work done without needing write any HTML whatsoever.

Despite the short-term gains, these advantages can quickly evaporate for large projects. The learning curve is shorter but at the same time the curve is going the wrong way. Websites are inherently stateless and trying to make them state-full uncovers some of ASP.NET's major limitations which include:
<ul>
	<li>Being limited to a single FORM tag on a page which all subsequent requests are routed through.</li>
	<li>The event-based model provided is handled with server-side logic so trivial user interactions like changing the combo-box with an auto-postback requires a slow round-trip back to the server and the page to be completely re-rendered.</li>
	<li>In order to maintain page state a VIEWSTATE is kept that contains the state of each control on the page. Depending on the number and type of controls this VIEWSTATE can explode into a huge payload providing degraded performance for every request. The VIEWSTATE is core to ASP.NET's and one of its biggest criticisms as it is effectively seen as the <em>anti-web</em>. In order to function it requires every request to HTTP POST an unreadable blob that is both undebugable with a packet sniffer and essentially unreproducible without manually clicking your way back to your desired state. This makes your application harder to test, debug, and maintain.</li>
	<li>Turning every request into a HTTP POST also has some disadvantages on their own. It breaks the users back button as HTTP POST's are meant for <em>destructive requests</em> so browsers must prompt the user to make sure it is safe to do so. This has a direct impact on usability as in contrast to a HTTP GET request, the page's url does not provide you context of your 'current state' (as can be inferred with RESTful urls), its not book-markable or transferable to someone else. It also has a wider impact in that the page state is not cache-able or indexed by search engines, etc.</li>
	<li>ASP.NET's GUI designer (like all HTML designers I've ever tried) produce semantically poor mark-up which although great for building prototypes quickly become a burden to maintain a consistent style throughout.</li>
</ul>
One advantage of ASP.NET that doesn't get nearly enough attention is the composability that the state-full ASP.NET framework provides. This is evident by the rich 3rd party commercial ecosystem for ASP.NET controls - for which appear to be non-existent for alternate web frameworks. My personal belief for this, is its ability to encapsulate the entire state and lifecycle of a single control allowing authors to provider richer, more re-usable server-side controls. This feature allows accommodating developers to show off impressive rapid prototypes to their bosses where they're able to drop a DataGrid control configured with a 1-line databinding and have it browse and edit their corporate RDBMS dataset.

Despite its criticisms I consider ASP.NET to be a fairly RAD environment and is still my first choice for developing small, simple Intranet or single-purpose applications. For large or public-facing websites I prefer to use the newer and much cleaner MVC. Incidentally MVC is not a replacement technology as Microsoft is planning to support both web frameworks for the foreseeable future.
<h2>Introducing the leaner, cleaner ASP.NET MVC</h2>
<a href="http://ww2.servicestack.net/wp-uploads/2010/06/Net-Logo-with-ASP.NET_7E879BE1.jpg"><img class="alignleft size-full wp-image-270" title="Net Logo with ASP.NET" src="http://ww2.servicestack.net/wp-uploads/2010/06/Net-Logo-with-ASP.NET_7E879BE1.jpg" alt="" width="376" height="72" /></a>

After having been largely successful in defending itself from its last foe with Java - Microsoft is finding itself again on the battle lines on the cusp of falling out of fashion with new developer mind share. This time its a result of a surge in popularity from the dynamic languages mainly <a href="http://www.ruby-lang.org/en/">Ruby</a>, <a href="http://www.python.org/">Python</a> and <a href="http://php.net/index.php">PHP</a>. They are now re-appearing armed with well established and proven web frameworks and a suite of large website backing proving their worth in the enterprise space. Ruby is leading the charge with <a href="http://rubyonrails.org/">Ruby on Rails</a> while Pythonistas are sticking by their tried and trusted <a href="http://www.djangoproject.com/">Django web framework</a>. It's hard to explain the reason for this new resurgence behind Dynamic language frameworks but I'm putting it down to a combination of the following factors:
<ul>
	<li>Hardware is getting cheaper, and virtual machines and cloud computing are becoming increasingly popular. The performance issues of old have been mitigated, and scaling is now seen as more important since performance is now largely a hardware cost problem which thanks to Moores law is comparatively a lot cheaper to buy than programmers wages.</li>
	<li>Dynamic languages have proven themselves. Increasingly large websites such as Facebook, Yahoo, Twitter, etc have chosen to build on dynamic language frameworks and have made them both perform and scale well.</li>
	<li>There has been a shift in development methodologies towards a 'best-practices' software discipline where the most sought after traits in the Enterprise have now become: Unit, Integration, User Acceptance Testing, DDD, TDD, BDD, Agile, DSLs, etc. Although these approaches are not specifically tied to dynamic web frameworks methodology, it now supersedes the Enterprises previous only 'safe-choice' of using .NET and Java in the enterprise since they were considered statically-typed 'safe languages' which were served on industrial-strength multi-threaded app servers companies could trust.</li>
	<li>Using the above methodologies to create well-tested robust software that maximizes customer value and satisfaction is now, I believe the most prominent goal in software development. Since dynamic languages lack a lot of the compile-time safety found in statically-typed languages, developers are more inclined to write testable software and actually test their code.</li>
	<li>In keeping in-line with maximizing customer value many dynamic web frameworks prefer simplicity and Convention over Configuration allowing a lot more functionality to be delivered with the least effort.</li>
	<li>Spurred on initially by Google the web has become more powerful, faster and compliant then ever before increasing the possibilities and making the Web the first choice development platform for most class of applications. It seems that with this renewed interest in the web (I hate to say it - Web 2.0) has spurred a lot more research into what makes the Web great and the Internet work. Through this greater under standing, many people have attributed its success and the 'Spirit of the Web' to the simplicity and power of the HTTP specification and the REST (Representational State Transfer) software architecture which it was built-on.</li>
</ul>
Many of the above points have either nullified ASP.NET's inherent advantage and at the same time exposed its limitations. It is clear that ASP.NET's state-full ViewState and direct access of sealed concrete classes were developed without any consideration of testing in mind as it is nearly impossible to test an ASP.NET website outside of a full integration test which takes a lot of effort and is cumbersome to write. So like any good software company Microsoft has recognized the current criticisms and shortcomings with ASP.NET and attempt to address them head on with their latest effort an entirely new solution written from the ground up to embracing the 'Spirit of the Web' providing a lean, clean, testable framework with powerful routing capabilities which enables experienced web developers the necessary tools to build REST-ful web applications.

ASP.NET MVC is now into it's 2nd edition and has matured quite nicely adding some useful features along the way. It's heavily inspired from other web MVC frameworks like <a href="http://rubyonrails.org/">Rails</a> but also brings its own unique features to the table. It is generally well received and since StackOverflow.com is built using it - already has its proved-in-the-wild poster child :)

<a href="http://ww2.servicestack.net/wp-uploads/2010/06/asp-net-mvc.png"><img class="alignright size-full wp-image-269" title="asp-net-mvc" src="http://ww2.servicestack.net/wp-uploads/2010/06/asp-net-mvc.png" alt="" width="323" height="310" /></a>Model-View-Controller (aka MVC) is an architectural-style pattern aiming to split your application amongst well divided lines. When adhering to the pattern, your application is split between the <strong>Controller </strong>which accepts and validates user input, processes the desired logic and then dictates the final result by populating the <strong>Model</strong> (i.e. data class) and then electing the <strong>View</strong> in which to bind it to.

The MVC architecture originated with thick-client GUI applications which are in practice a very different technology to a web application where they are long-running, event-driven state-full applications where the Controller is used to manipulate the applications Model which the View generally Data Binds to, to reflect the change. This is in stark contrast with a web application which is generally short-lived, stateless applications that are centred around a 'per-request' execution model where instead of events 'User Inputs' comes in the form of HTTP network requests used to facilitate communication between client and server. Although very different in implementation the MVC concept remains fundamentally the same where the <strong>Model</strong>, <strong>View </strong>and <strong>Controller </strong>are kept in visibly separate tiers.

Inside the ASP.NET MVC web framework 'user input' arrives in the form of a HTTP request which is mapped to a <strong>Controller</strong> Action method. Where a Controller is any class that inherits from the Controller base class. It is mapped by convention as defined in the ASP.NET Routing module (a concept unique to ASP.NET MVC). From inside the Action logic the <strong>Model</strong> is populated which can either be a custom POCO class, a list of key values pairs set on ViewData Dictionary or both. Every controller action returns an <strong>ActionResult</strong> which most of the time will be <strong>View()</strong> which simply tells the MVC framework to pass the populated Model to a <strong>View</strong> with the same name as the invoked Controller Action method. Both the Controller and Model are standard .NET classes whilst the <strong>View </strong>is a basic .aspx page - ASP.NET's templating language which simply executes code logic embedded inside the <strong>&lt;% %&gt;</strong> tags with the text mark-up surrounding it. Ideally MVC applications should only contain basic presentation logic in the <strong>View</strong>, by design most of the applications core logic should be contained within the <strong>Controller.</strong> Keeping the application logic separate from the presentation logic allows it to be re-used with different views. This is one of the ways where the MVC architecture promotes re-usability and a clean separation of concerns.

I think I'll end this post here as its already too long - Wordpress has a word counter here telling me that I'm dangerously close to surpassing the longest essay I've ever had to write for school!
Its hard to believe but I originally expected for this to be an all encompassing post providing a brief history of ASP.NET before diving in and giving my first impressions on the newer MVC flavour. I don't actually understand why its ended up so long since being a coder at heart am not really fond of writing documentation in any form - I guess I had a lot to say :)

Anyway stay tuned for the next post getting started with ASP.NET MVC and my first impressions of the new kid on the block.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2010-06-29 02:40:18</wp:post_date>
		<wp:post_date_gmt>2010-06-28 23:40:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>history-of-microsoft-and-the-web-asp-asp-net-mvc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1200</wp:comment_id>
			<wp:comment_author><![CDATA[Steven Bonadonna]]></wp:comment_author>
			<wp:comment_author_email>Philbin143@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://forums.novell.com/members/willow2010.html</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-08-06 17:14:35</wp:comment_date>
			<wp:comment_date_gmt>2010-08-06 14:14:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey I just wanted to let you know, I really like the composition on your website. But I am utilising Chromium on a machine running version 8.x of Xubuntu and the look and feel aren't quite right. Not a serious deal, I can still essentially read the articles and look for for info, but just wanted to inform you about that. The navigation bar is kind of difficult to apply with the config I'm running. Keep up the good work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Versatility of JSV - Late-bound objects</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=314</link>
		<pubDate>Sun, 04 Jul 2010 13:11:04 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>New!</strong> <a href="http://www.servicestack.net/benchmarks/">Benchmarks graphs are now available</a> to better visualize the performance of ServiceStack's JSON and JSV text serializers.

As there have been a few people trying to use <a href="https://github.com/ServiceStack/ServiceStack.Text">TypeSerializer</a> in dynamic situations, I thought I'd put together a post detailing some restrictions and highlighting the kind of use-case scenarios that is possible with TypeSerializer and its <strong>JSV format</strong>.

Some of the goals for the JSV format was to be both compact in size and resilient to versioning and schema changes. With these goals in mind, a conscience design decision was made to not include any type information with the serialized payload. So the way that JSV does its de-serializing is by coercing the JSV payload into the type specified by the user. This can be seen in the API provided by the TypeSerializer class allowing the client to deserialize based on a runtime or static generic type:
<pre>T DeserializeFromString&lt;T&gt;(string value)
object DeserializeFromString(string value, Type type)</pre>
The consequences of this means the user in one way or another must supply the type information although at the same time it allows the same JSV payload to be deserialized back into different types. For example every POCO type can be deserialized back into a <em>Dictionary&lt;string,string&gt;</em> which is useful when you want to still access the data but for whatever reason do not have the type that created it. This also allows for some interesting versioning possibilities in which the format can withstand large changes in its schemas as seen in the article <a href="https://github.com/ServiceStack/ServiceStack.Redis/wiki/MigrationsUsingSchemalessNoSql">Painless data migrations with schema-less NoSQL datastores and Redis</a>.

Beyond normal serialization of DTO types, TypeSerializer is also able to serialize deep heirachys and Interface types as well as 'late-bound objects'. The problem with trying to deserialize a late-bound object (i.e. a property with an <em>object</em> type) is that TypeSerializer doesn't know what type to de-serialize it back into - and since a <em>string</em> is a valid <em>object</em>, will simply populate the object property with the string contents of the serialized property value.

With this in mind, the best way to deserialize a POCO type with a dynamic object property is to serialize the Type information yourself along with the payload. Of course it is best to highlight what this means with an example.

The example below shows how you can serialize a message with a dynamic object payload and have it deserialize back into a <em>DynamicMessage</em> as well as alternate <em>GenericMessage&lt;T&gt;</em> and a <em>StrictMessage</em> types sharing a similar definition - all as expected, without any data loss.

[csharp]
public class DynamicMessage : IMessageHeaders
{
	public Guid Id { get; set; }
	public string ReplyTo { get; set; }
	public int Priority { get; set; }
	public int RetryAttempts { get; set; }
	public object Body { get; set; }

	public Type Type { get; set; }
	public object GetBody()
	{
		//When deserialized this.Body is a string so use the serilaized
		//this.Type to deserialize it back into the original type
		return this.Body is string
		? TypeSerializer.DeserializeFromString((string)this.Body, this.Type)
		: this.Body;
	}
}

public class GenericMessage&lt;T&gt; : IMessageHeaders
{
	public Guid Id { get; set; }
	public string ReplyTo { get; set; }
	public int Priority { get; set; }
	public int RetryAttempts { get; set; }
	public T Body { get; set; }
}

public class StrictMessage : IMessageHeaders
{
	public Guid Id { get; set; }
	public string ReplyTo { get; set; }
	public int Priority { get; set; }
	public int RetryAttempts { get; set; }
	public MessageBody Body { get; set; }
}

public class MessageBody
{
	public MessageBody()
	{
		this.Arguments = new List&lt;string&gt;();
	}

	public string Action { get; set; }
	public List&lt;string&gt; Arguments { get; set; }
}

/// Common interface not required, used only to simplify validation
public interface IMessageHeaders
{
	Guid Id { get; set; }
	string ReplyTo { get; set; }
	int Priority { get; set; }
	int RetryAttempts { get; set; }
}

[TestFixture]
public class DynamicMessageTests
{
	[Test]
	public void Can_deserialize_between_dynamic_generic_and_strict_messages()
	{
		var original = new DynamicMessage
		{
			Id = Guid.NewGuid(),
			Priority = 3,
			ReplyTo = &quot;http://path/to/reply.svc&quot;,
			RetryAttempts = 1,
			Type = typeof(MessageBody),
			Body = new MessageBody
			{
				Action = &quot;Alphabet&quot;,
				Arguments = { &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }
			}
		};

		var jsv = TypeSerializer.SerializeToString(original);
		var dynamicType = TypeSerializer.DeserializeFromString&lt;DynamicMessage&gt;(jsv);
		var genericType = TypeSerializer.DeserializeFromString&lt;GenericMessage&lt;MessageBody&gt;&gt;(jsv);
		var strictType = TypeSerializer.DeserializeFromString&lt;StrictMessage&gt;(jsv);

		AssertHeadersAreEqual(dynamicType, original);
		AssertBodyIsEqual(dynamicType.GetBody(), (MessageBody)original.Body);

		AssertHeadersAreEqual(genericType, original);
		AssertBodyIsEqual(genericType.Body, (MessageBody)original.Body);

		AssertHeadersAreEqual(strictType, original);
		AssertBodyIsEqual(strictType.Body, (MessageBody)original.Body);

		//Using T.Dump() ext method to view output
		Console.WriteLine(strictType.Dump());
		/* Output:
		 {
			Id: 891653ea2d0a4626ab0623fc2dc9dce1,
			ReplyTo: http://path/to/reply.svc,
			Priority: 3,
			RetryAttempts: 1,
			Body:
			{
				Action: Alphabet,
				Arguments:
				[
					a,
					b,
					c
				]
			}
		}
		*/
	}

	public void AssertHeadersAreEqual(IMessageHeaders actual, IMessageHeaders expected)
	{
		Assert.That(actual.Id, Is.EqualTo(expected.Id));
		Assert.That(actual.ReplyTo, Is.EqualTo(expected.ReplyTo));
		Assert.That(actual.Priority, Is.EqualTo(expected.Priority));
		Assert.That(actual.RetryAttempts, Is.EqualTo(expected.RetryAttempts));
	}

	public void AssertBodyIsEqual(object actual, MessageBody expected)
	{
		var actualBody = actual as MessageBody;
		Assert.That(actualBody, Is.Not.Null);
		Assert.That(actualBody.Action, Is.EqualTo(expected.Action));
		Assert.That(actualBody.Arguments, Is.EquivalentTo(expected.Arguments));
	}
}
[/csharp]

The source of this runnable example can be found as part of TypeSerializer's test suite in the <a href="https://github.com/ServiceStack/ServiceStack.Text/blob/master/tests/ServiceStack.Text.Tests/DynamicModels/DynamicMessageTests.cs">DynamicMessageTests.cs</a> test class. Some more dynamic examples showing advanced usages of TypeSerializer can be found in the <a href="https://github.com/ServiceStack/ServiceStack.Text/blob/master/tests/ServiceStack.Text.Tests/DynamicModels/ComplexObjectGraphTest.cs">ComplexObjectGraphTest.cs</a> class within the same directory.

<span style="color: #ffffff;">.</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2010-07-04 16:11:04</wp:post_date>
		<wp:post_date_gmt>2010-07-04 13:11:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>versatility-and-resilience-of-the-jsv-format</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1237</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Johnson]]></wp:comment_author>
			<wp:comment_author_email>mjohnson139@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mindfulsoftwarellc.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-01 20:18:28</wp:comment_date>
			<wp:comment_date_gmt>2010-09-01 17:18:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great Article, just what I needed.  But I do have one question.  I'm porting over Resque to .Net.  At least trying.  I have Job Objects that get serialized and queued in Redis.  Like your article, when I dequeue and item, I need to deserialize the Job object back to the correct type, so I'm saying the type information.  Problem is, the type that was used exists outside of the Resque.dll, and TypeSerializer.CanCreateFromString(job.JobType); returns false.  Any ideas on how to get around this.  My thought is that each user of system will need their own job objects to perform what it is they need to.  When the worker pulls the job out of the queue, it will need to deserialize it.  Any ideas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1238</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-01 20:39:42</wp:comment_date>
			<wp:comment_date_gmt>2010-09-01 17:39:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,

If you are saving and restoring Type information, I would ignore '.CanCreateFromString()' and simply attempt to deserialize it (in a try/catch{}). Since I use "Type.GetType(assemblyQualifiedName);" behind the scenes, the .NET runtime should be able to automatically load the required assembly as long as the type is in a .dll that's in the bin/ directory.

IMHO I would only ever put the one type in the same queue as it makes it much easier to handle. In which case you wouldn't have to persist the Type information since you already know it based on the queue name.

I have already started my own message queue implementation with a redis backend which you may be able to get some ideas about here: http://bit.ly/cZhFit
And some tests for it here: http://bit.ly/9LGkVm as well as an InMemory implementation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1239</wp:comment_id>
			<wp:comment_author><![CDATA[JP]]></wp:comment_author>
			<wp:comment_author_email>jp@uptrends.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-11-23 16:31:39</wp:comment_date>
			<wp:comment_date_gmt>2011-11-23 13:31:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Demis,

This looks really useful, thanks. I have a follow-up question though. In a project that uses ServiceStack as its webservice framework, I have a DTO with a member of type List. 

I'm wondering if it's possible to let ServiceStack take care of the standard (de)serialization of the DTO as it does by default, while making sure that this special serialization is used for that particular member. Is there any way I can influence the behavior of the out-of-the-box serialization in ServiceStack?

In other words, is there a way to plug into the default serialization, by using attributes or configuration?

Thanks for any info.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fastest JSON Serializer for .NET released</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=344</link>
		<pubDate>Tue, 17 Aug 2010 15:55:58 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=344</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>New!</strong> <a href="http://www.servicestack.net/benchmarks/">Benchmarks graphs are now available</a> to better visualize the performance of ServiceStack's JSON and JSV text serializers.

Due to my unhealthy obsession for producing software that runs fast, I'm releasing a shiny new JSON Serializer for .NET into the wild!

<a href="https://github.com/ServiceStack/ServiceStack.Text">ServiceStack JsonSerializer</a> is based upon my previous efforts of inventing a fast, new compact text serializer with `TypeSerializer`
and its <a href="http://www.servicestack.net/mythz_blog/?p=176">JSV Format</a>. Essentially I just refactored the current JSV code-base to support multiple serializers and then simply added an
adapter for the <a href="http://json.org/">JSON format</a>. Unfortunately in my quest of adding a JSON serializer to the feature list I've given up a little perf in the JSV TypeSerializer by
not being able to apply more aggressive static-type optimizations and method in-lining.  However I ended up preferring this option rather than having to branch the existing code-base to support
two fairly large almost identical code-bases doubling my efforts whenever I want to add new features or fix a bug. Although the good news is that the library is still Reflection.Emit code-free
so future optimizations are still possible!

Anyway based on the <a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.100000-times.2010-08-17.html">latest Northwind database benchmarks</a> perf didn't suffer too much
as JSV is still the fastest text serializer for .NET with the newly released JSON serializer not too far behind :)
The benchmarks is showing the new JSON Serializer now over <strong>3.6x</strong> faster than the <a title="Base Class Library" href="http://en.wikipedia.org/wiki/Base_Class_Library">BCL</a>
JsonDataContractSerializer and is around <strong>3x</strong> faster than <a href="http://json.codeplex.com/">NewtonSoft JSON.NET</a> (the previous fastest JSON serializer benchmarked).
(Other popular JSON serializers LitJSON and JayRock were also benchmarked although both were found to be slower and more buggier than the previous options).

It also happens to be <strong>2.6x</strong> faster and <strong>2.6x</strong> more compact than the fastest Type serializer in the BCL - Microsoft's Xml DataContractSerializer, giving yet another
reason for JSON lovers to prefer it over XML.
<table style="border-collapse: collapse;">
<thead>
<tr>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #003366; color: #ffffff; padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; font-weight: normal; background-position: initial initial; background-repeat: initial initial;">Serializer</th>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #003366; color: #ffffff; padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; font-weight: normal; background-position: initial initial; background-repeat: initial initial;">Payload size</th>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #003366; color: #ffffff; padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; font-weight: normal; background-position: initial initial; background-repeat: initial initial;">Larger than best</th>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #003366; color: #ffffff; padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; font-weight: normal; background-position: initial initial; background-repeat: initial initial;">Avg</th>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #003366; color: #ffffff; padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; font-weight: normal; background-position: initial initial; background-repeat: initial initial;">Slower than best</th>
</tr>
</thead>
<tbody>
<tr>
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">Microsoft DataContractSerializer</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">4097</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">4.68x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">838.1957</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">6.93x</th>
</tr>
<tr>
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">Microsoft JsonDataContractSerializer</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">1958</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">2.24x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">1125.8554</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">9.31x</th>
</tr>
<tr>
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">Microsoft BinaryFormatter</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">4927</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">5.62x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">1113.4011</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">9.21x</th>
</tr>
<tr>
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">NewtonSoft.Json</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">2014</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">2.30x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">947.2970</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">7.83x</th>
</tr>
<tr class="best-size best-time">
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">ProtoBuf.net</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">876</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">1x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">120.9475</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">1x</th>
</tr>
<tr>
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">ServiceStack TypeSerializer</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">1549</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">1.77x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">270.0429</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">2.23x</th>
</tr>
<tr>
<th class="c1" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; text-align: left; background-position: initial initial; background-repeat: initial initial;">ServiceStack JsonSerializer</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">1831</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">2.09x</th>
<td style="padding-top: 5px; padding-right: 10px; padding-bottom: 5px; padding-left: 10px; text-align: center; border-right-style: solid; border-right-width: 1px; border-right-color: #f1f1f1; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #f1f1f1;">312.6265</td>
<th style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f1f1f1; font-weight: normal; padding-top: 5px; padding-right: 20px; padding-bottom: 5px; padding-left: 10px; background-position: initial initial; background-repeat: initial initial;">2.58x</th>
</tr>
</tbody>
</table>
<h3><span style="font-weight: normal; font-size: 13px;"><em>(Combined results based on the <a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.100000-times.2010-08-17.html">Northwind database benchmarks</a></em><em>. Payload size in bytes / Times in milliseconds)</em></span></h3>
<em> </em><strong>Features and Usages
</strong>Effectively the JSON serializer is optimized for one task which is to Serialize/Deserialize types <strong>fast</strong>. Where possible I try to remain compatible with the BCL's JsonDataContractSerializer by for example choosing to serialize DateTime using the WCF JSON format (i.e. /Date(1234+0000)/).

Although that being said the serializer tries to serialize as much as possible while at the same time being non-invasive and configuration free:

<span style="font-family: arial, sans-serif; line-height: normal;"> </span>
<ul style="max-width: 65em; padding-left: 40px;">
	<li>Serializes / De-serializes any .NET data type (by convention)
<ul style="max-width: 65em; padding-left: 40px;">
	<li>Supports custom, compact serialization of structs by overriding <tt style="font-size: 13px;">ToString()</tt> and <tt style="font-size: 13px;">static T Parse(string)</tt> methods</li>
	<li>Can serialize inherited, interface, anonymous types or 'late-bound objects' data types</li>
	<li>Respects opt-in DataMember custom serialization for DataContract dto types.</li>
</ul>
</li>
</ul>
Developers wanting more features like outputting 'indented JSON' or building a dynamic JSON structure with LINQ 2 JSON would still be better off with the popular <a href="http://json.codeplex.com/">NewtonSoft JSON.NET</a>.

In keeping with tradition I've retained a simple API:

[csharp]
string JsonSerializer.SerializeToString&lt;T&gt;(T value);
void JsonSerializer.SerializeToWriter&lt;T&gt;(T value, TextWriter writer);
void JsonSerializer.SerializeToStream&lt;T&gt;(T value, Stream stream);
T JsonSerializer.DeserializeFromString&lt;T&gt;(string value);
T JsonSerializer.DeserializeFromReader&lt;T&gt;(TextReader reader);
T JsonSerializer.DeserializeFromStream&lt;T&gt;(Stream stream);
[/csharp]

<strong><strong>Basic Usage Example</strong></strong>
<strong> </strong>

[csharp]
var customer = new Customer { Name=&quot;Joe Bloggs&quot;, Age=31 };
var json = JsonSerializer.SerializeToString(customer);
var fromJson = JsonSerializer.DeserializeFromString&lt;Customer&gt;(json);
[/csharp]
<h2>Reasons for yet another .NET JSON Serializer</h2>
I only recently decided to develop a JSON serializer as I was pretty happy with my JSV format in fulfilling its purpose quite well by providing a fast, human readable, version-able, clean text-format ideal for .NET to .NET web services or for serializing any text blob (e.g. in an RDBMS or Redis, etc).

Unfortunately I recently hit a few issues which called for the use of JSON over JSV:
<h4>Ajax Benchmarks</h4>
The benchmarks after porting the JSV format over to JavaScript (to be able to use it inside Ajax apps) on the upside showed that it was actually a little quicker to deserialize than 'safe JavaScript' in advanced browsers (read: any browser NOT Internet Explorer). On the downside Native evaluation of 'unsafe JavaScript' was still quicker in those browsers. Unfortunately the biggest problem was performance in Internet Explorer sucked in comparison as at times was over <strong>20x </strong>slower compared to its own eval. Now I've long ago become a silent proponent of the 'Death to IE6' group by electing not to test/support it, unfortunately given its significant market share I really couldn't do the same for IE7 and IE8 so for overall performance reasons using the existing BCL JSON serializer was still the way to go.
<h4>Embracing the future Web (Ajax / HTML5)</h4>
It appears that dynamic web applications using Ajax and HTML5 are quickly becoming the first-choice platform for developing advanced client UI applications. I believe that pure ajax applications (i.e. static html/js/css talking directly to JSON data web services) will quickly supersed rich plugin frameworks like Flash and Silverlight with the help of sophisticated JavaScript frameworks like <a href="http://jquery.com/">jQuery</a>, the <a href="http://code.google.com/closure/library/">Google Closure Library</a> and the upcoming browsers broad support for HTML5. I consider <strong>performance</strong> to be one of the most important features for an application so having a fast JSON Serializer would increase ServiceStack's appeal as a high-performance Ajax server to power these new breed of apps.
<h4>Redis Interoperability</h4>
Although Redis potentially supports storing any binary data, it does have first class support for UTF8 strings. There have started to be some talk in the redis mailing groups for client library maintainers to choose to standardize on storing text blobs using JSON for simplicity and interoperability reasons. At the moment <a href="http://code.google.com/p/servicestack/wiki/ServiceStackRedis">ServiceStack's C# Redis Client</a> is currently using the JSV format to store complex types because of its inherent <a href="http://www.servicestack.net/mythz_blog/?p=176">perf</a> and <a href="http://code.google.com/p/servicestack/wiki/MigrationsUsingSchemalessNoSql">versionability</a> characteristics, however this is likely to change to use JSON in a future release.
<h4>JSON support in Mono</h4>
Unfortunately over the years Mono's implementation of the BCL's JsonDataContract hasn't improved much and is still the number 1 reason why some ServiceStack examples don't work in Mono. This ended up being the motivating factor as I recently added preliminary <a href="http://www.servicestack.net/ServiceStack.Examples.Host.Web/AjaxClient/MovieRestTest.htm">REST support in ServiceStack</a> (details in a future post) and was not able to run the live examples since I only have access to a Linux web host (thus requiring mono).

In the end, I decided to bite the bullet and jump on the <a title="Not Invented Here" href="http://en.wikipedia.org/wiki/Not_Invented_Here">NIH bandwagon</a> again and develop a JSON serializer which would ultimately yield a few benefits mainly by making the <a href="http://www.servicestack.net/">ServiceStack web framework</a> a very fast .NET Ajax/JSON server and hopefully positioning it as the preferred platform for developing high-performance cross-platform web services.
<h3>Now the default Json Serializer in ServiceStack</h3>
I've refactored all the ServiceStack.Text.Tests to support and test both the JSON and JSV formats and added a fair few JSON-specific tests as well - so even though its new I consider the new JsonSerializer to fairly stable and bug-free so much so that I've made it the default Json serializer in ServiceStack. As a result all my <a href="http://www.servicestack.net/ServiceStack.Examples.Clients/Default.htm">live ServiceStack examples</a> are now working flawlessly on Mono!

If new serializer is causing some problems for existing ServiceStack users please <a href="https://github.com/ServiceStack/ServiceStack.Text/issues">file any issues</a> you have or alternatively you can revert back to using the .NET's default JsonDataContractSerializer by setting the global config option in your AppHost, i.e.

[csharp]
SetConfig(new EndpointHostConfig { UseBclJsonSerializers = true});
[/csharp]
<h2>Download JsonSerializer</h2>
<strong>JsonSerializer</strong> is available in the ServiceStack.Text namespace which like the rest of Service Stack it is released under the liberal Open Source New BSD Licence which you can get:
<ul>
	<li>Included as part of the Service Stack binaries -  <a href="https://github.com/ServiceStack/ServiceStack/downloads">ServiceStack/downloads</a></li>
	<li>Available as a standalone dll - <a href="https://github.com/ServiceStack/ServiceStack.Text/downloads">ServiceStack.Text/downloads</a></li>
</ul>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">NewtonSoft</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2010-08-17 18:55:58</wp:post_date>
		<wp:post_date_gmt>2010-08-17 15:55:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fastest-json-serializer-for-net-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1253</wp:comment_id>
			<wp:comment_author><![CDATA[Craig]]></wp:comment_author>
			<wp:comment_author_email>craig@deliveryman.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-08-24 10:50:35</wp:comment_date>
			<wp:comment_date_gmt>2010-08-24 07:50:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just ran my own tests using XmlSerializer, JavascriptSerializer, DatacontractSerializer and JsonSerializer and your serializer came 2nd best to Javascriptserializer in serializing an array of simple types (guid,string) to json strings on vista business .net c# 2008 in a  console app running in release using stopwatch (with resets) and running about 100 iterations.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1254</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-08-26 08:46:11</wp:comment_date>
			<wp:comment_date_gmt>2010-08-26 05:46:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Craig,

That's because there is a one-time penalty for creating and caching all the delegates to make subsequent calls fast. Try your benchmark again skipping the first call.
Serializers like the JsonSerializer are optimized to be used in long-running applications like web servers so its best to optimize accordingly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1253</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1255</wp:comment_id>
			<wp:comment_author><![CDATA[Introducing the Redis Admin UI &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=381</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-08-26 14:22:58</wp:comment_date>
			<wp:comment_date_gmt>2010-08-26 11:22:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] JSON web services performance enough with the adoption of my latest efforts developing .NET&#8217;s fastest JSON Serializer, I&#8217;m now turning my attention towards creating apps that take advantage of [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1256</wp:comment_id>
			<wp:comment_author><![CDATA[HTTP + Web Services server hosted in an iPhone with MonoTouch &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=417</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-08 00:31:39</wp:comment_date>
			<wp:comment_date_gmt>2010-09-07 21:31:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the JsonDataContractSerializer in Mono to be unreliable I&#8217;ve had to write and included my own Json Serializer whose heavily reliance on generics requires some extra attention when running in an No JIT [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1257</wp:comment_id>
			<wp:comment_author><![CDATA[Has the App bubble burst? How much does an App earn today? &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=572</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 07:38:06</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 04:38:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] free time and I was finally able to open xcode again after an 18 month hiatus. After tying up some loose ends on my open source project I got to work on a new [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1258</wp:comment_id>
			<wp:comment_author><![CDATA[MGholam]]></wp:comment_author>
			<wp:comment_author_email>mgholam@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-19 07:02:25</wp:comment_date>
			<wp:comment_date_gmt>2010-09-19 04:02:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Please can you implement the following:
1.ability to serialize and deserialize a list of derived objects
e.g. 
List items;
items.add(new class1()); // class1:baseclass
items.add(new class2()); // class2:baseclass]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1259</wp:comment_id>
			<wp:comment_author><![CDATA[Introducing the Redis Admin UI | All in one for social - Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aio4s.com/blog/2010/11/08/technology/introducing-redis-admin-ui.html</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-11-08 04:14:17</wp:comment_date>
			<wp:comment_date_gmt>2010-11-08 01:14:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] JSON web services performance enough with the adoption of my latest efforts developing .NET’s fastest JSON Serializer, I’m now turning my attention towards creating apps that take advantage of it.I’m a firm [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1260</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email>mark@outoftheboxideas.co.za</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-13 09:24:34</wp:comment_date>
			<wp:comment_date_gmt>2011-01-13 06:24:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Demis

First of all, great library, I use it a lot and it has served me well. I just came across one problem that I'm not sure is a documented shortcoming or if I am just doing it wrong? It seems the deserialization of json data does not cater for collections? I created an object with a parent-child relationship and tried to run it through deserialization ( after serializing the object with the same library ) and it only deserializes the root object, no children? The DataContractJsonSerializer does however deserialize it correctly. Any thoughts?

here is the test code...


List branches = new List();
branches.Add(new JSTreeItem { name = "child1" });
branches.Add(new JSTreeItem { name = "child2" });
 branches.Add(new JSTreeItem { name = "child3" });

var tree = new JSTreeItem { children = branches, name = "root" };
            
 var json = JsonSerializer.SerializeToString(tree);
var fromJson = JsonSerializer.DeserializeFromString(json);]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1261</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-13 11:32:52</wp:comment_date>
			<wp:comment_date_gmt>2011-01-13 08:32:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mark,

Glad to hear the library is useful. There is one notable limitation with it (because of its static analysis nature) is that it doesn't support cyclical dependencies of Types - which is what I believe the limitation you've run into. I'll check out the code sample when I get home in case its something else.

Also if you can post future issues on https://github.com/mythz/ServiceStack.Text/issues or http://groups.google.com/group/servicestack it will let me track it better, that would be great!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1260</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1262</wp:comment_id>
			<wp:comment_author><![CDATA[Serialization (mostly JSON) &laquo; Random Notes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogger.polydecision.com/blogger/index.php/2011/05/03/serialization-mostly-json/</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-05-03 01:39:33</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 22:39:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] two entries (Fastest JSON Serializer for .NET released and fastJSON) bring the light to serialization problems while attempting choose JSON serialization [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1263</wp:comment_id>
			<wp:comment_author><![CDATA[dave]]></wp:comment_author>
			<wp:comment_author_email>dave.dolan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-08-09 19:16:56</wp:comment_date>
			<wp:comment_date_gmt>2011-08-09 16:16:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you seen Mehdi Gholam's fastJSON implementation on codeproject?  I think his is a little more versatile in what it will serialize and deserialize but he claims faster performance than yours:  

http://www.codeproject.com/KB/IP/fastJSON.aspx

I think the general idea and approach is the same as yours, create some cached dynamic methods to burn through objects...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1264</wp:comment_id>
			<wp:comment_author><![CDATA[Performance Test &ndash; JSON serializers | theburningmonk.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://theburningmonk.com/2011/08/performance-test-json-serializers/</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-08-18 23:16:01</wp:comment_date>
			<wp:comment_date_gmt>2011-08-18 20:16:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is claimed that ServiceStack.Text’s JSON seri­al­izer is 3x faster than Json.Net and 3.6x faster than the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1265</wp:comment_id>
			<wp:comment_author><![CDATA[Async, Cached Twitter API Proxy in F# &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=811</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-10-03 13:24:17</wp:comment_date>
			<wp:comment_date_gmt>2011-10-03 10:24:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] also added a join method to join any lists we need to and a short jsonTo alias to make using ServiceStack&#8217;s fast Json Serializer easier on the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1266</wp:comment_id>
			<wp:comment_author><![CDATA[Henry Nguyen]]></wp:comment_author>
			<wp:comment_author_email>hunguyen75@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-10-24 16:34:16</wp:comment_date>
			<wp:comment_date_gmt>2011-10-24 13:34:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can this serializer be supported in .NET Compact framework?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1267</wp:comment_id>
			<wp:comment_author><![CDATA[Carol]]></wp:comment_author>
			<wp:comment_author_email>carol@iatek.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.iatek.com</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-10-26 13:20:13</wp:comment_date>
			<wp:comment_date_gmt>2011-10-26 10:20:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the great library. I'm looking forward to implementing it (and getting rid of the DataContractSerializer!) in my CouchDB client.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Introducing the Redis Admin UI</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=381</link>
		<pubDate>Thu, 26 Aug 2010 11:22:54 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=381</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ww2.servicestack.net/wp-uploads/2010/03/redis.png"><img class="alignleft size-full wp-image-128" style="margin-left: 5px; margin-right: 5px;" title="redis.png" src="http://ww2.servicestack.net/wp-uploads/2010/03/redis.png" alt="" width="112" height="86" /></a>Confident that I've optimized ServiceStack's JSON web services performance enough with the adoption of my latest efforts developing <a href="http://www.servicestack.net/mythz_blog/?p=344">.NET's fastest JSON Serializer</a>, I'm now turning my attention towards creating apps that take advantage of it.

I'm a firm believer that performance is one of, if not <strong>the most important feature</strong> in developing an App that most users will love and use on a regular basis.  It's the common trait amongst all the apps and websites I regularly use and is why I'm continually seeking software components and/or techniques that can help make my software run faster; or whenever there is no alternative to develop them myself. Although having said this I'm not a complete perf maniac and find that its important to strike a balance between productivity, utility and performance - which is what has effectively kept me tied to C# language for all my server development.

<a href="http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb.gif"><img class="alignright size-full wp-image-126" title="nosql_thumb.gif" src="http://ww2.servicestack.net/wp-uploads/2010/03/nosql_thumb.gif" alt="" width="180" height="120" /></a>
<h3>Redis, Sweet Redis</h3>
One of the exciting movements that have occurred in recent times is the introduction of NoSQL suite of data persistence solutions. There are numerous impressive NoSQL solutions out there but the one that I have been most interested in is <strong>Redis</strong> which from the <a href="http://code.google.com/p/redis/">projects website</a>:
<blockquote>is an advanced key-value store. It is similar to memcached but the dataset is not volatile, and values can be strings, exactly like in memcached, but also lists, sets, and ordered sets. All this data types can be manipulated with atomic operations to push/pop elements, add/remove elements, perform server side union, intersection, difference between sets, and so forth.</blockquote>
I found this fascinating since it provides an extremely fast data-store (that gets routinely persisted) supporting rich data-structures that can be safely accessed by multiple app servers concurrently since all operations are atomic. Sweet just what I always wanted - although to make it productive I developed a <a href="https://github.com/mythz/ServiceStack.Redis">C# Redis Client</a> that apart from supporting Redis's entire feature-set also provides a <a href="https://github.com/mythz/ServiceStack.Redis/wiki/IRedisTypedClient">high-level typed API</a> that can persist any <a href="https://github.com/mythz/ServiceStack.Redis/wiki/DesigningNoSqlDatabase">.NET POCO Type</a> which gets persisted as JSON in Redis.
<h2>The Redis Admin UI</h2>
One of the disadvantages that comes with making use of a shiny new tech is that there is sometimes not a lot of tooling available for it. Despite its <a href="http://groups.google.com/group/redis-db">vibrant community</a> this is also true for Redis where although it sports a rich command-line interface (Unix software is good like this) the GUI admin tools are somewhat lacking. Not to worry, I actually needed a project to work on to learn about <a href="http://code.google.com/closure/library/">Google's closure-library</a> anyway so this ended up being a pretty good fit.
<h3>Screenshots</h3>
Before we get into more detail its probably a good idea to showcase some of screenshots of where its currently at:
Note: You can also try it out live: <a href="http://www.servicestack.net/RedisAdminUI/AjaxClient/">http://www.servicestack.net/RedisAdminUI/AjaxClient/</a>

[caption id="attachment_399" align="alignnone" width="502" caption="Admin tab showing redis instance info"]<a href="http://ww2.servicestack.net/wp-uploads/2010/08/Admin_Tab.png"><img class="size-full wp-image-399 " style="border: 0px initial initial;" title="Admin Tab" src="http://ww2.servicestack.net/wp-uploads/2010/08/Admin_Tab.png" alt="" width="502" height="420" /></a>[/caption]

[caption id="attachment_400" align="alignnone" width="502" caption="Aggregate view of complex types"]<a href="http://ww2.servicestack.net/wp-uploads/2010/08/View_Key_Group.png"><img class="size-full wp-image-400" title="View Key Group" src="http://ww2.servicestack.net/wp-uploads/2010/08/View_Key_Group.png" alt="" width="502" height="420" /></a>[/caption]

[caption id="attachment_401" align="alignnone" width="502" caption="View single complex type"]<a href="http://ww2.servicestack.net/wp-uploads/2010/08/View_Complex_Type.png"><img class="size-full wp-image-401 " title="View Complex Type" src="http://ww2.servicestack.net/wp-uploads/2010/08/View_Complex_Type.png" alt="" width="502" height="420" /></a>[/caption]
<h3>Redis Web Services</h3>
In order to be able to access Redis from a web page some JSON web services are in order. I could've just implemented the services required by the Admin UI although I wanted to flex some <a href="http://www.servicestack.net">ServiceStack</a> muscle so decided to create web services for all of Redis's operations which on final count totalled near <strong>100</strong> web services that I ended up knocking out over a single weekend. One of the benefits of using ServiceStack to develop your web services is that you get SOAP, XML, JSON and JSV endpoints for free. So after spending the next couple of days creating unit tests to provide 100% coverage, the back-end was complete - thus giving Redis CouchDB-like powers by allowing it to be accessed from any HTTP client.

Those interested in the Redis Web Services component can check out a live preview - with the complete list of available web services are available here:

<a href="http://www.servicestack.net/RedisAdminUI/Public/Metadata">http://www.servicestack.net/RedisAdminUI/Public/Metadata</a>

And some examples on how to call them:
<div id="_mcePaste"><a href="http://www.servicestack.net/RedisAdminUI/Public/Json/SyncReply/GetServerInfo">http://www.servicestack.net/RedisAdminUI/Public/Json/SyncReply/GetServerInfo</a> (JSON)</div>
<div id="_mcePaste"><a href="http://www.servicestack.net/RedisAdminUI/Public/Xml/SyncReply/SearchKeys?Pattern=urn:c*">http://www.servicestack.net/RedisAdminUI/Public/Xml/SyncReply/SearchKeys?Pattern=urn:c*</a> (XML)</div>
<h3>Ajax UI</h3>
<div>With the web services in place, it is now possible to build pure static html/js/css ajax apps talking directly to the servers' JSON data services - with no other web framework required!</div>
<div>The closure-library although not as terse or as initially productive as jQuery really shines in building large applications. It has a good framework for developing and re-using JavaScript classes and modules and comes with a set of rich, well-tested, cross-browser-compatible widgets. So within a couple of weeks of hacking on the client I was able to churn out a fairly useful featureset:</div>
<div>
<ul>
	<li>A TreeView displaying a heirachal view of the filtered redis keyset</li>
	<li>Deep linking support so you can refresh, save or send a link of the entry you're looking at</li>
	<li>Back and forward button support</li>
	<li>A tabular, aggregate view of all your 'grouped keys'</li>
	<li>An auto-complete filter to filter the tabular data</li>
	<li>Updating and deleting of string values</li>
	<li>Identifying the type, viewing and deleting of all keys</li>
	<li>An admin interface to view redis server stats and the ability to destroy and rebuild the entire redis instance</li>
</ul>
</div>
<h4>Restrictions and Assumptions</h4>
In order to provide a useful Generic UI I've had to make a few assumptions on conventions used. Coincidentally these also happen to be the same conventions that the <a href="https://github.com/mythz/ServiceStack.Redis">ServiceStack's C# Redis Client</a> uses when storing data :-).
<ol>
	<li>Keys parts should be separated with a ':'</li>
	<li>Keys within the same group are expected to be of the same type</li>
	<li>Complex types are stored as JSON</li>
</ol>
There are likely to be others I've subconsciously used so I'll make an effort to keep this list of assumptions live.
<h2>Download and installation</h2>
Like the rest of ServiceStack the Redis Admin UI is Open source released under the liberal <a href="http://www.opensource.org/licenses/bsd-license.php">new BSD licence</a>.

In keeping with tradition with most of my software, the Redis Admin UI works cross-platform on Windows with .NET and Linux and OSX using <a href="http://www.mono-project.com/Main_Page">Mono</a> (Live demo is hosted on CentOS/Nginx).
I've had an attempt at some basic installation instructions that are included in the downloaded and <a href="https://github.com/mythz/ServiceStack.RedisWebServices/blob/master/src/RedisWebServices.Host/INSTALL.txt">viewable online</a>.

The latest version is hosted on Service Stacks code project site at the following url:

<a href="https://github.com/downloads/mythz/ServiceStack.RedisWebServices/RedisAdminUI.zip"><strong><span style="color: #0000ff;">https://github.com/downloads/mythz/ServiceStack.RedisWebServices/RedisAdminUI.zip</span></strong></a>

The Admin UI is highly customizable and very hackable since its written all in Java Script, so if you are interested in customizing the UI for your own purposes I invite you get started by downloading the <a href="https://github.com/mythz/ServiceStack.RedisWebServices">development version</a> from svn trunk.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date>2010-08-26 14:22:54</wp:post_date>
		<wp:post_date_gmt>2010-08-26 11:22:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-the-redis-admin-ui</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1300</wp:comment_id>
			<wp:comment_author><![CDATA[Redis Web界面管理工具 : NoSQLfan]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.nosqlfan.com/html/471.html</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-08-29 16:23:38</wp:comment_date>
			<wp:comment_date_gmt>2010-08-29 13:23:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 详情介绍：http://www.servicestack.net/mythz_blog/?p=381 [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1301</wp:comment_id>
			<wp:comment_author><![CDATA[Redis vs RavenDB &#8211; Benchmarks for .NET Client NoSQL Options &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=474</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-08 23:36:00</wp:comment_date>
			<wp:comment_date_gmt>2010-09-08 20:36:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] JSON string values in Redis. Thanks to the ubiquitous nature of JSON I was easily able to develop a Redis Admin UI which provides a quick way to navigate and introspect your data in Redis. The Redis Admin UI runs [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1302</wp:comment_id>
			<wp:comment_author><![CDATA[Has the App bubble burst? How much does an App earn today? &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=572</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 07:44:15</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 04:44:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] time and I was finally able to open xcode again after an 18 month hiatus. After tying up some loose ends on my open source project I got to work on a new [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1303</wp:comment_id>
			<wp:comment_author><![CDATA[Richard Clayton]]></wp:comment_author>
			<wp:comment_author_email>richard@bericotechnologies.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gettingcirrius.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 15:18:54</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 12:18:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mythz,

I love the work you are doing with the Service Stack API, including the Redis piece.  Pure Awesomeness.  Thank you so much!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1304</wp:comment_id>
			<wp:comment_author><![CDATA[Manuel Meurer]]></wp:comment_author>
			<wp:comment_author_email>manuel.meurer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-04 20:54:19</wp:comment_date>
			<wp:comment_date_gmt>2011-04-04 17:54:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is the Redis Admin UI still around? All Github links are dead...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1305</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-04-17 12:19:49</wp:comment_date>
			<wp:comment_date_gmt>2011-04-17 09:19:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Sorry for the late reply, this blog has been swamped with span.

Yeah the Redis Admin UI is still around, it's current resting place is here :)
https://github.com/ServiceStack/ServiceStack.RedisWebServices

I hardly check blog comments here, so feel free to post any issues to the group:
http://groups.google.com/group/servicestack]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1304</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How to host an HTTP + Web Services server in an iPhone with MonoTouch</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=417</link>
		<pubDate>Tue, 07 Sep 2010 21:31:31 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[Yep the title of this post is correct! With a little hacking to get around <a href="http://monotouch.net/Documentation/Limitations">MonoTouch Limitations</a> I've managed to shoe-horn Service Stack's HttpListener and host it inside of an iPhone with the help of <a href="http://monotouch.net/">MonoTouch</a>. Basically, in not so many words I made this happen:

<a href="http://ww2.servicestack.net/wp-uploads/2010/09/EmbeddedWebPage-large.png"><img class="alignnone size-full wp-image-418" title="HttpJsonWebServices" src="http://ww2.servicestack.net/wp-uploads/2010/09/HttpJsonWebServices.png" alt="" width="477" height="467" /></a>

Basically the above is the result of hosting a web server on your iPhone making it possible to view your iPhone content with any web browser. In a addition to a static HTTP server there is also an Embedded version of <a href="http://www.servicestack.net/">Service Stack</a> turning your iPhone into a Web Services server. This happens to be a pretty convenient way to get at your data. As a basic example I created a simple Web Service returning all the contacts in your iPhone Address book:

[csharp]
namespace EmbeddedServiceStack
{
	public class ContactsService : IService&lt;Contacts&gt;
	{
		//Singleton defined in AppHost, Injected by Funq IOC
		public ABAddressBook AddressBook { get; set; }

		public object Execute (Contacts request)
		{
			var response = new ContactsResponse();

			foreach(var person in AddressBook.GetPeople())
			{
				var emails = person.GetEmails().GetValues();
				response.Contacts.Add(new Contact {
					FirstName = person.FirstName,
					LastName = person.LastName,
					Email = emails.Length &gt; 0 ? emails[0] : null,
				});
			}

			return response;
		}
	}
}
[/csharp]

Which once you start the AppHost's HttpListener lets you view your data using REST-ful  HTTP requests like so:

<a href="http://ww2.servicestack.net/wp-uploads/2010/09/JsonXmlResults.png"><img class="alignnone size-full wp-image-420" title="JsonXmlResults" src="http://ww2.servicestack.net/wp-uploads/2010/09/JsonXmlResults.png" alt="" width="598" height="480" /></a>

Some of you might be thinking WTF dude why the hell would you want to do this to an iPhone?? Actually I did for a while too! However in a <a href="http://lists.ximian.com/pipermail/monotouch/2010-August/002101.html">recent thread on the mailing list</a> Miguel De Icaza actually identified some <a href="http://tirania.org/blog/archive/2005/Nov-27-1.html">useful use cases where this might be a good idea</a>.

For one reason you can sprinkle a little JavaScript in your HTML page to display the list of Contacts below:

<a href="http://ww2.servicestack.net/wp-uploads/2010/09/AjaxResultsOutput.png"><img class="alignnone size-full wp-image-421" title="AjaxResultsOutput" src="http://ww2.servicestack.net/wp-uploads/2010/09/AjaxResultsOutput.png" alt="" width="632" height="228" /></a>

Which granted doesn't look like much however this task is infinitely less tedious with JavaScript.

Having thought about for a little more I can think of a few more potential use-cases:
<ul>
	<li>Giving you more flexibility to access and export your iPhone's data without needing to use iTunes</li>
	<li>Develop PhoneGap-like iPhone apps without PhoneGap :-)</li>
	<li>Use a full-featured desktop browser to view your iPhone data rather than it's constrained mobile interface</li>
	<li>Access your iPhone from over the Internet (allowing async callback duplex requests)</li>
	<li>Provide easy 2-way communication between iPhone Apps</li>
</ul>

Other potential use-cases heard on the tweet vine:
<ul>
        <li>Mobile device management (Landesk like) and Software testing (<a href="http://twitter.com/itdnext">@itdnext</a>)</li>
</ul>  

<h2><strong>Developer Notes</strong></h2>
<h3><a href="http://ww2.servicestack.net/wp-uploads/2010/09/MonoTouch-Solution.png"><img class="alignleft size-full wp-image-438" style="margin: 0 10px 5px 0px;" title="MonoTouch-Solution" src="http://ww2.servicestack.net/wp-uploads/2010/09/MonoTouch-Solution.png" alt="" width="285" height="291" /></a>How the Web Server works?</h3>
Basically any url with a Web Service prefix is interpreted as a Web Service and delegated to Service Stack to process.

<p>
http://localhost:8080/<strong>Xml/</strong><br />
http://localhost:8080/<strong>Json/</strong><br />
http://localhost:8080/<strong>Jsv/</strong><br />
</p>

All other urls are treated like a standard HTTP GET request where it looks for a matching file in the Projects <strong>www/</strong> resource directory and simply copies it to the Response Output Stream. Requests that ends with a '/' (i.e. a directory path)  are treated like '/default.html'

Note: In order to have your static files packaged and deployed with your application you need to set the <a href="http://ww2.servicestack.net/wp-uploads/2010/09/BuildActionContent.png">'Build Action' to 'Content'</a> for each file.
Also if you don't see any contacts you need to use the Contact App in the iPhone simulator and add some in yourself.
<h3 style="clear: left;">MonoTouch Quirks</h3>
<a href="http://ww2.servicestack.net/wp-uploads/2010/09/BuildActionContent.png"></a>

Since I found the JsonDataContractSerializer in Mono to be unreliable I've had to write and included my own <a href="http://www.servicestack.net/mythz_blog/?p=344">Json Serializer</a> whose heavily reliance on generics requires some extra attention when running in an <strong>No JIT</strong> environment like MonoTouch. Basically we have to tell the MonoTouch compiler what concrete generic classes to generate - which we do by Registering all DTO's like so:

[csharp]
private void RegisterDtoTypes_RequiredWhenTheresNoJit()
{
	Register.Type&lt;Hello&gt;();
	Register.Type&lt;HelloResponse&gt;();
	Register.Type&lt;Contacts&gt;();
	Register.Type&lt;ContactsResponse&gt;();
	Register.Type&lt;Contact&gt;();
}
[/csharp]
<h2>Download the Example project</h2>
<div id="_mcePaste">For those interested, the above sample project and all the Embedded ServiceStack libraries required to build your own iPhone HTTP+Webservices solution is available at:</div>
<a href="http://servicestack.googlecode.com/files/MonoTouch-EmbeddedServiceStack.zip"><strong><span style="color: #0000ff;">http://servicestack.googlecode.com/files/MonoTouch-EmbeddedServiceStack.zip</span></strong></a>

Since I only have the trial version of MonoTouch I have only been able to verify that this works in the iPhone Simulator. So if anyone with the full version of MonoTouch gets this running on an iOS device - can you let me know. Feel free to file any issues you run into at the projects website: <a href="https://github.com/ServiceStack/MonoTouch.Examples/issues">http://code.google.com/p/servicestack/issues/list</a>

Happy Hacking!
<h3>Further Reading</h3>
A tutorial showing you how to create and call web services from MonoTouch is available here:
<a href="http://www.servicestack.net/monotouch/remote-info/">http://www.servicestack.net/monotouch/remote-info/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2010-09-08 00:31:31</wp:post_date>
		<wp:post_date_gmt>2010-09-07 21:31:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>http-web-services-server-hosted-in-an-iphone-with-monotouch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Redis vs RavenDB - Benchmarks for .NET Client NoSQL Solutions</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=474</link>
		<pubDate>Wed, 08 Sep 2010 20:20:14 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=474</guid>
		<description></description>
		<content:encoded><![CDATA[These <a href="http://www.servicestack.net/benchmarks/">Redis vs RavenDB benchmarks have been made into a bar chart</a> for a better visualization.

Seeing that <a href="http://code.google.com/p/redis/wiki/Redis_2_0_0_Changelog">Redis v2.0</a> has been just been released and Oren Eini (aka <a href="http://twitter.com/ayende">@ayende</a>) has just <a href="http://ayende.com/Blog/archive/2010/09/08/ravendb-performance-optimizations.aspx">checked in performance optimization improvements</a> that show a <strong>2x</strong> speed improvement for raw writes in RavenDB, I thought it was a good time to do a benchmark pitting these 2 popular NoSQL data stores against each other.
<h3><strong><a name="take2"></a><span style="font-weight: normal;">Benchmarks Take 2 - Measuring write performance</span></strong></h3>
For the best chance of an Apples to Apples comparison I just copied the RavenDB's benchmarks solution project and modified it slightly only to slot in the equivalent Redis operations. The modified solution is <a href="https://github.com/ServiceStack/ServiceStack.Benchmarks/blob/master/src/NoSqlPerformance/NoSqlPerformance.ConsoleApp/Program.cs">available here</a>. Redis was also configured to run in its 'most safest mode' where it keeps an append only transaction log with the <strong>fsync</strong> option so the operation does not complete until the transaction log entry is written to disk. This is so we can get Redis to closely match RavenDB's default behaviour. Enabling this behaviour in Redis is simply a matter of uncommenting the lines below in redis.conf:
<blockquote>appendonly yes
appendfsync always</blockquote>
To use this new configuration simply run <strong>'redis-server.exe  /path/to/redis.conf'</strong> on the command line.
Other changes I made for these new set of benchmarks was to remove batching from the Redis benchmark since its an accidental complexity not required or useful for the Redis Client.

Here are the benchmarks with these new changes in place:
<a href="http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-appendfsync.png"><img class="alignnone size-full wp-image-536" title="benchmarks-appendfsync" src="http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-appendfsync.png" alt="" width="668" height="331" /></a>

Which for this scenario show that:
<h2 style="color: #093; padding: 0 5px;">Redis is 11.75x faster than RavenDB</h2>
Note: The benchmarks here are of Redis running on a Windows Server through the Linux API emulation layer - <a href="http://www.cygwin.com/">Cygwin</a>. Expect better results when running Redis on Unix servers where it is actively developed and optimized for. It is understood that the Cygwin version of redis-server is <strong>4-10x</strong> slower than the native Linux version so expect results to be much better in production.

I attribute the large discrepancy between Redis and RavenDB due to the fact that Redis doesn't use batches so only pays the 'fsync penalty' once instead of once per batch.

The '<strong>appendfsync always</strong>' mode is not an optimal configuration for a single process since Redis has to block to wait for the transaction log entry to be written to disk, a more sane configuration would be '<strong>appendfsync everysec</strong>' which writes to the transaction log asynchronously. Running the same benchmark using the default configuration yields the following results:

<a href="http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-no-append.png"><img class="alignnone size-full wp-image-537" title="benchmarks-no-append" src="http://ww2.servicestack.net/wp-uploads/2010/09/benchmarks-no-append.png" alt="" width="668" height="331" /></a>

Which is a 39% improvement over the previous benchmarks where now:
<h2 style="color: #093; padding: 0 5px;">Redis is 16.9x faster than RavenDB</h2>
Which unless I hear otherwise? should make this the fastest NoSQL solution available for .NET or MONO clients.

Measuring raw write performance using Redis is a little unfair since it has a batchful operation <a href="http://code.google.com/p/redis/wiki/MsetCommand">MSET</a> specifically optimized for this task. But that is just good practice, whenever you cross a process boundary you should be batching requests to minimize the number of your calls minimizing latency and maximizing performance.

Even though performance is important, its not the only metric when deciding which NoSQL database to use. If you have a lot of querying and reporting requirements that you don't know up front then a document database like <a href="http://ravendb.net/">RavenDB</a>, <a href="http://www.mongodb.org/">MongoDB</a> or <a href="http://couchdb.apache.org/">CouchDB</a> is a better choice. Likewise if you have minimal querying requirements and performance is important than you would be better suited to using <a href="http://code.google.com/p/redis/">Redis</a> - either way having a healthy array of vibrant choices available benefits everybody.
<h3>Notes about these benchmarks</h3>
Since these benchmarks just writes entities in large batches to a local Redis or RavenDB instance using a single client, I don't consider this to be indicative of a *real-world* test rather a measure is raw write performance, i.e. How fast each client can persist 5,163 entities in their respective datastore.

A better *real-world* test would be one that accesses the server over the network using multiple concurrent clients that were benchmarking typical usage of a real-world application rather than just raw writes as done here.
<h3><span style="font-weight: normal;">So why is Redis so fast?</span></h3>
Based on the comments below there appears to be some confusion as to what Redis is and how it works. Redis is a high-performance data structures server written in C that operates predominantly in-memory and routinely persists to disk and maintains an Append-only transaction log file for data integrity - both of which are configurable.

For redundancy each instance has built-in support for replication so you can turn any redis instance into a slave of another, which can also be trivially configured at runtime. It also features its own Virtual Machine implementation so if your dataset exceeds your available memory, un-frequented values are swapped out to disk whilst the hot values remain in memory.

Like other high-performance network servers e.g. <a href="http://wiki.nginx.org/Main">Nginx</a> (the worlds fastest HTTP server), <a href="http://nodejs.org/">Node.js</a> (a popular, very efficient web framework for JavaScript), <a href="http://memcached.org/">Memcached</a>, etc it achieves maximum efficiency by having each Redis instance run in a single process where all IO is asynchronous and no time is wasted context-switching between threads. To learn more about this architecture, check out Douglas Crockford (of JavaScript and JSON fame) imformative speech <a href="http://www.yuiblog.com/blog/2010/08/30/yui-theater-douglas-crockford-crockford-on-javascript-scene-6-loopage-52-min/">comparing event-loops vs threading</a> for simulating concurrency.

It achieves concurrency by being really fast and achieves integrity by having all operations atomic. You are not just limited to the available transactions either as you can compose any combination of Redis commands together and process them atomically in a single transaction.

Effectively if you wanted to create the fastest NoSQL data store possible you would design it just like Redis and Memcached. Big kudos to <a href="http://twitter.com/antirez">@antirez</a> for his continued relentless pursuit of optimizations resulting in Redis's stellar performance.
<h4>The Redis Client,  JSON and the Redis Admin UI</h4>
Behind the scenes the Redis Client automatically stores the entities as JSON string values in Redis. Thanks to the ubiquitous nature of JSON I was easily able to develop a <a href="http://www.servicestack.net/mythz_blog/?p=381">Redis Admin UI</a> which provides a quick way to navigate and introspect your data in Redis. The Redis Admin UI runs on both .NET and Linux using Mono - A live demo is <a href="http://www.servicestack.net/RedisAdminUI/AjaxClient/#">available here</a>.
<h2>Download Benchmarks</h2>
The benchmarks (minus the dependencies) are available in <a href="https://github.com/ServiceStack/ServiceStack.Benchmarks/blob/master/src/NoSqlPerformance/">ServiceStack's svn repo</a>.

I also have a complete download with including all dependencies available here:
<strong><a href="http://servicestack.googlecode.com/files/NoSqlPerformance.zip">http://servicestack.googlecode.com/files/NoSqlPerformance.zip</a> (18MB)</strong>
<h2>Gaining in Popularity</h2>
Redis is sponsored by VMWare and has a vibrant pro-community behind it and been gaining a lot of popularity lately. Already with a library for <a href="http://code.google.com/p/redis/wiki/SupportedLanguages">every popular language in active use today</a>, it is gaining momentum outside its Linux roots with <a href="http://twitter.com/antirez/status/24223669996">twitter now starting to make use of it</a> as well as popular .NET shops like the <a href="http://twitter.com/codinghorror/status/22417440038">StackOverflow team taking advantage of it</a>.

Unlike <a href="http://ravendb.net/">RavenDB</a> and <a href="http://www.mongodb.org/">MongoDB</a> which are document-orientated data stores, <a href="http://code.google.com/p/redis/">Redis</a> is a <strong>'data structures'</strong> server which although lacks some of the native querying functionalities found in Document DBs, encourage you to leverage its comp-sci data structures to maintain your own custom indexes to satisfy all your querying needs.
<h2>Try Redis in .NET</h2>
If these results have piqued your interest in Redis I invite you to try it out. If you don't have a linux server handy, you can still get started by trying one of the <a href="http://code.google.com/p/servicestack/wiki/RedisWindowsDownload">windows server builds</a>.

Included with ServiceStack is a <a href="https://github.com/ServiceStack/ServiceStack.Redis">feature-rich C# client</a> which provides a familiar and easy to use C# API which like the rest of Service Stack runs on .NET and Linux with Mono.
<h4>Useful resources for using the C# .NET Client</h4>
I also have some useful documentation to help you get started:
- <a href="https://github.com/ServiceStack/ServiceStack.Redis/wiki/DesigningNoSqlDatabase">Designing a NoSQL Database using Redis</a>
+ <a href="https://github.com/ServiceStack/ServiceStack.Redis/blob/master/tests/ServiceStack.Redis.Tests/Examples/BestPractice/BlogPostBestPractice.cs">A refactored example showing how to use Redis behind a repository pattern</a>
- <a href="https://github.com/ServiceStack/ServiceStack.Redis/wiki/MigrationsUsingSchemalessNoSql">Painless data migrations with schema-less NoSQL datastores and Redis</a>
- <a href="https://github.com/ServiceStack/ServiceStack.Redis/wiki/RedisTransactions">How to create custom atomic operations in Redis</a>
- <a href="https://github.com/ServiceStack/ServiceStack.Redis/wiki/RedisPubSub">Publish/Subscribe messaging pattern in Redis</a>
- <a href="https://github.com/ServiceStack/ServiceStack.Redis/wiki/RedisLocks">Achieving High Performance, Distributed Locking with Redis</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date>2010-09-08 23:20:14</wp:post_date>
		<wp:post_date_gmt>2010-09-08 20:20:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>redis-vs-ravendb-benchmarks-for-net-client-nosql-options</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1379</wp:comment_id>
			<wp:comment_author><![CDATA[Jeremy]]></wp:comment_author>
			<wp:comment_author_email>jeremy@jeremygray.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 03:19:07</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 00:19:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Of course redis is faster, it is essentially a main memory database whereas raven is essentially not. Horses for courses!

I appreciate your post and your contribution of code but I would suggest that when benchmarking apples and oranges it would be advisable to declare them as such.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1380</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 07:54:14</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 04:54:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I already mentioned that Redis and RavenDB/MongoDB differs. Based on your comment I've since added the 'Why is Redis so fast?' section explaining the difference in more detail.

Although Redis is obviously going to be faster for you and me - this is not the general consensus in the .NET community and these results are actually provide informative results of the difference. 

They may not be the same product/technology but they both look to serve a lot of the same use-cases. Obviously I choose to use Redis where RavenDB would be an equally good fit. The fact that we have choices benefits everybody.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1381</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan Heath]]></wp:comment_author>
			<wp:comment_author_email>ryan.q.heath@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 10:45:53</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 07:45:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dennis, you seem to have copyed over the bug Simon Labrecque is talking about.
http://ayende.com/Blog/archive/2010/08/28/ravendb-performance-optimizations.aspx#41983

Does it make any difference when you reset the batch counter when 128 is reached?

// Ryan]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1382</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 11:12:24</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 08:12:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The 128 batch size was present in the original benchmarks so I just left it as is. I'm not sure why Oren selected the 128 batch size but I imagine that since Raven uses a Session/Unit of work client model that it would have a positive impact on performance. 

The 128 batch size is not needed by the Redis client and in fact hurts performance since it results in more network calls to achieve the same result.

EDIT:
Actually I see the bug now, I'll re-run the benchmarks with the fix when I get home.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1383</wp:comment_id>
			<wp:comment_author><![CDATA[Ayende Rahien]]></wp:comment_author>
			<wp:comment_author_email>Ayende@ayende.com</wp:comment_author_email>
			<wp:comment_author_url>http://ayende.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 11:39:01</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 08:39:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Demis,
_Did_ you configure your Redis server to write to disk on every operation (to match more closely what RavenDB is doing)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1384</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 11:44:30</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 08:44:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The benchmarks are both using the standard configuration for both servers, so no. 

I will re-run the benchmarks with the bug fix and configure it to write on every operation when I get home tonight.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1385</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-10 01:33:25</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 22:33:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[New benchmarks are in, I removed some of the overheads imposed on the Redis Client i.e. active entity id tracking and batching then enabled the appendonly transaction log with 'fsync always' configuration.

The new benchmarks show Redis is 11.75x faster than RavenDB with this configuration.

If you disable the append only file Redis becomes 16.9x faster than RavenDB.

Note as I'm using the batchful MSET operation behind the scenes, the fsync penalty is only taken once.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1386</wp:comment_id>
			<wp:comment_author><![CDATA[NoSQL Daily &#8211; Sun Sep 12 &rsaquo; PHP App Engine]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://php-app-engine.com/2010/nosql/nosql-daily-sun-sep-12/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-12 08:37:44</wp:comment_date>
			<wp:comment_date_gmt>2010-09-12 05:37:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Redis vs RavenDB &#8211; Benchmarks for .NET Client NoSQL Solutions &raquo; Tales from behind the br... [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The App Store bubble: How much does an App earn today?</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=572</link>
		<pubDate>Wed, 15 Sep 2010 04:37:49 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=572</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>The rise and fall of Internet riches</h2>
<a href="http://ww2.servicestack.net/wp-uploads/2010/09/gold_rush.jpeg"><img class="size-full wp-image-579 alignleft" style="margin-left: 5px; margin-right: 5px;" title="gold_rush" src="http://ww2.servicestack.net/wp-uploads/2010/09/gold_rush.jpeg" alt="" width="100" height="164" /></a>Within the last 15 years on the rise of the Internet we have seen many a phenomena gracing technology circles promising great riches to early adopters and investors. It first started out with a gold rush land grab for domain names where in this era a 3-letter domain name like <strong>sex.com</strong> was able to earn millions a year just by providing a holding page hosting adult-related advertising banners and was eventually sold for <strong>14M</strong>.  Then came the <a href="http://en.wikipedia.org/wiki/Dot-com_company">dotcom</a> boom where anything Internet related were the most sought after prize on the stock market where traffic and the size of your user base was the hard currency of the day and was rewarded with over-inflated valuations never mind that many had no visible path to profitability. The preferred sport of many startups at the time was who had the highest burn-rate which were fueled by expensive <a href="http://en.wikipedia.org/wiki/Aeron_chair">Aeron chairs</a> and Sparc servers.
<h3>The Bigger <em>They Come</em>, The Harder <em>They Fall</em></h3>
<a href="http://ww2.servicestack.net/wp-uploads/2010/09/DotComCrash.png"><img class="size-full wp-image-580 alignright" style="margin-left: 5px; margin-right: 5px;" title="DotComCrash" src="http://ww2.servicestack.net/wp-uploads/2010/09/DotComCrash.png" alt="" width="193" height="195" /></a>But just as quick as the riches came to dotcom companies, they vanished again almost entirely within one weekend (which this author remembers quite well as an eager investor on the friday before <a href="http://en.wikipedia.org/wiki/Black_Monday_(1987)">black monday</a>). Eventually the market corrected itself and only businesses with viable business models were the focus of cautious investors whose fingers were still smarting from the <a href="http://en.wikipedia.org/wiki/Dot-com_bubble">bursting of their dotcom</a> investments.

In time faith was restored in the online advertising market spurred largely by Google's foray into the area of targeted advertising. Confidence was restored in Internet companies and a smaller bubble is starting to emerge that many casual observers are labelling <a href="http://en.wikipedia.org/wiki/Web_2.0">Web 2.0</a>.
<h2>Cometh the App Store, Cometh the riches again</h2>
Out of the all the events to show up on the technology radar recently, none has been as exciting and show as much promise as the introduction of the <a href="http://en.wikipedia.org/wiki/App_Store">App Store</a> by Apple. With the introduction of their revolutionary smart phone, Apple for the first time put the power of a desktop operating system in the palms of technophiles (with above-average discretionary incomes). Although its potential wasn't realized until Apple put the first version of the iPhone SDK in developers hands and opened the much publicized App Store on July 10, 2008. Within months of its introduction stories or riches started to be told of hobbyist programmers earning <a href="http://appadvice.com/appnn/2009/02/ishoot-developer-makes-600000-in-one-month/">$600,000 in just 1-month</a> enough to quit their full-time job to pursue a lucrative career in developing mobile apps for the App store. Soon enough a new economy was created and in pretty short order a growing number of developers made it to the <a href="http://www.zdnet.com/blog/apple/the-app-store-millionaire-club/2649">App store millionaire club</a>. This brings us to where we are today where as of September 1, 2010 there were 250,000 third-party applications with over 6.5 billion total downloads generating its developers over USD $1 billion in revenue.
<h3>The reports of App Stores death are greatly exaggerated</h3>
<a href="http://ww2.servicestack.net/wp-uploads/2010/09/ipod1letsrock8.jpeg"><img class="alignright size-full wp-image-581" style="margin-left: 5px; margin-right: 5px;" title="ipod1letsrock8" src="http://ww2.servicestack.net/wp-uploads/2010/09/ipod1letsrock8.jpeg" alt="" width="309" height="136" /></a>With now over 250,000 applications available for sale and many of them free many people have chimed in with their opinions some proclaiming the <a href="http://www.fastcompany.com/1684020/the-great-app-bubble">app bubble is bursting</a> and the path to easy riches is over while others maintain the App store maintains a fruitful future. Unfortunately the ubiquity of the Internet has made opinions cheap and plentiful where it looks like anyone with a keyboard can pluck 2 numbers out of the air to show a downward trend.
<h3>An App Store Developers story...</h3>
As a developer on the App Store I wanted to weigh in on the state of the App store with some empirical evidence of my own as it evolves. My story dates back 18 months ago when it took me <strong>3 weeks to learn</strong> enough Objective-C to submit <a href="http://www.ipockettranslator.com/">my first app</a>. Within a couple of weeks, inspired by the success of <a href="http://en.wikipedia.org/wiki/IFart_Mobile">iFart apps</a> I put aside my morals and pursuit of software excellence and ended up submitting my own <a href="http://www.ipockettranslator.com/worlds-smallest-violin">cookie</a> <a href="http://www.ipockettranslator.com/sad-trombone">cutter</a> <a href="http://www.ipockettranslator.com/instant-rimshot">apps</a>. Although my own fart apps didn't do nearly as well as notable others <a href="http://www.ipockettranslator.com/">my translator app</a> earned a noticeable side income where it managed to pay off its development effort many times over. Unfortunately around this time I joined my <a href="http://www.mflow.com">first startup</a> and between the all nighters and 12 hour work days my free time was sapped and my once App making machine days were over. That is until my recent resignation which saw the return of my free time and I was finally able to open xcode again after an 18 month hiatus. After tying up some <a href="http://www.servicestack.net/mythz_blog/?p=344">loose</a> <a href="http://www.servicestack.net/mythz_blog/?p=381">ends</a> on my <a href="http://code.google.com/p/servicestack/">open source project</a> I got to work on a new App.
<h2>How much does an App built today earn?</h2>
So that Non-App developers can get an idea of what they can expect when developing an App today, I'm going to be completely open and transparent about the development and the financial results of my latest App that has just been approved today (14th Sept UK). I will keep this blog updated with live financial results as I get them.
<h3>Coming up with an idea for an App</h3>
<a href="http://itunes.apple.com/us/app/word-mate/id390656966?mt=8"><img class="alignleft size-full wp-image-578" style="margin-left: 10px; margin-right: 10px;" title="Word Mate icon" src="http://ww2.servicestack.net/wp-uploads/2010/09/WordMate_175x175-75.jpeg" alt="" width="175" height="175" /></a>Developing a successful app in this age can be a tricky balance to get right where the subject and appeal of your app is every much as important as its features and quality. Because of this, I'm not a true believer of investing a lot of time in developing an App before I see some ROI. So I'm always on the lookout for small, quick wins with short development cycles. It just so happen that at the time I was seeking inspiration for my new app, I also spent a large portion of my free time playing <a href="http://itunes.apple.com/us/app/words-with-friends/id322852954?mt=8">Words with friends</a> - an enjoyable, network-enabled SCRABBLE® clone. Although many would see my poor scrabbling skills the result of a long absence from participating in any academic curriculum, I saw it as an opportunity to build an App to improve my scrabble game! (read: cheat) After a quick sanity check to make sure there weren't a hundred free apps already available on the App store that did the same thing: <a href="http://itunes.apple.com/us/app/word-mate/id390656966?mt=8">Word Mate</a> was born - a collection of word finding utilities that help you play SCRABBLE® like a computer :-)
<h3>Development efforts and total cost</h3>
<a href="http://itunes.apple.com/us/app/word-mate/id390656966?mt=8">Word Mate</a> took me roughly a <strong>week full-time to develop</strong> which included downloading all the latest SDK's and tools, a bit of reading designed to re-ignite my love with the Objective-C language and its Cocoa inspired frameworks as well as creating all the App and website graphics. As the <a href="http://www.ipockettranslator.com/wordmate">website</a> is freely hosted on <a href="http://code.google.com/appengine/">Google App Engine</a> and the only <a href="http://glyphish.com/">3rd party icons</a> used were free, no costs were incurred into making this app other than the <a href="http://developer.apple.com/programs/ios/">$99/year iOS Developer Program fee</a> and my own time.
<h3>App Store submission process</h3>
Although the language and tools haven't improved much, the app submission and code-signing process has improved significantly. When it was first released, code-signing your app so it can be submitted to the App store was considered a black-art which thanks to my careful literal following of every word in an online tutorial caused me to be stuck with the embarrassing title of <em>'iPhone Developer: Demis Bellot'</em> for the name of my developer profile. Anyway I submitted my app on the<strong> 1st September </strong>and it was only approved at midnight on the <strong>13th September</strong>. Where the QA staff that Mr Jobs says approves most apps within 7 days are? I don't know - I've never had an any of my apps approved within <strong>2 weeks</strong>.

Regardless today will be my first full day on the App Store market. Like all my apps, <strong>Word Mate</strong> will be free for the first week. I like to do this as it gives a chance for my friends and anyone else who wants one a chance to download my app for free. Making an App for free and then charging for it will also give you an idea of the <strong>Free vs Premium</strong> download ratio. From the experience of my first app the difference was about <strong>6-9%</strong> where for every 100 free apps that were downloaded (when it was free) only 6-9 were paid for (when I started charging USD $0.99 for it). It will be interesting to see if that trends continues with Word Mate.
<h2><a name="results"></a>Live Financial Results</h2>
I'm going to maintain a <strong>live list</strong> of results on the table below, so you can check back on this post to see how it develops. <a href="http://itunesconnect.apple.com">iTunes Connect</a> (where we login to get our sales reports) doesn't publish daily results until 12pm GMT the next day. You can follow <a href="http://twitter.com/demisbellot">@demisbellot</a> on twitter to find out as soon as the latest results have been added.
<table>
<thead>
<tr>
<th>Period Ending</th>
<th>Cost</th>
<th>Qty Sold</th>
<th>Earnings</th>
</tr>
</thead>
<tbody>
<tr>
<td>14th Sept</td>
<td>$0.00</td>
<td>118</td>
<td>$0.00</td>
</tr>
<tr>
<td>15th Sept</td>
<td>$0.00</td>
<td>118</td>
<td>$0.00</td>
</tr>
<tr>
<td>16th Sept</td>
<td>$0.00</td>
<td>41</td>
<td>$0.00</td>
</tr>
<tr>
<td>17th Sept</td>
<td>$0.00</td>
<td>28</td>
<td>$0.00</td>
</tr>
<tr>
<td>18th Sept</td>
<td>$0.00</td>
<td>24</td>
<td>$0.00</td>
</tr>
<tr>
<td>19th Sept</td>
<td>$0.00</td>
<td>21</td>
<td>$0.00</td>
</tr>
<tr>
<td>20th Sept</td>
<td>$0.99</td>
<td>15 free/1</td>
<td>$0.99</td>
</tr>
<tr>
<td>21st Sept</td>
<td>$0.99</td>
<td>1</td>
<td>$0.99</td>
</tr>
<tr>
<td>22nd Sept</td>
<td>$0.99</td>
<td>0</td>
<td>$0.00</td>
</tr>
<tr>
<td>23rd Sept</td>
<td>$0.99</td>
<td>2</td>
<td>$1.98</td>
</tr>
<tr>
<td>20-26th Sept</td>
<td>$0.99</td>
<td>4</td>
<td>$3.96</td>
</tr>
<tr>
<td>27 Sept-3rd Oct</td>
<td>$0.99</td>
<td>5</td>
<td>$4.95</td>
</tr>
<tr>
<td>4th-10th Oct</td>
<td>$0.99</td>
<td>2</td>
<td>$1.98</td>
</tr>
<tr>
<td>11th-17th Oct</td>
<td>$0.99</td>
<td>3</td>
<td>$2.97</td>
</tr>
<tr>
<td>18th-24th Oct</td>
<td>$0.99</td>
<td>2</td>
<td>$1.98</td>
</tr>
<tr>
<td>25th-31st Oct</td>
<td>$0.99</td>
<td>5</td>
<td>$4.95</td>
</tr>
<tr>
<td><strong>1st-28th Nov</strong></td>
<td><strong>$0.99</strong></td>
<td><strong>5</strong></td>
<td><strong>$4.95</strong></td>
</tr>
</tbody>
</table>
*NOTE: <a href="http://itunes.apple.com/us/app/word-mate/id390656966?mt=8">Word Mate</a> will be free until 20 Sept 2010, so if you think you might find this app useful now would be a good time to get it for free :-)
<h3>Follow the conversation</h3>
A discussion thread has started in hacker news which you can get involved in at:
<ul>
	<li><a href="http://news.ycombinator.com/item?id=1694752">http://news.ycombinator.com/item?id=1694752</a></li>
</ul>
SCRABBLE® is a registered trademark of Hasbro, Inc. in the United States and Canada, and Mattel, inc. elsewhere. I'm not affiliated with either company.

<strong>Update 23/09/210</strong>

It's just come to my attention that I may have stuffed up the SEO of my app in the App Store as Word Mate can't be found with the words 'Word Finder' or 'Word Cheat'  2 of the most popular searches for finding like apps. Unfortunately Apple wont let you change it after you've added it so I'm going to have to submit a new app. Unfortunately SEO is just as important as having a quality app as if users can't find it, they can't buy it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date>2010-09-15 07:37:49</wp:post_date>
		<wp:post_date_gmt>2010-09-15 04:37:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>has-the-app-bubble-burst-how-much-does-an-app-earn-today</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1398</wp:comment_id>
			<wp:comment_author><![CDATA[David Kassa]]></wp:comment_author>
			<wp:comment_author_email>david.kassa@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.davidkassa.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 17:53:53</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 14:53:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been thinking about jumping into the App market but also have concerns about missing the bubble. This information will be great to have. Thanks for providing it!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1399</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Martin]]></wp:comment_author>
			<wp:comment_author_email>tim_nitram@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.flakasoft.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 20:48:26</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 17:48:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great insights, nice to hear another developer's insights.  This is also a brilliant marketing campaign for your new app! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1400</wp:comment_id>
			<wp:comment_author><![CDATA[bILLY]]></wp:comment_author>
			<wp:comment_author_email>mbzastava@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 21:32:59</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 18:32:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[another bubble? can i sell put options on it?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1401</wp:comment_id>
			<wp:comment_author><![CDATA[David Koh]]></wp:comment_author>
			<wp:comment_author_email>davidkohcw@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://investordavid.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 13:22:23</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 10:22:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for making it free, going to grab it first before it becomes a paid app :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1402</wp:comment_id>
			<wp:comment_author><![CDATA[Ed]]></wp:comment_author>
			<wp:comment_author_email>epo@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 16:00:02</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 13:00:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for posting this, of course, making it known that the app will be chargeable after a week will in itself distort the download figures]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1403</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Williamson]]></wp:comment_author>
			<wp:comment_author_email>dawsdesign@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://appdelegateinc.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-09-23 16:00:26</wp:comment_date>
			<wp:comment_date_gmt>2010-09-23 13:00:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can usually see the reports between 9am-12pm the following day...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1404</wp:comment_id>
			<wp:comment_author><![CDATA[dan]]></wp:comment_author>
			<wp:comment_author_email>iphonecheating@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-09 11:32:56</wp:comment_date>
			<wp:comment_date_gmt>2010-10-09 08:32:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can you please post the "27 Sept-3rd Oct" income?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1405</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-09 12:52:22</wp:comment_date>
			<wp:comment_date_gmt>2010-10-09 09:52:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Done :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1404</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1406</wp:comment_id>
			<wp:comment_author><![CDATA[matt dunhill]]></wp:comment_author>
			<wp:comment_author_email>mattd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-24 21:51:50</wp:comment_date>
			<wp:comment_date_gmt>2010-10-24 18:51:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello there,

Hope I ain't asking too much, but could you please update the income for the current month?
Thanks in advanced,

Matt D.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1407</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-10-24 22:25:12</wp:comment_date>
			<wp:comment_date_gmt>2010-10-24 19:25:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt, I've updated it with the latest results. The results have been pretty disappointing lately which is why I haven't been tracking them. 

I still need to update the keywords for better SEO in the App Store but haven't found the time to do it yet.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1408</wp:comment_id>
			<wp:comment_author><![CDATA[Joshua]]></wp:comment_author>
			<wp:comment_author_email>jshernandez81@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-12-04 03:23:33</wp:comment_date>
			<wp:comment_date_gmt>2010-12-04 00:23:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi mythz, could you please post the income for the period Nov 1 to Nov 30?

Thanks
Joshua]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1409</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-12-05 16:20:53</wp:comment_date>
			<wp:comment_date_gmt>2010-12-05 13:20:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Joshua,

The sales for 'Word Mate' are basically non-existent, by far my worse performing app. 
I've updated it to show I only got 5 for the entire month of November.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1408</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1410</wp:comment_id>
			<wp:comment_author><![CDATA[Andrei Potorac]]></wp:comment_author>
			<wp:comment_author_email>andrei_potorac@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.andreipotorac.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-01-10 19:53:22</wp:comment_date>
			<wp:comment_date_gmt>2011-01-10 16:53:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So this is what the most apps do, right? Not too promising. :-(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1411</wp:comment_id>
			<wp:comment_author><![CDATA[Claire]]></wp:comment_author>
			<wp:comment_author_email>claire.o.chai@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-05-09 10:04:27</wp:comment_date>
			<wp:comment_date_gmt>2011-05-09 07:04:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for posting! Interesting info... about to burst my bubble of creating an app. Still, I'll give it a shot as I think it's a useful tool at least. 
Are you still developing more apps then?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1412</wp:comment_id>
			<wp:comment_author><![CDATA[mythz]]></wp:comment_author>
			<wp:comment_author_email>demis.bellot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://code.google.com/p/servicestack</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-05-17 20:47:36</wp:comment_date>
			<wp:comment_date_gmt>2011-05-17 17:47:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Claire, 

I haven't been developing many apps lately since between working for a startup and my Open Source efforts I haven't had any free time.
But it looks like I'm running into some free time in the near future so I will be picking it back up again!

Good luck with your efforts :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1411</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>REST Media Types, SOAP, Heavy frameworks and Literate Programming</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=665</link>
		<pubDate>Sun, 17 Apr 2011 18:31:51 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=665</guid>
		<description></description>
		<content:encoded><![CDATA[Obviously the title of this post doesn't make sense to be all in same article, yet I've still managed to carry an underlying theme interlinking the above topics : -). Effectively I'm hoping to encourage the <strong>pursuit of end user value</strong> over and above all else.
<h2><span>Disadvantages of Custom Mediatypes</span></h2>
Although I'm going to focus on Custom Media Types in this instance (since it reflects my most recent public discussion), the essence of my argument can be applied to many other areas, protocols, libraries, patterns, etc being advocated in software development today.

The main problem I have with Custom Media Types, is the same I have with any other technologies <strong>asking me to devote more effort</strong> to produce to what I ultimately conceive as a less valueable output. Where the only time when it proves to be beneficial over raw canonical data forms is when the consuming client has built-in support for the custom media format saving the integration point since the client already understands how to process the response.

Although this post may contain a critique on certain facets of REST, I'm by no means advocating against it as overall it's a far superior more elegant approach to designing services than the SOAP and WS-* stack (which I'm happy to see now starting to slowly fade out of existence). In this light I instead consider myself more a devils advocate providing critique on parts which provide minimal value yet require significant more effort to implement. So consider this a public service announcement as due to the taboo nature of REST you're unlikely to find many posts like this critiquing it which is partly my motivation for writing it.

There are times when custom mediatypes are useful however what's not being discussed in these cases (and what I continue to have issue with) is the amount of airtime given to what I consider a <strong>small % of applicability</strong> and real-world use. This has a tendency to result in a significant body of knowledge flowing around new developers information streams and if they didn't know any better would think that this is the right way to go about developing web services. What we're going to end up with are solutions looking for problems and a swath of invented custom formats - more then there deserves to be. Given the unhealthy amount of coverage given to REST frameworks used to flex different parts of REST theory, I fully expect solutions developed just because developers want to obtain full-compliance REST reputation badges implementing non-trivial <strong>CONNEG + Custom Media Types</strong> multi-hop solutions when far simpler, more direct solutions can elegantly solve the same problem space. Of course I fully expect people to argue that a superior solution can be achieved even with full-compliance of REST <strong>HATEOS restrictions</strong>, and I simply want to re-iterate for developers to consider, to understand and weigh all options, and that <strong>Getting Things Done</strong> in the minimum LOC and effort possible is also a worthy goal to strive for, as when we get older, time becomes more precious and being able to hone this skill will ultimately pay dividends later : -)
<h4>Web Services should be optimized for Data Formats</h4>
In my 10+ years as a backend systems developer, I can count on one hand the number of times when creating custom media types has proven beneficial or was a customer requirement. The majority of my time is spent developing systems with a primary purpose of servicing clients, thick, thin or otherwise. In my web services world view, not all media types are created equal and its the popular data formats <strong>XML, JSON, SOAP, CSV</strong>, etc  that are ultimately exposed by web services and consumed by its clients. It's these formats I believe Web Service Frameworks should be optimized for as they provide the most utility, re-usability and value.

As expected my real-world experience is also the primary influence on <a href="http://www.servicestack.net">http://www.servicestack.net</a> where the above data formats are built-in and are configured to work with all your services automatically. Your C# logic remains DRY and is fused with the expected HTTP result providing a free logic block to be able to return any C# POCO or throw any C# Exception. At the same time making all services available on all above data formats. These are the traits I've found to be the most productive and ultimately provide a friction-free development experience.

The other notable mediatypes which are actually more prominent than web services data formats are the media types understood by web browsers. By this I mean HTML/CSS/JavaScript /img/vids/etc. The development of web sites have long been the focus for most development platforms where websites have now become the most important deployment target for most new applications. These web formats are first class formats where entire web frameworks are built around and optimized for, which you should be using instead of Web Service Frameworks.
<h3>Custom formats are still important, just not of primary importance</h3>
Despite my criticisms, I still think the production of custom formats is important<strong> when it's required</strong>, and <a href="http://www.servicestack.net">ServiceStack</a> actually has very good support for it with one of the <a href="http://www.servicestack.net/ServiceStack.Northwind/vcard-format.htm">DRY-est API's</a> you're likely to see in accomplishing this task. I just don't personally give prominence to this functionality since it's <strong>not where I believe web service developers should be speding their time</strong> in implementing solutions with. Although for the interested this is how ServiceStack implements the <a href="http://www.servicestack.net/ServiceStack.Northwind/vcard-format.htm">VCard Format</a>. Where its non-invasive layered API makes it trivial to support any custom media format that is well supported since its the same integrated pipeline the newer built-in <a href="https://github.com/ServiceStack/ServiceStack/wiki/HTML5ReportFormat">HTML</a> and <a href="https://github.com/ServiceStack/ServiceStack/wiki/ServiceStack-CSV-Format">CSV</a> formats are using.

Note: at the lowest HTTP API level in every web framework (e.g. IHttpHandler, HttpServletRequest, etc) this has always been possible, so all web service frameworks are showcasing its high-level API to achieve this end. Some frameworks make this functionality available using APIs mapping directly to REST concepts, ServiceStack however prefers to make it as DRY, typed and expressive as possible.
<h3>Data formats the preferred choice in SOA systems</h3>
A key objective in SOA systems and web services today is to <strong>servicify and free</strong> your data making it as universally available and re-usable as possible. Given these objectives it is common to see SOA systems today make use of <strong>HTTP </strong>for their transport protocol and utilizing either <strong>XML </strong>or <strong>JSON </strong>for their data formats. This is largely because the data formats contain the essence of your data where should they need to at a later date, your clients can use this canonical form of your data and create the custom media types themselves. The same is not true the other way around where if the only format your service provided were custom media formats (e.g. the VCard format) it not only takes much more effort to extract the raw data, but the specific media type will only contain the subset of your contact data as supported by the format. So if your developers only have an option to deliver 1 format for your resource, you're best to make it a raw data format since the development of other formats can still be achieved by your clients long after the developers have moved on.

In summary you should only be accessing the specific VCard format (or other specific mediatype) <strong>only </strong>if your client already has built-in support for it. Since it requires more effort on the client and server to implement and access otherwise.

It is therefore important to remain vigilant and keep the <strong>80/20 Rule </strong>in mind (or in the case of custom media formats the <strong>95/5</strong> rule : -) and treat custom media types as <strong>complimentary formats</strong> that you should <strong>only add in addition</strong> to your data formats. When development of your SOA services have finished you want to ensure it's data is as accessible and re-usable as possible in the formats that provide the most utility to your current and future consumers of your services, i.e. the data formats.
<h2>The guiding value light</h2>
With the current demise of <a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a>, <a href="http://en.wikipedia.org/wiki/REST">REST</a> is making it's way back into the forefront of IT minds.
The value of REST has always been available in HTTP/1.1 since its inception but between the marketing and committees pushing their own agendas, the Enterprise development world was largely oblivious to its possibilities as they were taught if your data didn't come in a XML decorated envelope it's not a real web service.

Its come-back can largely be attributed to developers and companies ignoring the blind advice of big iron Company's and instead discovered that they are better able to provide value by embracing the inherent properties in HTTP rather than the friction-encumbered dev experience of building SOAP web services.

Displacing big iron-backed monolithic standards is hard, it takes courageous companies willing to discard current enterprise teachings who are able to re-think the essence of what they're trying to achieve.
<h3>Focusing on max value and min effort</h3>
It's therefore important we don't repeat the same mistakes and don't lose sight of what the value proposition on the technologies we ultimately choose to adopt, can provide. I'm constantly seeing blind embracing of software process, approach or technology where at the most extreme levels its treated akin to a religion, instead of what it should be: <strong>productive tools serving a means to an end</strong>.
<h4>HATEOS</h4>
REST at its extreme conformance imposes some <a href="http://en.wikipedia.org/wiki/HATEOAS">hefty HATEOS restrictions</a> which coupled with most Hyper media driven applications fixation on XML, does not leave you with a very productive window to develop in. If you see real-world value in conforming to these restrictions then by all means adopt them, I personally don't, and since collecting stamps of approvals from the REST community is not my #1 priority, I routinely discard they exist.
<h4>JSON vs XML</h4>
XML is another one of those funny technologies handed down from standard committees as the holy grail data format.  Unfortunately this only holds true when you don't have to develop with it, as it's a poor programattic fit, making it harder to work with than JSON, that's both more verbose and slower as well. A good reference that explores these differences in more detail is Douglas Crockford's entertaining talk on <a href="http://www.infoq.com/presentations/Heretical-Open-Source">Heresy &amp; Heretical Open Source</a>.

XML as a interoperable structured data format has its place, at the same time I'm finding cases where it would be the ideal data format harder to find. I no longer store it in databases, make use of it for efficient messaging or let it go near my mobile or web apps.
<h4>Choosing the right technology</h4>
The way I defend myself from adopting the wrong technology is to take a <strong>cynical view</strong> against all promises, hype and marketing materials. I usually form a picture of the easiest way to develop something and use that as a benchmark to compare other solutions against. The onus then becomes on other frameworks to prove their value by either reducing the amount of effort or code required or in someway enhancing re-usability, performance or promote better maintainability by reducing coupling. If it does not provide any realizable <strong>real-world value</strong> I don't spend too much time researching it and continue what I was doing before this Hot Tech Tip landed on my lap.

Basically don't take any advice at face value, <strong>understand the benefits</strong> and <strong>amount of effort</strong> to achieve the desired outcome of each approach and choose the one that offers the maximum end user utility given the least effort to implement. <strong>If you don't understand the full value</strong> that your architecture/approach/framework is providing, <strong>you won't be able to maximize its benefits</strong> and will soon find you've inadvertently subscribed to a solution looking for a problem.

So if you're spending a lot of time fighting with your framework just to try to get it to prescribe to some artificial standard or religion it might be time to explore other approaches/technologies. When evaluating technologies think about the concept of <strong>Last principles</strong> where you first look at the ultimate end-user result you want to deliver, then look backwards at the tools, technoligies and frameworks that will best meet this end with the least effort and maximum efficiency.
<h3>Heavy weight libraries and frameworks</h3>
I personally believe that the Java/.NET worlds are plagued with leaky, heavy abstractions that introduce more friction an inertia that they're trying to solve. The pain in configuring these monstrosities can be attributed to:
<blockquote>"So much complexity in software comes from trying to make one thing do two things."

-- Ryan Singer</blockquote>
Whilst the un-intended, unknown or magic behaviour I frequently see at runtime whilst developing in said frameworks I'm attributing to its poor, leaky abstractions.
<h3>Prefer thin abstractions promoting DRY code</h3>
In recent years I've been more active in proactively shunning heavy frameworks and look to libraries allowing me to write less code and configuration. Configuration is actually a form of inferior code which happens to be more awkward to define object graphs with than your general purpose programming language. What's left is a fragile, un-typed mess that you can usually only determine correctness at runtime.

I have many reasons to prefer shorter code-bases which follow my general mantra of <strong>"You never have to maintain any line of code you didn't write"</strong>. However here a couple of my favourite quotes I've collected on the subject that put this more eloquently than I:
<blockquote>"I happen to hold a hard-won minority opinion about code bases. In particular I believe, quite staunchly I might add, that the worst thing that can happen to a code base is size."

-- <a href="http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html">Steve Yegge</a></blockquote>
<blockquote>"A programmer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away."

-- Antoine St Exupery</blockquote>
With that said, my general preference is for light-weight development libraries and frameworks with thin abstractions allowing me to capture my logic's intent as DRY as possible. Usually this means these libraries have a low artificial construct / concept count whilst remaining expressive at its core.
<h3>The rise of Ruby and Literate Programming</h3>
Despite its poor runtime performance and no sight of any corporate backing, Ruby has been making deep inroads into developers mindshare simply because it allows developers to be more productive. Although the language itself is quite expressive, I'm attributing it's large productivity gains on the communities focus on Simplicity, Convention, DRY-ness and it's ultimate goal of its ability to compress logic into pseudo code that runs.
In this goal, it seems either by accident or in a way that was cleverly conceived by the languages author it appears that much of Rubys libraries follow a deep symmetry to Donald Knuth's <a href="http://en.wikipedia.org/wiki/Literate_programming">Literate programming</a> which enables programmers to develop programs in the order demanded by the logic and flow of their thoughts.
<h4>Code as literature</h4>
<blockquote>"Meaning belongs to a text or to a program to the extent that it acts upon intelligence in a particular way."</blockquote>
<blockquote>We say that a textual work is "literary" if it contains a high density of meaning.</blockquote>
The above quotes are from <a href="http://twitter.com/jashkenas">@jashkenas</a> enlightening <a href="http://confreaks.net/videos/379-sunnyconf2010-keynote">talk at Ruby's SunnyConf 2010</a> exploring the subject.

Literate programming is an intriguing topic that not only looks to enhance developer productivity but at the same time increases developer enjoyment and satisfaction. I can definitely see its appeal as it seems like a breadth of fresh air especially if you spend your time fighting heavy frameworks in your day job. Having said that Ruby's lack of good performance characteristics <a href="https://github.com/mythz/ScalingDotNET">which I consider important</a> keeps me from using the language in any capacity.
<h4>JavaScript's star new language - CoffeeScript</h4>
Luckily <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> is a hot new language that looks to embrace this vision and since its built on JavaScript, can take advantage of the arms race going on amongst browser vendors in recent years trying to make JavaScript as fast as possible.

Unlike other JavaScript frameworks tackling this domain, it's not interpreted at runtime and simply compiles 1:1 with efficient JavaScript (in some cases more efficient than a developer would write).

This gives it some unique qualities where it is able to <a href="http://jashkenas.github.com/coffee-script/">run in a browser</a> without any plugins and thanks to <a href="http://nodejs.org/">node.js</a> the same CoffeeScript code can run very efficiently on servers as well.

We're now starting to see this powerfull and expressive combination powering new servers like Ruby's new <a href="http://pow.cx/">Pow Rack server</a> for OSX.
Its recent inclusion in the default Rails install is causing the biggest rift I recall in recent times <a href="https://github.com/rails/rails/commit/9f09aeb8273177fc2d09ebdafcc76ee8eb56fe33">for a single line of config change</a>.

So while everyone may not be in love with it yet, they at least have an opinion on it :)

<a href="http://jashkenas.github.com/coffee-script/">What's yours?</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>665</wp:post_id>
		<wp:post_date>2011-04-17 21:31:51</wp:post_date>
		<wp:post_date_gmt>2011-04-17 18:31:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rest-media-types-soap-heavy-frameworks-and-literate-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dark Pastel Visual Studio Theme</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=729</link>
		<pubDate>Thu, 26 May 2011 14:06:04 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=729</guid>
		<description></description>
		<content:encoded><![CDATA[Since I'm pretty happy with the Dark Visual Studio Theme I've been rolling for a long time with I thought I'd share it with the wider .NET world so others can bask in the glow of an eye friendly dark theme when they're doing their midnight code runs!

I've had it for so long that I'm no longer sure where it was originally based, but looking at <a href="http://www.hanselman.com/blog/VisualStudioProgrammerThemesGallery.aspx">Scott Hanslemans VS.NET theme gallery</a> it looks like it's a mix of <a href="http://blog.wekeroad.com/2007/10/17/textmate-theme-for-visual-studio-take-2/">Rob Conery's TextMate</a> and <a href="http://studiostyl.es/schemes/vibrant-ink">John Lam's Vibrant Ink</a>.
Over the years where I've felt the contrast could be improved, I've spiced it up with my own unique blend of colours from the pastel famiglia palette.

And since this theme isn't complete without a name I'm calling it....
<h2>Dark Pastel</h2>
Here's a code screenshot:

<a href="http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot2.png"><img class="alignnone size-full wp-image-744" title="darkpastel-screenshot" src="http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot2.png" alt="C# code screenshot" width="650" height="738" /></a>

Some Web.config love:

<a href="http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-02.png"><img class="alignnone size-full wp-image-741" title="darkpastel-screenshot-02" src="http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-02.png" alt="Web.config screenshot" width="650" height="784" /></a>

A splash of HTML:

<a href="http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-03.png"><img class="alignnone size-full wp-image-742" title="darkpastel-screenshot-03" src="http://ww2.servicestack.net/wp-uploads/2011/05/darkpastel-screenshot-03.png" alt="HTML screenshot" width="650" height="736" /></a>
<h3>And the <a href="http://www.servicestack.net/files/DarkPastel-2011-05.vssettings">all important download</a>.</h3>
<span style="color: #ffffff;">.</span>

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>729</wp:post_id>
		<wp:post_date>2011-05-26 17:06:04</wp:post_date>
		<wp:post_date_gmt>2011-05-26 14:06:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dark-pastel-visual-studio-theme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First day on the job, after 1 crazy week!</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=755</link>
		<pubDate>Fri, 26 Aug 2011 09:26:46 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=748</guid>
		<description></description>
		<content:encoded><![CDATA[Wow what a week! it's been an eventful one to remember: there are Rebellions overthrowing dictatorships in Libya, Earthquakes in Washington with tremors being felt in New York and hurricane Irene swirling around keen on paying us a visit anytime now. All this just setting the stage for the sad news I hoped not to hear for many more years with Mr. Apple (aka Steve Jobs) bowing out on top, relinquishing command as king of the tech world.

Meanwhile all this is happening I've undergone some radical lifestyle changes as well with just having just moved to the city of New York after a 2 month hiatus from programming, travelling the wrong way round the world from London. I'm now currently settling into my new apartment in Brooklyn whilst just having finished the first day at my new job after having joined the talented team at: <a href="http://stackexchange.com/">http://stackexchange.com</a>!

My new, New York life is largely thanks to the opportunity I received from the eloquent <a href="http://twitter.com/spolsky">Joel Spolsky</a>. Which was pretty surreal in itself , given I've been following and enjoying his entertaining articles on his <a href="http://joelonsoftware.com/">world famous blog</a> since the dawn of my computing career &gt;10 years ago!

My first call to action at StackExchange will be helping "Stand Up Matt" <a href="http://twitter.com/clipperhouse">@clipperhouse</a> and "Mad Typist" <a href="http://twitter.com/JasonPunyon">@JasonPunyon</a> (my first impressions - sorry guys! :) ) enhance the new StackOverflow Careers 2.0 site - Something I'll be looking forward to as It'll have the potential to help and reach a very large audience. This is in stark contrast to the standard enterprise developer positions I've found myself in over the years - developing custom backend solutions that are usually only destined to support a handful of people.
<h2>Day 1</h2>
With having survived Day 1 (and not having done much), the biggest change I've noticed so far is the view. Where back in London I had a quiet desk next to a peaceful, lifeless cemetery where on a winters day I'm greeted with a ghostly calming atmosphere:

<a href="http://ww2.servicestack.net/wp-uploads/2011/08/view-digiterre.jpg"><img class="alignnone size-full wp-image-749" title="view-digiterre" src="http://ww2.servicestack.net/wp-uploads/2011/08/view-digiterre.jpg" alt="" width="720" height="540" /></a>

In New York that image is a distant memory where sitting next to a window on the 26th floor, neighbouring skyscrapers hit you in the face:

<a href="http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-sunny.jpg"><img class="alignnone size-full wp-image-751" title="view-ny-sunny" src="http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-sunny.jpg" alt="" width="720" height="540" /></a>

Although this changes very quickly with the bit of rain today, you still get a ghostly picture but instead of snow tipped tombstones - it's the city of New Jersey!

<a href="http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-rainy.jpg"><img class="alignnone size-full wp-image-753" title="view-ny-rainy" src="http://ww2.servicestack.net/wp-uploads/2011/08/view-ny-rainy.jpg" alt="" width="720" height="540" /></a>

That's about it for my first day, I'm told my second will be even better with some in-house Team StackOverflow beer festival on Friday to close off the week!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>755</wp:post_id>
		<wp:post_date>2011-08-26 12:26:46</wp:post_date>
		<wp:post_date_gmt>2011-08-26 09:26:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-day-on-the-job-after-a-crazy-week</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Look at F# from C#&#039;s corner</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=765</link>
		<pubDate>Tue, 27 Sep 2011 03:49:31 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=765</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

For a while now I've been hearing many great things that have been coming out of Microsoft Research's popular .NET language F#. For the unfamiliar, F# is a strongly-typed, functional-based language for .NET - originally created by <a href="http://blogs.msdn.com/b/dsyme/">Don Syme</a> (better known to most as <a href="http://blogs.msdn.com/b/dsyme/archive/2011/03/15/net-c-generics-history-some-photos-from-feb-1999.aspx">the father of generics in .NET</a>) it has now become a fully supported language in .NET with soon to be first-class support in VS.NET.

Despite being deeply inspired by its functional roots, it stands out from other languages in that it also supports imperative and OOP paradigms as well. Boasting both interactive and compile modes, it's been holding over C# lately, sporting a more succinct syntax and already comes complete with features like  <a href="http://msdn.microsoft.com/en-us/library/dd233250.aspx">async workflows</a> and an interactive mode we wont see in C# until V.Next.

The <a href="http://blogs.msdn.com/b/fsharpteam/archive/2011/09/14/f-3-0-developer-preview-now-available.aspx">announcement of F# 3.0</a> pushes the envelope even further where the new Type Providers promises to be even more productive by allowing you to build against a strong-typed API (with intelli-sense) against a runtime datasource.

So not wanting to fall too far behind a good thing I've made F# on this years must-learn-list. Before looking at F# I have to admit I thought C# was close to the perfect server-side language with its biggest weaknesses just being the lack of string interpolation and <a href="http://www.airs.com/blog/archives/277">Go's-like interfaces</a>. Given that, I was quite surprised to find how much more elegant F# is in a number of ways:
<h3>Type Inference to the Max</h3>
Where some C# developers are still reluctant to use <strong>var</strong> in their works, F# takes type inference to the extreme where you can effectively omit type declarations whenever the type is not ambiguous and can be safely inferred.
<h3>Less code, the better</h3>
I'm a firm believer <a style="font-size: 13px; font-weight: normal;" href="http://blog.vivekhaldar.com/post/10669678292/size-is-the-best-predictor-of-code-quality">a smaller code base is a good one</a> and we should be striving for a DRY, tight code-base where the solution permits. Having less code means there is less to maintain and less chance for something to go wrong, where a high signal-to-noise ratio is generally more readable as you're able to focus more on the solution and less on the needless abstractions that get in the way.

<span style="font-size: 13px; font-weight: normal;">In addition to type inference, F# has many features to tackle code boat including:</span>
<ul>
	<li>Language support for <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Tuples_and_Records">tuples</a></li>
	<li><a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Tuples_and_Records">Records</a> and <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Discriminated_Unions">Discriminated unions</a> in-place of lightweight classes</li>
	<li><a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Pattern_Matching_Basics">Pattern matching</a> replacing heavy chained and nested <strong>if</strong> and <strong>switch</strong> statements.</li>
	<li><a href="http://lorgonblog.wordpress.com/2008/03/30/pipelining-in-f/">Pipelining</a> allowing for readable chained expressions.</li>
	<li><a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Higher_Order_Functions">Currying</a> allowing for functional composition instead of needless abstractions</li>
</ul>
</div>
Out of all its features I believe what promotes the least code bloat is the quality of F#'s community (see: <a href="http://www.paulgraham.com/pypar.html">The Python Paradox</a>) and its preference to simple, elegant composable solutions.  This is contrast to C#'s abstraction fetish it copied from Java and its relentless need to cater for the lowest common Drag n' Drop developer and impress them with 5 minute demos. Although it's a subject for another post, this rarely leaves us with quality frameworks or APIs.

<span style="font-size: 15px; font-weight: bold;">Functional vs Imperative</span>
<div>

Even though F# allows for programming in procedural, Object Orientated and functional paradigms, its roots and optimized syntax lends itself towards functional-style of programming. In many ways functional programming provides more elegant and robust solutions. Luca Bolognese explains this best in his <a href="http://channel9.msdn.com/Blogs/pdc2008/TL11">excellent Intro to F#</a>, where the instincts of a C# programmer attempts to solve a problem imperatively resulting in mutable variables and disjointed logic allowing for moving parts to go wrong.  In his example Luca uses the <strong>'sum of squares'</strong> as an example where the budding C# developer would approach it into something like this:

[csharp]
public int Square(int num)
{
	return num * num;
}

public int SumOfSquares(IEnumerable&lt;int&gt; list)
{
	var sum = 0;
	foreach (var num in list)
	{
		sum += Square(num);
	}
	return sum;
}

var nums  = Enumerable.Range(1,100);
Console.WriteLine(&quot;Sum of squares of 1-100: {0}&quot;, SumOfSquares(nums));
[/csharp]

The F# functional approach would lend it more to the original question, i.e. <strong>square the numbers, then sum them</strong>:

[csharp]
let squares x = x * x
let sumOfSquares nums =
	nums
	|&gt; Seq.map squares
	|&gt; Seq.sum

printfn &quot;Sum of squares of 1-100: %d&quot; (sumOfSquares [1..100])
[/csharp]

Although oddly enough despite its already succinctness, it can be even further reduced to:

[csharp]
let sumOfSquares nums = nums |&gt; Seq.sumBy squares
[/csharp]

I recommend watching the rest of Luca's video as he goes on to show how the F# solution lends itself to easy parallelization, without interrupting the existing flow of logic.

In a real world problems closer to home, <a href="http://twitter.com/#!/ayende">@ayende</a> recently posted one of his interview questions online asking for <a href="http://ayende.com/blog/108545/the-tax-calculation-challenge">example solutions to calculate israels tax</a>. As expected <a href="http://pastebin.com/zJADQGdx">most</a> <a href="http://pastebin.com/NCmjVJE0">C#</a> <a href="https://gist.github.com/1237076">solutions</a> <a href="https://gist.github.com/1237707">were</a> <a href="https://gist.github.com/9cbe9ab68f75f52eebfb">similarly</a> written the same way complete with mutable variables, tightly coupled solutions - many of them having custom types and other artefacts.  Comparatively the <a href="http://pastebin.com/g9UDu5vF">few</a> <a href="https://gist.github.com/1244370">F#</a> <a href="https://gist.github.com/1236106">solutions</a> posted had significantly less code, yet was easier to read and maintain.

My attempt at solving this problem in a purely functional style resulted in this <a href="https://gist.github.com/1236106">[gist]</a>:

[csharp]
let taxOf salary taxRates =
	((0m,0)::taxRates, taxRates)
		||&gt; Seq.zip
		 |&gt; Seq.map(fun ((_, prevBand),(rate, band)) -&gt; (prevBand, rate, band))
		 |&gt; Seq.sumBy(fun (prevBand, rate, band) -&gt;
			match salary with
				| x when x &lt; prevBand -&gt; 0m
				| x when x &gt; band -&gt; decimal(band - prevBand) * rate
				| x -&gt; decimal(x - prevBand) * rate
		    )

let israelTaxRates = [
	0.10m, 5070;
	0.14m, 8660;
	0.23m, 14070;
	0.30m, 21240;
	0.33m, 40230;
	0.45m, System.Int32.MaxValue]

let taxOfIsrael salary = israelTaxRates |&gt; taxOf salary

//Usage: taxOfIsrael 5800
[/csharp]

The nice aspects of this solution was having the tax rates and bands in an easily readable and maintainable collection optimized for the reader (like all other F# solutions) separate from its implementation. The internal logic is neatly coupled together into 3 readable scenarios, making it easy to work out how the tax was calculated.

Another nice feature is being able to easily combine the implementation and input tax rates to create a high order <strong>taxOfIsrael</strong> function that ultimately performs the task. This in-built ability to curry functions makes functional composition a breeze and after using it for a while I can quickly see how it's more elegant to OOP programming style in a lot of areas.
<h3>Interactive Mode</h3>
Inside Visual Studio 2010 (or by using <strong>fsi</strong> on the command line) is F# Interactive mode which works very much like Ruby's irb or  Pythons interactive mode, it's just rare to see this from a typed .NET language, although <a href="http://boo.codehaus.org/Interactive+Interpreter">Boo was likely the first to do this</a>.
<h3>F# open and F# everywhere!</h3>
Despite F# being the latest creation forged in the deep trenches of Microsoft's R&amp;D department, F# is surprisingly and arguably the most open of all of Microsofts languages with their entire implementation <a href="https://github.com/fsharp/fsharp">available on GitHub</a> and free to use, released under the liberal and OSS approved <a href="https://github.com/fsharp/fsharp/blob/master/LICENSE">Apache 2.0 licence</a>! This wouldn't mean much if it didn't immediately work elsewhere however Don Syme and his team have done a good job actively supporting Mono, going as far as reporting blocking Mono bugs, ensuring it continues to work flawlessly. It's even being currently distributed with the latest release of Mono on OSX.

Being this open is a treat, we can finally <a href="http://functional-variations.net/crossplatform/">build GTK desktop applications </a>with a typed, fast functional language using Open Source components end-to-end!

I'm actually surprised how well it works where I'm doing all current F# development on an OSX Macbook Air, deploying my finished solutions onto <a href="http://www.servicestack.net">http://www.servicestack.net</a> CentOS linux server for hosting.
<h3>Getting Started with F#</h3>
Although not mentioned here, it should be noted F# is great for concurrent programming tasks as well. It is also particular good at creating composable asynchronous work flows - which happened to be the source of inspiration for C#'s 5.0 async/await feature.

Getting started with F# is easy where if you have Visual Studio 2010 - you've already got it! Just create an F# project and your good to go. For all other platforms <a href="http://www.tryfsharp.org/Tools.aspx">follow this link</a>.

For the newbie budding developer, I recommend the following learning resources:
<ul>
	<li><a href="http://channel9.msdn.com/Blogs/pdc2008/TL11">Luca Bolognese - Intro to F#</a> - fun and entertaining</li>
	<li><a href="http://www.tryfsharp.org/Resources/Videos.aspx">More F# Videos</a> - both introductory and advanced</li>
	<li><a href="http://en.wikibooks.org/wiki/Programming:F_Sharp">The F# Wiki</a> - covers the essential language features</li>
	<li><a href="http://www.tryfsharp.org/Resources/Books.aspx">Any of the quality books on F#</a> - for dead tree lovers</li>
	<li><a href="http://cs.hubfs.net/">HubFS </a>- The defacto F# Forum</li>
</ul>
<h4>Blogs</h4>
<div>
<ul>
	<li><a href="http://blogs.msdn.com/b/dsyme/">Don Syme</a> - The Master</li>
	<li><a href="http://blogs.msdn.com/b/fsharpteam/">MSDN F# Team Blog</a></li>
	<li><a href="http://lorgonblog.wordpress.com/">Inside F#</a> - Brian McNamara from MSDN Team</li>
	<li><a href="http://strangelights.com/blog/">Robert Pickering</a> - Author of <a href="http://www.amazon.com/Beginning-F-Robert-Pickering/dp/1430223898">Beginning F#</a></li>
	<li><a href="http://tomasp.net/blog/">Tomas Petricek</a> - Co Author of <a href="http://www.amazon.com/gp/product/1933988924/ref=as_li_tf_il?ie=UTF8&amp;tag=httptomasnet-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1933988924">Real World Functional Programming</a> with Jon Skeet</li>
</ul>
</div>
<h3>Next up: Easy Self Hosted, Cross Platform F# Web Services</h3>
Although not a surprise for a .NET language, I'm happy to report F# works flawlessly with <a href="http://www.servicestack.net">Service Stack</a> where its thin API doesn't get in F#'s way - allowing it to easily create elegant self-hosted solutions. In my next instalment I'll show how you can easily create an <strong>async+parallel cached twitter proxy</strong> that works cross platform on Windows/OSX and Linux in =~ <strong>100 LOC</strong>.

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>765</wp:post_id>
		<wp:post_date>2011-09-27 06:49:31</wp:post_date>
		<wp:post_date_gmt>2011-09-27 03:49:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>looking-at-f-from-cs-corner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1455</wp:comment_id>
			<wp:comment_author><![CDATA[F# Web Services on any platform in and out of a web server! &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=785</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-09-28 14:33:14</wp:comment_date>
			<wp:comment_date_gmt>2011-09-28 11:33:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] on from my previous post where I took a first look at F# through my C# tinted eyes, I looked into some of the advantages of what this versatile language brings to a C# devs table. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>F# Web Services on any platform in and out of a web server!</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=785</link>
		<pubDate>Wed, 28 Sep 2011 11:32:03 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=785</guid>
		<description></description>
		<content:encoded><![CDATA[Following on from my previous post where I took a first look at <a href="http://www.servicestack.net/mythz_blog/?p=765">F# through my C# tinted eyes</a>, I looked into some of the advantages of what this versatile language brings to a C# devs table. One of the major benefits I mentioned in passing but failed to explain in detail was it's exceptionally good async story, which in many respects provides arguably the best async programming development experience to date on any platform.
<h3>F# and .NET Web Services</h3>
If F# only had to interface with other code as its inputs and outputs, the async world of F# is pristine and beautiful. Such is rarely the case so we're stuck with having to interface with existing frameworks to provide these additional user facing services. Unfortunately the Web Services story for .NET isn't pretty, where if for whatever reason you're forced to use Microsoft-only technologies, you're left with either having to deal with the WCF problem or extend MVC's framework and roll your own REST-ful framework-in-a-framework yourself - which although less capable, I've witnessed to be a viable alternative providing a better iterative experience than WCF in the wild. Another web framework worth considering along similar lines, but developed in true Open Source spirit is <a href="https://github.com/NancyFx/Nancy">NancyFX</a>.

However if like me you like Web Services and still want to use a framework optimized for the task but consider <a href="https://github.com/ServiceStack/ServiceStack/#anti-wcf">WCF to be an anti-pattern promoting, over architected abstraction</a> I'm happy to highlight a more elegant option in <a href="http://www.servicestack.net">Service Stack</a> which does the same job as WCF in allowing you to expose XML, JSON and SOAP services (as well as CSV, JSV &amp; HTML formats) but does so cleanly, out-of-the-box, without any configuration required! It's typed, DTO-first development model gets out of your way providing a friction-free dev experience that encourages the development of clean, best-practice web services - easily consumable from any client.

I should note the latest Web Service offering coming out of Redmond: <a href="http://wcf.codeplex.com/wikipage?title=WCF%20HTTP">WCF Web API</a> is not be confused with WCF (even if the naming tries) does a much better job of 'exposing HTTP and REST' rather than hiding it like the original WCF framework upon which it is built. This may work better for you, although my preference for Open source solutions favouring light, DRY, typed, performance-focused API's with the ability to run cross platform keeps me using and continue to recommend and maintain Service Stack for the foreseeable future.
<h3>Hello, F# World!</h3>
To get started we just need the Service Stack dlls that can be <a href="https://github.com/ServiceStack/ServiceStack/downloads">downloaded from GitHub</a>. In the unzipped folder you can spark up your favourite text editor and write your first Hello, World web service which looks like <a href="https://gist.github.com/1247149">[gist]</a>:

[csharp]
open System
open ServiceStack.ServiceHost
open ServiceStack.WebHost.Endpoints

type Hello = { mutable Name: string; }
type HelloResponse = { mutable Result: string; }
type HelloService() =
    interface IService&lt;Hello&gt; with
        member this.Execute (req:Hello) = { Result = &quot;Hello, &quot; + req.Name } :&gt; Object

//Define the Web Services AppHost
type AppHost =
    inherit AppHostHttpListenerBase
    new() = { inherit AppHostHttpListenerBase(&quot;Hello F# Services&quot;, typeof&lt;HelloService&gt;.Assembly) }
    override this.Configure container =
        base.Routes
            .Add&lt;Hello&gt;(&quot;/hello&quot;)
            .Add&lt;Hello&gt;(&quot;/hello/{Name}&quot;) |&gt; ignore

//Run it!
[&lt;EntryPoint&gt;]
let main args =
    let host = if args.Length = 0 then &quot;http://*:8080/&quot; else args.[0]
    printfn &quot;listening on %s ...&quot; host
    let appHost = new AppHost()
    appHost.Init()
    appHost.Start host
    Console.ReadLine() |&gt; ignore
    0
[/csharp]

The rest of the code except for the 5 lines of code needed to create the actual service need only be written once which is just used to setup the AppHost and run it, in this case as a Console Application.

Great, once you copy all that in, and hit save using the filename Hello.fs - you can compile with the 1-liner:

[csharp]fsharpc -r:ServiceStack.Common.dll -r:ServiceStack.Interfaces.dll -r:ServiceStack.Text.dll -r:ServiceStack.dll Hello.fs[/csharp]

Which cuts you a nice Hello.exe that you can double-click to run on Windows, otherwise run on OSX or Linux with:

[csharp]sudo mono Hello.exe[/csharp]

And Voila! your stand alone F# self-hosting Web Service is ready to serve you at: <a href="http://localhost:8080/hello/FSharp!">http://localhost:8080/hello/FSharp!</a>
<h3>Convert into an ASP.NET Web Service</h3>
To convert this into an ASP.NET application we just need to do some minor tweaks add the appropriate files to deal with the nuances of having an ASP.NET application. For this we need to venture back to a time before VS.NET templates existed that did all this for us.
Note: All files including HelloAsp.fs, Global.asax and Web.Config files used in the walkthrough below are available on this <a href="https://gist.github.com/1247567">[gist]</a>.

First lets take a copy of the file and call it <strong>HelloAsp.fs</strong>

1. As we want to create a .NET assembly we wrap the entire script in a namespace adding the declaration on top and indenting the rest of the file

[csharp]namespace HelloFSharp[/csharp]

2. Change the AppHost from a Http Listener to an ASP.NET AppHost by removing the word <strong>HttpListener</strong> from AppHostHttpListenerBase e.g:

[csharp]
    type AppHost =
        inherit AppHostBase
        new() = { inherit AppHostBase(&quot;Hello F# Services&quot;, typeof&lt;HelloService&gt;.Assembly) }
        override this.Configure container =
            base.Routes
                .Add&lt;Hello&gt;(&quot;/hello&quot;)
                .Add&lt;Hello&gt;(&quot;/hello/{Name}&quot;) |&gt; ignore
[/csharp]

3. Replace starting the AppHost from the command line with initialising it from HttpApplication Application_Start() event, i.e:

[csharp]
    type Global =
        inherit System.Web.HttpApplication
        new() = { }
        member x.Application_Start() =
            let appHost = new AppHost()
            appHost.Init()
[/csharp]

4. Create the Global.asax stub to point it to the Global type, i.e:

[csharp]echo &quot;&lt;%@ Application Inherits=&quot;HelloFSharp.Global&quot; %&gt;&quot; &gt;&gt; Global.asax[/csharp]

5. Compile HelloAsp.fs into a library since its now an ASP.NET app instead of a stand-alone executable:

[csharp]fsharpc -r:ServiceStack.Common.dll -r:ServiceStack.Interfaces.dll -r:ServiceStack.Text.dll -r:ServiceStack.dll --target:library HelloAsp.fs[/csharp]

6. make a bin directory and copy all the dlls into it:

[csharp]mkdir bin &amp;&amp; cp *.dll bin[/csharp]

7. Copy the desired Web.config mapping from <a href="http://www.servicestack.net/ServiceStack.Hello/#rootpath">Hello World Tutorial</a>

[csharp]
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;configuration&gt;
&lt;system.web&gt;
  &lt;httpHandlers&gt;
    &lt;add path=&quot;*&quot; type=&quot;ServiceStack.WebHost.Endpoints.ServiceStackHttpHandlerFactory, ServiceStack&quot; verb=&quot;*&quot;/&gt;
  &lt;/httpHandlers&gt;
&lt;/system.web&gt;
&lt;!-- Required for IIS 7.0 --&gt;
&lt;system.webServer&gt;
  &lt;handlers&gt;
    &lt;add path=&quot;*&quot; name=&quot;ServiceStack.Factory&quot; type=&quot;ServiceStack.WebHost.Endpoints.ServiceStackHttpHandlerFactory, ServiceStack&quot; verb=&quot;*&quot; preCondition=&quot;integratedMode&quot; resourceType=&quot;Unspecified&quot; allowPathInfo=&quot;true&quot; /&gt;
  &lt;/handlers&gt;
&lt;/system.webServer&gt;
&lt;/configuration&gt;
[/csharp]

8. Run the .NET 4.0 version of xsp in the current directory

[csharp]xsp4[/csharp]

If all went well you should see the following output:

[csharp]
Listening on address: 0.0.0.0
Root directory: /Users/mythz/src/fsharp/fsharpstack
Listening on port: 8080 (non-secure)
Hit Return to stop the server.
[/csharp]

and you'll be able to hit the service again using the same url at <a href="http://localhost:8080/hello/FSharp!">http://localhost:8080/hello/FSharp!</a>

You now have a fully-fledged ServiceStack ASP.NET application that can be hosted in any ASP.NET compatible web server e.g:
<ul>
	<li>IIS</li>
	<li>Apache + mod_mono</li>
	<li>Nginx + MonoFastCGI</li>
	<li>XSP</li>
	<li>WebDevServer.exe</li>
</ul>
Now that you know how to create functional F# web services, you can read more about the goodies you get for free when using Service Stack, complete with live links to all those juicy XML, JSON, SOAP, HTML, CSV and JSV Formats check out: <a href="http://www.servicestack.net/ServiceStack.Hello/">http://www.servicestack.net/ServiceStack.Hello/</a>
<h3>Next - Async Goodness!</h3>
With the basics out of the way tomorrow we'll tackle a more complex service taking advantage of F#'s async and parallel good ness to provide nice high-level aggregate features off twitters public API.

Stay Tuned!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>785</wp:post_id>
		<wp:post_date>2011-09-28 14:32:03</wp:post_date>
		<wp:post_date_gmt>2011-09-28 11:32:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>f-web-services-on-any-platform-in-and-out-of-a-web-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1456</wp:comment_id>
			<wp:comment_author><![CDATA[Async, Cached Twitter API Proxy in F# &raquo; Tales from behind the browser]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.servicestack.net/mythz_blog/?p=811</wp:comment_author_url>
			<wp:comment_author_IP>62.212.66.238</wp:comment_author_IP>
			<wp:comment_date>2011-10-03 15:34:47</wp:comment_date>
			<wp:comment_date_gmt>2011-10-03 12:34:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Check the previous post for more information on creating ServiceStack Web Services with F#. Bookmark on DeliciousDigg this postRecommend on Facebookshare via RedditShare with StumblersTweet about itSubscribe to the comments on this post [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Async, Cached Twitter API Proxy in F#</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=811</link>
		<pubDate>Mon, 03 Oct 2011 10:24:04 +0000</pubDate>
		<dc:creator>mythz</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=811</guid>
		<description></description>
		<content:encoded><![CDATA[Following on from showing how easy it was to create web services in F# with Service Stack, it's now a good time to step it up a bit and do something useful to showcase some F#'s async goodness!
<blockquote>The final solution is available as a stand-alone <a href="https://gist.github.com/1242208">HttpListener</a> or an <a href="https://gist.github.com/1258515">ASP.NET host</a> which I just happen to have deployed earlier on a Linux server at <a href="http://www.servicestack.net/ftweetstack/metadata">http://www.servicestack.net/ftweetstack/</a>. Here's a couple example urls to see the stats of all my friends and followers:

<a href="http://www.servicestack.net/ftweetstack/followers/demisbellot">http://www.servicestack.net/ftweetstack/followers/demisbellot</a>
<a href="http://www.servicestack.net/ftweetstack/friends/demisbellot">http://www.servicestack.net/ftweetstack/friends/demisbellot</a></blockquote>
<h3>Edit Screenshots added:</h3>
As I'm now getting rate limited by twitter, the live services have stopped working so I've included screenshots of the web service responses, reminiscent of happier times :)

<strong>[format=html]</strong>

<a href="http://ww2.servicestack.net/wp-uploads/2011/10/fstack-html.png"><img class="alignnone size-full wp-image-826" title="fstack-html" src="http://ww2.servicestack.net/wp-uploads/2011/10/fstack-html.png" alt="" width="544" height="361" /></a>

<strong>[format=csv]</strong>

<a href="http://ww2.servicestack.net/wp-uploads/2011/10/fstack-csv.png"><img class="alignnone size-full wp-image-827" title="fstack-csv" src="http://ww2.servicestack.net/wp-uploads/2011/10/fstack-csv.png" alt="" width="552" height="397" /></a>

<strong>[format=json]</strong>

<a href="http://ww2.servicestack.net/wp-uploads/2011/10/fstack-json.png"><img class="alignnone size-full wp-image-828" title="fstack-json" src="http://ww2.servicestack.net/wp-uploads/2011/10/fstack-json.png" alt="" width="542" height="482" /></a>

<!--more-->
<h2>Back to the code editor...</h2>
The best way to showoff some Async code is to do some IO, and the most interesting IO people do these days is against 3rd Party APIs, and the API nearly everyone is familiar with is Twitter's, so let's write some code that calls Twitter's API!

<span style="font-size: 15px; font-weight: bold;">Stuck with the old</span>

We'll first start with something simple - a basic HTTP request. Unfortunately F# doesn't come with hot new networking libs to make life easy for us. Nope we're stuck with the same Async APIs .NET was born with - and .NETs Asynchronous Programming Model (APM) of using the BeginXXX/EndXXX pattern could very well be the worst async model in use today. But what F# doesn't fix with new cake, it fixes with sweeteners providing us some nice sugar coating we can use over the top to make these APIs more palatable.

Async.FromBeginEnd(,) takes the BeginXXX,EndXXX async method pair and returns an Asynchronous computation that wraps the Async task for use in F#'s built-in Asynchronous workflows.
<h3>Doing something new with it</h3>
Taking advantage of F#'s ability to extend existing types, we can add this helper method to the familiar WebRequest type with:

[csharp]
	type System.Net.WebRequest with
	    member x.GetResponseAsync() =
	    	Async.FromBeginEnd(x.BeginGetResponse, x.EndGetResponse)
[/csharp]

With this in-place we can build a high level asyncHttp API that downloads the text contents of a http resource asynchronously.

[csharp]
	let asyncHttp (url:string) =
	    async {
	        printfn &quot;downloading: %s&quot; url
	        let req = System.Net.WebRequest.Create(url)
	        let! rsp = req.GetResponseAsync()
	        printfn &quot;processing response...&quot;
	        use stream = rsp.GetResponseStream()
	        use reader = new System.IO.StreamReader(stream)
	        return reader.ReadToEnd() }
[/csharp]
<h3>What is this async { ... } ?</h3>
What's different with this function is it doesn't actually return a string as the implementation might suggest, it actually returns an Async which is basically says <em>"I wrap an asynchronous computation that returns a string"</em>. Async workflows in F# are surrounded by an <strong>async { ... }</strong> block, inside this block you will occaisionally see a <strong>let!</strong> statement. The <strong>let!</strong> statement above which happens to be against the async helper we created earlier is used when calling Async APIs which performs the async task without blocking the current execution, when the task completes it resumes, and executes the remaining logic in the async block.

In code terms this looks like:

[csharp]
	let fetchMe = asyncHttp &quot;http://api.twitter.com/1/users/lookup.json?screen_name=demisbellot&quot;
	printfn &quot;doing other stuff... la, di, da...&quot;
	let json = fetchMe |&gt; Async.RunSynchronously
[/csharp]

Which when run in <strong>fsi</strong> returns:

[csharp]
	doing other stuff... la, di, da...
	downloading: http://api.twitter.com/1/users/lookup.json?screen_name=demisbellot
	processing response...
	val fetchMe : Async&lt;string&gt;
	val json : string =
	  &quot;[{&quot;id_str&quot;:&quot;17575623&quot;,&quot;profile_link_color&quot;:&quot;43594A&quot;,&quot;follower&quot;+[1330 chars]
[/csharp]

As illustrated invoking the <strong>asyncHttp</strong> method doesn't execute it immediately, instead it returns an async workflow that can be called upon later, in this way it works like the deferred exeuction of yield iterators in C# where the iterator itself is only executed when it's enumerated, i.e. someone calls .ToList() or in this case <strong>Async.RunSynchronously</strong> which runs the async task and awaits the results.

Great, we now know how to make an async HTTP request so let's create a service out of it. To help with error handling I've added a wrapper over the raw asyncHttp call to detect and log errors of any fail whales caught and return an empty JSON array muting Exceptions. I've also added a <strong>join</strong> method to join any lists we need to and a short <strong>jsonTo</strong> alias to make using <a href="http://www.servicestack.net/mythz_blog/?p=344">ServiceStack's fast Json Serializer</a> easier on the eyes :)

[csharp]
	let asyncJson url =
	    async {
	        try
	            return! asyncHttp url
	        with
	            | ex -&gt; printfn &quot;Error downloading: %s =&gt; %s&quot; url ex.Message; return &quot;[]&quot; }

	let joinWith delim seq =
	    let sb = new System.Text.StringBuilder()
	    seq |&gt; Seq.iter (fun x -&gt; sb.Append((if sb.Length &gt; 0 then delim else &quot;&quot;) + x.ToString()) |&gt; ignore)
	    sb.ToString()

	let join seq = joinWith &quot;,&quot; seq

	let jsonTo&lt;'a&gt; json = ServiceStack.Text.JsonSerializer.DeserializeFromString&lt;'a&gt;(json)
[/csharp]

We also need a model to dehydrate twitter's response. I'm only interested in Users statistics for this example which I can easily map into an F# Record Type which makes definiing POCO's effortless.

And as I'm always striving for DRY, readable code, I'll wrap the async calls into more readable methods. Immediately you can start to see the benefits of F# async workflows as we're able to compose higher level async APIs together without infecting the calling code, a common problem with many Async APIs.

[csharp]
    type UserStat = {
        mutable id: uint64;
        mutable screen_name: string;
        mutable name: string;
        mutable friends_count: int;
        mutable followers_count: int;
        mutable listed_count: int;
        mutable statuses_count: int }

    let asyncUsers screenNames = asyncJson(&quot;http://api.twitter.com/1/users/lookup.json?screen_name=&quot; + (screenNames |&gt; join))

    let usersByNames screenNames = asyncUsers screenNames |&gt; Async.RunSynchronously |&gt; jsonTo&lt;UserStat[]&gt; |&gt; Seq.toList
[/csharp]

With the above helpers in place all we need to do is to create the service, which is easy as creating the <strong>UserStats</strong> Request DTO so we know what to expect then and the actual implementation which just passes the list of names into our above <strong>usersByNames</strong> function, returning the results as-is:

[csharp]
    type UserStats = { mutable ScreenNames: string; }
    type UserStatsService() =
        interface IService&lt;UserStats&gt; with
            member this.Execute (req:UserStats) = req.ScreenNames.Split(',') |&gt; usersByNames :&gt; Object
[/csharp]

After registering the appropriate Route in our AppHost we can now call our service passing in multiple twitter user names:

<strong>http://localhost:8080/users/demisbellot,servicestack,dsyme</strong>
<h2>More Async</h2>
Although we've created a web service that calls Twitter's REST API asynchronously, we're synchronously waiting for it straight after so it's not doing us much good. The benefits of Async begin to show itself when you're performing multiple IO calls, which is what will be needed in order to gather the stats of your friends or followers using twitter's APIs.

Twitter only provides an API to return your followers or friends as a list of user ids, to get the user info, another API call is needed to <strong>lookup.json</strong> which at most only accepts 100 user ids at a time. Knowing this, the quickest way to fetch the user info for your friends of followers is to send the requests for userinfo asynchronously, in parallel.

The actual API calls given they're just JSON urls are the easiest to do, just 1 line each. I'll further wrap them in higher level <strong>followerIds</strong> and <strong>friendIds</strong> functions which deserializes the json ids in the response into a list of longs:

[csharp]
    let asyncFollowerIds screenName = asyncJson(&quot;http://api.twitter.com/1/followers/ids.json?screen_name=&quot; + screenName)
    let asyncFriendIds screenName = asyncJson(&quot;http://api.twitter.com/1/friends/ids.json?screen_name=&quot; + screenName)
    let asyncUserIds userIds = asyncJson(&quot;http://api.twitter.com/1/users/lookup.json?user_id=&quot; + (userIds |&gt; join))

    let followerIds screenName = asyncFollowerIds screenName |&gt; Async.RunSynchronously |&gt; jsonTo&lt;uint64[]&gt; |&gt; Array.toList
    let friendIds screenName = asyncFriendIds screenName   |&gt; Async.RunSynchronously |&gt; jsonTo&lt;uint64[]&gt; |&gt; Array.toList
[/csharp]

The first piece of functionality required is batching an unbounded list of ids into manageable 100-size chunks. My first attempt at this was short and Linq-y:

[csharp]
	let batchesOf size (sequence: _ seq) : _ list seq =
	    seq {
	        let s = ref sequence
	        while not (!s |&gt; Seq.isEmpty)  do
	            yield !s |&gt; Seq.truncate size |&gt; List.ofSeq
	            s := System.Linq.Enumerable.Skip(!s, size)
	    }
[/csharp]

<a href="http://stackoverflow.com/questions/7509863/most-idiomatic-way-to-write-batchesof-size-seq-in-f">But was later discovered to be fairly slow</a>, given the repetitive call to Skip. Since I'm particularly sensitive to perf in my library functions, I opted to go with a more verbose version, but one that only enumerates the sequence once:

[csharp]
	let batchesOf size (s: seq&lt;'v&gt;) =
	    seq {
	        let en = s.GetEnumerator()
	        let more = ref true
	        while !more do
	        let group = [
	            let i = ref 0
	            while !i &lt; size &amp;&amp; en.MoveNext () do
	                yield en.Current
	                i := !i + 1 ]
	        if List.isEmpty group then
	            more := false
	        else
	            yield group }
[/csharp]

As third party IO calls are amongst the most expensive things you can do, having a cache is a good idea to reduce unnecessary IO calls. We'll need a threadsafe collection here since we'll be reading and writting to it at runtime, and .NET 4's Generic <strong>ConcurrentDictionary</strong> handles the task nicely and made easily available to F#:

[csharp]
    let userCache = System.Collections.Concurrent.ConcurrentDictionary&lt;uint64,UserStat&gt;()
[/csharp]

With the rest of what we need in place we can focus on the most complicated piece to asynchronously download in parallel the the user info for an unlimited list of user ids in <strong>batches of 100</strong>. In addition, the function should make use of the <strong>userCache</strong> only fetching the missing entries before merging the new and cached UserStat's. Surprisingly this entire behaviour can be achieved in just a few lines of F# code:

[csharp]
    let usersByIds userIds =
		let cachedIds, missingIds = userIds |&gt; List.partition userCache.ContainsKey
		missingIds
		|&gt; batchesOf 100
		|&gt; Seq.map asyncUserIds
		|&gt; Async.Parallel |&gt; Async.RunSynchronously
		|&gt; Seq.map jsonTo&lt;UserStat[]&gt;
		|&gt; Seq.collect (fun xs -&gt; xs |&gt; Seq.map
			(fun x -&gt; userCache.TryAdd(x.id, x) |&gt; ignore; x)) |&gt; Seq.toList
		|&gt; List.append (cachedIds |&gt; List.map (fun x -&gt; userCache.TryGetValue x |&gt; snd))
[/csharp]

As there's a bit going on here I'll explain what's happening for each line:

<strong>#2:</strong> Split the entire list of user ids into the ids we have cached and the ones that are missing.
<strong> #3:</strong> Group the ids in batches of 100
<strong> #4:</strong> Create separate async API calls for each of those batches
<strong> #5:</strong> Call each of the API calls in Parallel and wait till they're all completed
<strong> #6:</strong> Deserialize the response into lists of UserStat[] types
<strong> #7:</strong> Merge the UserStat's together adding each entry into the cache
<strong> #8:</strong> Append the resulting entries with the previously cached UserStats

Neat! the hard part's over now it's just a matter of exposing them in web services and then we're done:

[csharp]
    let followers screenName = followerIds screenName |&gt; usersByIds
    let friends screenName = friendIds screenName |&gt; Seq.toList |&gt; usersByIds

    type FollowerStats = { mutable ScreenName: string; }
    type FollowerStatsService() =
        interface IService&lt;FollowerStats&gt; with
            member this.Execute (req:FollowerStats) = followers req.ScreenName :&gt; Object

    type FriendsStats = { mutable ScreenName: string; }
    type FriendsStatsService() =
        interface IService&lt;FriendsStats&gt; with
            member this.Execute (req:FriendsStats) = friends req.ScreenName :&gt; Object
[/csharp]

After adding the routes for each service we can now see the stats for all my friends and followers at these two friendly urls:

<strong>http://localhost:8080/followers/demisbellot</strong>
<strong> http://localhost:8080/friends/demisbellot</strong>

We can test the above urls live using the deployed web service on <a href="http://servicestack.net">servicestack.net</a>:

<a href="http://www.servicestack.net/ftweetstack/followers/demisbellot">http://www.servicestack.net/ftweetstack/followers/demisbellot</a>
<a href="http://www.servicestack.net/ftweetstack/friends/demisbellot">http://www.servicestack.net/ftweetstack/friends/demisbellot</a>

Because we're using <a href="http://www.servicestack.net">ServiceStack</a>, viewing these urls in a web browser (or any REST client with Accept: text/html) returns the data in a human readable <a href="http://www.servicestack.net/docs/framework/json-report-format">HTML Report Format</a>. Naturally, the usual <strong>XML</strong> and <strong>JSON</strong> formats are available and likewise the <strong>CSV format</strong> which will load the response data into your preferred spreadsheet program or database. All the different formats are available by appending the format to the url e.g: <strong>?format=csv</strong> or by specifying it in the Accept HTTP Header.

<a href="http://www.servicestack.net/ftweetstack/followers/demisbellot?format=csv">http://www.servicestack.net/ftweetstack/followers/demisbellot?format=csv</a>
<a href="http://www.servicestack.net/ftweetstack/friends/demisbellot?format=json">http://www.servicestack.net/ftweetstack/friends/demisbellot?format=json</a>

Should you feel like angering the REST gods, you can commit heresy by accessing twitters REST-ful API over the SOAP endpoints and WSDLS at <strong>/soap11</strong> and <strong>/soap12</strong> urls :)
<h2>Download in ASP.NET or HttpListener modes</h2>
The complete source code for the above is available in different hosting flavours which can be compiled and run on all <strong>Windows/OSX/Linux</strong> platforms:
<ul>
	<li><a href="https://gist.github.com/1258515">ASP.NET Host [gist]</a></li>
	<li><a href="https://gist.github.com/1242208">Stand alone HttpListener [gist]</a></li>
</ul>
<a href="http://www.servicestack.net/mythz_blog/?p=785">Check the previous post</a> for more information on creating ServiceStack Web Services with F#.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>811</wp:post_id>
		<wp:post_date>2011-10-03 13:24:04</wp:post_date>
		<wp:post_date_gmt>2011-10-03 10:24:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>async-cached-twitter-api-proxy-in-f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>After 480 days uptime, lights out for old servicestack.net server</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=838</link>
		<pubDate>Thu, 30 Aug 2012 05:24:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=838</guid>
		<description></description>
		<content:encoded><![CDATA[From today, after having served its 484th day of uptime we're now relenquishing the old servicestack.net server into a well-earned retirement.

<h3>Over 480 days uptime and 10M+ commands processed</h3>

Since its last restart it has processed more than 10+ Million redis operations resulting from ServiceStack's Redis-powered live demos and our other websites we had that were using Redis for front-level caching.

It was a CentOS/Mono powered 2GB RAM dedicated server from <a href="http://www.leaseweb.com/en">leaseweb</a> which we put to work to host the <a href="http://www.servicestack.net">servicestack.net</a> domain (inc. all the live demos) as well as the other side projects I had running e.g: ajaxstack.com, freelamusica.com.

Unfortunately time became its ultimate undoing, where newer spec'ed hardware and profileration of in-expensive hosting providers have now diluted its once great value.

<h3>The big move</h3>

Fortunately moving between Linux servers is easy and we were able to transfer to a different hosting provider in 1 weekend. Configuring Nginx and Apache has gotten a lot better where both now have "no touch" virtual host configuration and simple sym-links to decide which sites should be enabled.

Transferring the GB's of website content was done with a <strong>single rsync command</strong> that completed in minutes, thanks to both servers having blindingly fast bandwidth.

<h4>WordPress migrations still painful on Linux</h4>

Most of the time ended up being spent on migrating this WordPress blog, where I had to manually create the new database, configure host settings, export and import the blog content and as well as hunt down and enable the website template and all the existing plugins. Its funny that despite being developed on the LAMP stack, it's still easier to install WordPress on Windows than Linux.

<h4>Final Memento</h4>

I'll share details of the new server in a future post. But for now I'll leave this final screenshot of the RedisAdmin UI info page as reminder of the little work horse that was, captured in its final hours - showing its impressive redis-server stats :)

<a href="http://ww2.servicestack.net/wp-uploads/2012/08/OldServerRedisStats.png"><img class="alignnone  wp-image-841" title="Old Server Redis Stats" src="http://ww2.servicestack.net/wp-uploads/2012/08/OldServerRedisStats.png" alt="" width="570" height="593" /></a>

In cloud speak, that's more than 99.99999% uptime!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>838</wp:post_id>
		<wp:post_date>2012-08-30 05:24:28</wp:post_date>
		<wp:post_date_gmt>2012-08-30 05:24:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lights-out-for-old-servicestack-net-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ServiceStack is on InfoQ! TL;DR and Links</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=860</link>
		<pubDate>Tue, 08 Jan 2013 15:01:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=860</guid>
		<description></description>
		<content:encoded><![CDATA[Adding to <a href="http://www.servicestack.net/2012-report/">ServiceStack's great run in 2012</a> I was approached by <a href="http://www.infoq.com">InfoQ</a> to find some details about ServiceStack vs WCF, why we created it, it's advantages over WCF and the philosophical differences in development styles and approach between ServiceStack and high-level Microsoft libraries and application frameworks. The resulting interview contains my thoughts on the best development and remote services practices, WCF's architecture, its use of SOAP/WS-*, why heavy abstractions and artificial server-side programming models are not ideal, how pragmatic and simpler serialization formats are better suited for services, why message-based designs are preferred by most other frameworks, the state of .NET Open Source and much more.

The entire interview is quite long which ran to 8,000 words that as a result was split up and published in two articles. To make it easier to find and navigate the content, I've published a TL;DR summary, including related questions, table of contents and all embedded links used below:
<h3><a href="http://www.infoq.com/articles/interview-servicestack">Interview With Demis Bellot, Project Lead of ServiceStack - Part 1</a>:</h3>
<strong>InfoQ: What problems do you see in Microsoft's approach to Services and how does ServiceStack try to tackle it?</strong>
<ul>
	<li>Problems with Microsoft's approach to frameworks</li>
	<li>RPC method signatures</li>
<ul>
	<li><a href="http://www.servicestack.net/files/slide-35.png">Differences between ServiceStack vs WCF</a></li>
	<li><a href="http://www.servicestack.net/files/slide-34.png">Differences between ServiceStack vs WebApi</a></li>
</ul>
	<li>Remote Services Best Practices</li>
<ul>
	<li><a href="http://martinfowler.com/eaaCatalog/remoteFacade.html">Remote Facade</a></li>
	<li><a href="http://martinfowler.com/eaaCatalog/dataTransferObject.html">Data Transfer Object</a> (<a href="http://msdn.microsoft.com/en-us/library/ff650101.aspx">MSDN</a>)</li>
	<li><a href="http://martinfowler.com/eaaCatalog/gateway.html">The Gateway</a> (<a href="http://msdn.microsoft.com/en-us/library/ff650101.aspx">MSDN</a>)</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Clients-overview">ServiceStack's re-usable generic typed .NET Service Clients</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/SilverlightServiceClient">Silverlight</a>, <a href="https://github.com/ServiceStack/ServiceStack/wiki/Javascript-client">JavaScript</a>, <a href="https://github.com/ServiceStack/ServiceStack/wiki/Dart-Client">Dart</a> and <a href="https://github.com/ServiceStack/ServiceStack/wiki/Messaging-and-redis">MQ Clients</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/MessagePack-Format">MessagePack format and Service Client</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Protobuf-format">Protobuf format and Service Client</a></li>
</ul>
</ul>
	<li>SOAP Web Services</li>
<ul>
	<li>Problems with SOAP</li>
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Plain_Old_XML">Plain Old XML</a></li>
</ul>
</ul>
	<li>SOAP vs Protocol Buffers</li>
<ul>
	<li><a href="http://wiki.msgpack.org/display/MSGPACK/Design+of+RPC">MessagePack RPC</a></li>
	<li><a href="http://thrift.apache.org/">Apache Thrift</a></li>
</ul>
	<li>JSON</li>
<ul>
	<li><a href="https://github.com/douglascrockford/JSON-js/blob/master/json2.js">JSON fallback implementation in JavaScript</a></li>
	<li><a href="http://www.infoq.com/presentations/Heretical-Open-Source">Heresy &amp; Heretical Open Source</a></li>
	<li><a href="http://www.servicestack.net/mythz_blog/?p=344">ServiceStack's JSON Serializer 3x faster than other JSON Serializers when released</a></li>
	<li><a href="http://www.servicestack.net/mythz_blog/?p=176">JSV Format</a></li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Serialization-deserialization">Supports Complex Object Graphs in QueryStrings and FormData</a></li>
</ul>
</ul>
	<li>ServiceStack vs WCF Approach</li>
	<li>Simplicity and Tackling Complexity</li>
<ul>
	<li>Problems with Abstractions</li>
<ul>
	<li>Thin <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/ServiceHost/IHttpRequest.cs">IHttpRequest</a> and <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/ServiceHost/IHttpResponse.cs">IHttpResponse</a> abstractions</li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Serialization-deserialization">Easily customizing the HTTP Response</a></li>
</ul>
	<li>WCF's Abstractions</li>
<ul>
	<li><a href="http://xkcd.com/927/">What happens when creating a new Abstractions to cover existing abstractions</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/New-Api">ServiceStack New API starts from ideal C#</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Architecture-overview">ServiceStack's de-coupled architecture</a></li>
</ul>
	<li>Heavy Configuration</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack.Examples/blob/master/src/Backbone.Todos/Global.asax.cs">Complete applications smaller than typical WCF Configuration file</a></li>
</ul>
	<li>Big Tooling</li>
<ul>
	<li><a href="http://www.servicestack.net/mvc-powerpack/">ServiceStack's great integration with ASP.NET MVC</a></li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Authentication-and-authorization">Authentication Filters</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">Caching Providers</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Sessions">Session Provider</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack.UseCases/blob/master/CustomAuthenticationMvc/Controllers/HomeController.cs#L35-L37">Calling ServiceStack from MVC via a C# method call</a></li>
</ul>
</ul>
</ul>
	<li>ServiceStack's take on Complexity</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Architecture-overview">ServiceStack's architecture fits on 1-page</a></li>
	<li><a href="http://www.servicestack.net/ServiceStack.Hello/#rootpath">1-line of config</a></li>
	<li>Conventions and Artficial Complexity</li>
<ul>
	<li><a href="http://steve-yegge.blogspot.com.au/2007/12/codes-worst-enemy.html">Code's worst enemy</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Service-return-types">ServiceStack allows returning any response</a></li>
</ul>
	<li>Achieving simplicity</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Order-of-Operations">Custom filters and Event Hooks</a></li>
</ul>
	<li>Avoid big tooling and code-gen</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Clients-overview">Using generic and re-usable Service Clients</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/New-Api">ServiceStack's succinct, typed end-to-end API</a></li>
</ul>
</ul>
	<li>Testability</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.IntegrationTests/Tests/WebServicesTests.cs">Same Unit Test also used as an XML, JSON, JSV and SOAP Integration Test</a></li>
</ul>
	<li>Performance</li>
<ul>
	<li><a href="https://github.com/mythz/ScalingDotNET">Performance is the most important feature</a></li>
	<li>Fastest Serialization Formats</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack.Text">.NET's fastest JSON, JSV and CSV Text serialization formats</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/MessagePack-Format">MessagePack</a> and <a href="https://github.com/ServiceStack/ServiceStack/wiki/Protobuf-format">Protocol Buffers</a> via <a href="https://github.com/ServiceStack/ServiceStack/wiki/Plugins">Plugins</a></li>
</ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">Rich Caching Providers</a></li>
	<li>Fixing .NET's performance problems</li>
<ul>
	<li><a href="http://www.servicestack.net/mythz_blog/?p=344">Fastest JSON Serializer released</a></li>
	<li><a href="http://stackoverflow.com/questions/3629709/i-just-discovered-why-all-asp-net-websites-are-slow-and-i-am-trying-to-work-out">Avoiding the degrading performance issue plaguing ASP.NET developers</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Sessions">New Session Implementations</a></li>
</ul>
	<li>Leading client for the fastest Distributed NoSQL DataStore</li>
<ul>
	<li><a href="https://github.com/ServiceStack/ServiceStack.Redis">.NET's leading C# Redis Client</a></li>
	<li><a href="http://redis.io/topics/benchmarks">Redis Benchmarks</a></li>
	<li><a href="http://redis.io/">Redis</a></li>
</ul>
</ul>
</ul>
<h3><a href="http://www.infoq.com/articles/interview-servicestack-2">Interview With Demis Bellot, Project Lead of ServiceStack - Part 2</a></h3>
<div><strong>InfoQ: What exactly is a message-based Web service?</strong></div>
<div>
<ul>
	<li>Comparison between Smalltalk or <a href="http://stackoverflow.com/questions/982116/objective-c-message-dispatch-mechanism/982356#982356">Objective-C's message dispatch mechanism</a> vs a normal static C method call</li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Advantages-of-message-based-web-services">Advantages of adopting a message-based design</a></li>
	<li>Message-based designs are adopted by most <a href="http://www.servicestack.net/files/messaging.htm">leading distributed frameworks</a></li>
</ul>
<div><strong>InfoQ: You recently introduced a razor engine making ServiceStack a more complete web framework than just a web services framework - what was the motivation behind that?</strong></div>
</div>
<ul>
	<li>HTML is just another Content-Type</li>
	<li>Render HTML with Razor in Self-Hosted HttpListener and Mono without ASP.NET MVC</li>
	<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Markdown-Razor">Markdown Razor ViewEngine</a></li>
<ul>
	<li><a href="http://www.servicestack.net/docs/">ServiceStack Docs Markdown Razor Ajax site</a></li>
	<li><a href="https://github.com/ServiceStack/ServiceStack.Examples/tree/master/src/Docs">Manage markdown content directly from GitHub repo</a></li>
	<li><a href="http://nancyfx.org/">NancyFx - Alternative Open Source Web Framework</a></li>
</ul>
	<li><a href="http://razor.servicestack.net/">ServiceStack's Razor ViewEngine support</a></li>
<ul>
	<li><a href="http://razor.servicestack.net/#no-ceremony">Cascading Layout Templates</a></li>
	<li><a href="https://github.com/ServiceStack/Bundler">CSS, JS, LESS, CoffeeScript Bundler and minifier</a></li>
</ul>
</ul>
<div><strong>InfoQ: Are there any scenarios where you think WCF/Web API/MVC might be better suited than ServiceStack?</strong></div>
<div>
<ul>
	<li>MVC better at large write-heavy server-generated websites</li>
	<li>ServiceStack is optimizing for SPA's like <a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://angularjs.org/">AngularJS</a>, <a href="http://www.dartlang.org/articles/dart-web-components/">Dart Web Components</a>, etc</li>
	<li>WebApi better choice for building server-side driven systems with HATEOS Restrictions</li>
	<li>ServiceStack better choice for maximum re-use and utility of your services</li>
	<li>MVP and Microsoft Gold Partners will want to continue to choose the prescribed Microsoft stacks</li>
	<li>ServiceStack will optimize for alternative platforms (e.g. Mono), Clouds (EC2, Google CE), RDBMS (Sqlite, MySql, Pgsql, etc), Redis/NoSQL</li>
</ul>
<div><strong>InfoQ: Microsoft has collaborated with open source projects in the past (JQuery, NuGet for e.g.) and MS folks like Scott Hanselman seem quite open about adopting good open source solutions into the MS default stack wherever possible - do you foresee any such collaborations that could benefit the .NET community in general?</strong></div>
</div>
<div>
<ul>
	<li>Microsoft only adopting Open Source libraries when competing attempts have failed, e.g. jQuery, JSON.NET</li>
	<li><a href="http://www.developerfusion.com/news/92152/nuget-surprise-update-breaks-openwrap-open-standard-not-so-open/">NuGet received criticism for lack of collaboration when released</a></li>
	<li>NuGet has been a boon for using alternative libraries, <a href="https://nuget.org/profiles/mythz">ServiceStack has had over 200k+ downloads in 18 months</a></li>
	<li>Microsoft only adopted their fist OSS .NET library with JSON.NET this year, followed by DotNetOpenAuth</li>
	<li>Adopting libraries only creates "de-facto" standards and doesn't have halo effect that benefits the wider OSS .NET community</li>
<ul>
	<li>#2 ServiceStack JSON serializer only 1/14 market share, #3 SimpleJson 1/110 market share</li>
	<li>ServiceStack only popular because its <a href="http://www.servicestack.net/benchmarks/#burningmonk-benchmarks">.NET's fastest JSON Serializer</a>, <a href="http://blog.stackoverflow.com/2012/02/stack-exchange-open-source-projects/">used by StackOverflow</a></li>
</ul>
	<li>Microsoft releasing more .NET OSS thanks to Azure business model</li>
<ul>
	<li><a href="http://www.tryfsharp.org/">F#</a> is completely Open Source, <a href="http://www.servicestack.net/mythz_blog/?p=765">works great on Mono/OSX</a></li>
	<li><a href="https://github.com/SignalR">SignalR</a> has been an instant hit, <a href="https://github.com/languages/C%23/most_watched">#1 .NET OSS library on GitHub</a>. <a href="http://jabbr.net/">JabbR.net</a> is popular hangout for .NET OSS developers</li>
</ul>
	<li>Existing Open Source frameworks are hurt most by competition from Microsoft</li>
<ul>
	<li><a href="http://whatupdave.com/post/1170718843/leaving-net">MonoRail MVC community deflated by ASP.NET MVC</a></li>
	<li>Entity Framework, negatively impacting previous leading ORMs despite being <a href="http://www.servicestack.net/benchmarks/#dapper">several times slower than all other ORMs</a></li>
</ul>
	<li>.NET is unique ecosystem: Microsoft seen as authoritative voice for .NET, only uses their influence to validate their own libraries</li>
	<li><a href="https://github.com/languages">Open Source C#/.NET is slipping off GitHub OSS charts</a></li>
<ul>
	<li><a href="http://www.mono-project.com/Main_Page">Mono project</a> is brightest spark with most healthy and talented developer community providing a lot of value to .NET ecosystem</li>
	<li><a href="https://github.com/NancyFx/">NancyFx</a> and <a href="https://github.com/ServiceStack">ServiceStack</a> next biggest .NET OSS Communities, more than 200 Contributors between them</li>
	<li><a href="https://github.com/mono/MonoGame">MonoGame</a> and <a href="https://github.com/ravendb/ravendb">RavenDB</a> other notable .NET OSS projects with active communities</li>
</ul>
	<li>Raising awareness is where some collaboration from Microsoft would provide most benefits</li>
<ul>
	<li><a href="http://www.hanselman.com/blog/">Scott Hanselman's personal blog</a> currently most helpful channel promoting .NET Open Source</li>
	<li><a href="https://twitter.com/gblock">@gblock</a> another Microsoft evangelist seen tweeting about .NET OSS libs</li>
</ul>
	<li>Microsoft should build business case to help .NET OSS</li>
<ul>
	<li>Currently promotes <a href="http://www.windowsazure.com/en-us/develop/nodejs/tutorials/web-app-with-express/">node.js</a>, <a href="http://www.windowsazure.com/en-us/develop/python/tutorials/web-sites-with-django/">Python</a> and <a href="https://www.windowsazure.com/en-us/develop/java/">Java</a> OSS frameworks, but not any .NET OSS frameworks</li>
	<li>Failing support from Microsoft, the <a href="http://www.mono-project.com/Main_Page">Mono Project</a> is best hope for encouraging more .NET devs to join Open Source</li>
</ul>
</ul>
<div><strong>InfoQ: You made a comment recently on one of the forums - "I'm hoping next year to be even better, as I have a few things planned that should pull us away from the other frameworks" - would you elaborate what features you have in mind for the future?</strong></div>
</div>
<div></div>
<div>ServiceStack set to make exciting new product announcements in 2013. Current road map includes:</div>
<div>
<ul>
	<li>Merging the Async branch and its async pipeline</li>
	<li>Create new fast Async TCP Endpoints</li>
<ul>
	<li>Enable fast, native adapters for node.js and Dart server processes</li>
</ul>
	<li>Enable integration with more MQ Endpoints (i.e. RabbitMQ and ZeroMQ)</li>
	<li>VS.NET Integration and our improved solution for WCF's 'Add Service Reference'</li>
	<li>Integrated Development workflow and story for Mono/Linux</li>
<ul>
	<li>Enable automated deployment story to Amazon EC2 and Google Compute Engine clouds</li>
</ul>
	<li>Signed and Long-term stable commercial packages</li>
	<li>Starter templates around popular Single Page App Stacks: Backbone.js, AngularJS, Yeoman and Dart</li>
	<li>Starter templates for creating CRM and SharePoint-enabled support systems</li>
	<li>Website re-design and improved documentation</li>
</ul>
</div>
If you have the time I recommend reading the <a href="www.infoq.com/articles/interview-servicestack">entire interview</a>, otherwise hopefully these bulleted points can help you find the bits you're interested in sooner.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>860</wp:post_id>
		<wp:post_date>2013-01-08 15:01:09</wp:post_date>
		<wp:post_date_gmt>2013-01-08 15:01:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>servicestack-is-on-infoq-tldr-and-links</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ServiceStack eclipses jquip!</title>
		<link>http://mono.servicestack.net/mythz_blog/?p=884</link>
		<pubDate>Sun, 24 Feb 2013 20:49:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.servicestack.net/mythz_blog/?p=884</guid>
		<description></description>
		<content:encoded><![CDATA[This weekend I'm happy to find we passed an important internal milestone:
<p style="text-align: center;"><a href="https://github.com/mythz"><img class="aligncenter  wp-image-907" title="servicestack-vs-jquip" src="http://ww2.servicestack.net/wp-uploads/2013/02/servicestack-vs-jquip1.png" alt="" /></a></p>
Where for the first time since its release, the 4+ year <a href="https://github.com/ServiceStack/ServiceStack">ServiceStack</a> has finally surpassed my 3 week hobby js project <a href="https://github.com/mythz/jquip">jquip</a> in followers!
<h3>What's jquip?</h3>
For those that don't know, jquip is a <a href="http://jquip.ubixar.com/">modularized version of jQuery</a> optimized to have the lightest footprint possible whilst retaining the most useful parts of jQuery. It's useful for bandwidth constrained environments where you don't want an external jQuery reference (e.g. widgets, offline stand-alone web app) but still want to code against a pleasant jQuery-like API. We use it in the <a href="http://blog.stackoverflow.com/2012/03/enterprise-vs-consumer-development/">Careers 2.0 Apply Button widget</a> that can be hosted on external sites and provides faster start times by being able to execute straight after the in-lined jquip. Another area jquip has proven useful is to power <a href="https://github.com/ServiceStack/ServiceStack/wiki/Built-in-profiling">ServiceStack's built-in MiniProfiler</a> Web UI allowing it to work in offline environments without internet access. Embedding the full version of jQuery would've significantly increased the size of ServiceStack.dll by more than 100kb. This lets you develop your own lightweight offline single page apps that have access <a href="http://bootstrapapi.apphb.com/api/ssr-jquip.all.js">/ssr-jquip.all.js</a> using nothing other than a ServiceStack.dll :)
<h2>Why is this important?</h2>
This is a major milestone for us as one of the reasons to get into Open Source is for your creations have a positive impact on the world and the number of downloads and watchers your project has are tangible metrics that can be used to measure the reach your software has. These metrics re-affirms that contributions continue to be useful to a wide audience motivating the continued dev efforts.

I've always thought going Open Source immortalizes your code and as a developer provides the best chance for your creations to go on living long after you've left this planet. It's also immune from Market threats where not even your commercial competitors can kill it. Although both projects now have an equal number of followers, <a href="https://github.com/ServiceStack/ServiceStack">ServiceStack</a> has received <strong>an order of magnitude more effort</strong> with more than <strong>2,000+</strong> commits since first moving to GitHub. The <a href="http://www.infoq.com/articles/interview-servicestack-2">unfortunate reality is the OSS culture is relatively weak in .NET</a> whose market share is primarily ruled by commercial entities. I attribute this to the deep roots the .NET culture has in the enterprise and the fear and stigma attached from straying from the prescribed default .NET stack into the many quality OSS alternatives. Unless we see a significant shift in .NET culture I expect the adoption for .NET OSS projects to continue to remain lack-lustre and see the top leading talent of web developers and start-ups continue to erode to the more popular JavaScript, Ruby and Python platforms and their thriving OSS ecosystems. Which is justifiable at this stage, if your motivation for contributing to Open Source is to make an impact and maximize reach and utility of your software, it's hard to ignore the leading platforms which sees a considerable more OSS activity and code-sharing of OSS libraries and frameworks.

.NET is a quality platform, and C# / F# are semantically world-class designed languages with the fewest warts and a rich balance of intuitive features. They're not always the most productive option (e.g. slow iteration times of ASP.NET) but they do have the richest IDE and tooling experience. I see the biggest threat to the platform is its waning adoption and network community effects of the strengthening alternative web platforms. The outlook is not all grim, e.g. <a href="http://xamarin.com">xamarin.com</a> is bucking the trend and pushing C# in uncharted territories as a growing platform for use in cross-platform mobile development allowing the same shared C# code-base and libraries to run on the leading iOS / Android mobile platforms.
<h3><span style="font-size: 1.17em;">How can you help?</span></h3>
Essentially the goal is to increase .NET OSS activity and anything you can contribute to this effort will have a net-positive effect, some examples of this might include:
<ul>
	<li><strong>Create more .NET OSS projects:</strong> Consider Open Sourcing your in-house internal libraries and frameworks (which if you think of the benefits of OSS makes more sense to be OSS). One of the few benefits of having a weak ecosystem is the opportunity to fill in the missing features! :) .NET could do with more love around NoSQL solutions, MQ's, web tooling and libraries for alternative cloud providers, etc. These are great places to start.</li>
	<li><strong>Contribute to existing .NET OSS projects:</strong> Start with the ones you're already using otherwise here's the <a href="https://github.com/languages/C%23/most_watched">leading list of C# projects on GitHub</a> you can work through.</li>
	<li><strong>Evaluate if .NET existing projects are a better fit:</strong> If you have the opportunity for your next project, consider spending some time to evaluate if more viable OSS alternatives exist that may provide a better fit for your current default closed-source stack.</li>
	<li><strong>Increase the collective knowledge around existing projects:</strong> i.e. blog, submit talks, help out on <a href="http://stackoverflow.com/">Stack Overflow</a>, participate in mailing lists or <a href="https://jabbr.net/">JabbR</a>. If you or your team has spent a lot of time implementing a solution for a popular use-case consider blogging about it, providing insight to others following in a similar path.</li>
</ul>
<div>Currently <a href="https://github.com/languages/C%23">C# stands as the 12th</a> and <a href="https://github.com/languages/F%23">F# the 43rd</a> most popular languages on GitHub (the home of OSS), it would be great to see if we can all beat these numbers next year!</div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>884</wp:post_id>
		<wp:post_date>2013-02-24 20:49:55</wp:post_date>
		<wp:post_date_gmt>2013-02-24 20:49:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>servicestack-eclipses-jquip</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
